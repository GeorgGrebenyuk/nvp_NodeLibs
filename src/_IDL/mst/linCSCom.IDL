// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: linCSCom.nrx

[
  uuid(DF15E75B-C049-49EE-881F-DAA87873E483),
  version(1.0),
  helpstring("Model Studio ELAY Objects 1.0 Type Library"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 134283886),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 2147483647),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 8.01.0622 at Tue Jan 19 06:14:07 2038
")

]
library mdsELAYComLib
{
    // TLib : Model Studio Objects 1.0 Type Library : {1AE1985C-5D87-4E89-8E67-068628FC3CD6}
    importlib("UnitsCSCom.nrx");
    // TLib : OdaX 21.8 (x64) Type Library : {0DFA2554-8A2B-44D0-BE8F-85EEB803AEE9}
    importlib("OdaX_csd.dll");
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IMDSELLinkMode;
    interface IMDSELLink;
    interface IMDSELLinkPropWrapper;

    [
      odl,
      uuid(9397051C-A9BB-4311-A1BC-2E37C0C5126A),
      helpstring("IMDSELLinkMode Interface"),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMDSELLinkMode : IDispatch {
        [id(0x00000001), propget, helpstring("property WireLength")]
        HRESULT WireLength([out, retval] double* pVal);
        [id(0x00000002), propget, helpstring("property Sigma")]
        HRESULT Sigma([out, retval] double* pVal);
        [id(0x00000003), propget, helpstring("property Gamma")]
        HRESULT Gamma([out, retval] double* pVal);
        [id(0x00000004), propget, helpstring("property InitialModeIndex")]
        HRESULT InitialModeIndex([out, retval] long* pVal);
        [id(0x00000005), propget, helpstring("property SpanLength")]
        HRESULT SpanLength([out, retval] double* pVal);
        [id(0x00000006), propget, helpstring("property InitialSigma")]
        HRESULT InitialSigma([out, retval] double* pVal);
        [id(0x00000007), propget, helpstring("property InitialGamma")]
        HRESULT InitialGamma([out, retval] double* pVal);
        [id(0x00000008), propget, helpstring("property InitialT")]
        HRESULT InitialT([out, retval] double* pVal);
        [id(0x00000009), helpstring("method GetGammaStd")]
        HRESULT GetGammaStd(
                        long Idx, 
                        [out, retval] double* pRes);
        [id(0x0000000a), propget, helpstring("property MinX")]
        HRESULT MinX([out, retval] double* pVal);
        [id(0x0000000b), propget, helpstring("property MinZ")]
        HRESULT MinZ([out, retval] double* pVal);
        [id(0x0000000c), propget, helpstring("property SlackMin")]
        HRESULT SlackMin([out, retval] double* pVal);
        [id(0x0000000d), propget, helpstring("property SlackMax")]
        HRESULT SlackMax([out, retval] double* pVal);
        [id(0x0000000e), helpstring("method GetSlackMaxAt")]
        HRESULT GetSlackMaxAt(
                        [in] double Distance, 
                        [out, retval] double* pVal);
        [id(0x0000000f), propget, helpstring("property Length")]
        HRESULT Length([out, retval] double* pVal);
        [id(0x00000010), helpstring("method GetLengthAt")]
        HRESULT GetWireLengthAt(
                        double Distance, 
                        [out, retval] double* Len);
        [id(0x00000011), propget, helpstring("property WindAngle")]
        HRESULT WindAngle([out, retval] double* pVal);
        [id(0x00000012), helpstring("method GetGammaNorm")]
        HRESULT GetGammaNorm(
                        long Idx, 
                        [out, retval] double* pRes);
        [id(0x00000013), helpstring("method GetSlackMinAt")]
        HRESULT GetSlackMinAt(
                        [in] double Distance, 
                        [out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("property SlackMiddle")]
        HRESULT SlackMiddle([out, retval] double* pVal);
        [id(0x00000015), propget, helpstring("property Deviation")]
        HRESULT Deviation([out, retval] double* pVal);
        [id(0x00000016), helpstring("method GetDeviationAt")]
        HRESULT GetDeviationAt(
                        [in] double Distance, 
                        [out, retval] double* pVal);
        [id(0x00000017), helpstring("method GetSlackMiddleAt")]
        HRESULT GetSlackMiddleAt(
                        [in] double Distance, 
                        [out, retval] double* pVal);
        [id(0x00000018), propget, helpstring("property CalcT")]
        HRESULT CalcT([out, retval] double* pVal);
        [id(0x00000019), propget, helpstring("property CalcIceThickness")]
        HRESULT CalcIceThickness([out, retval] double* pVal);
    };

    [
      odl,
      uuid(E52E1176-48F1-408F-973B-0CE20C80DB0C),
      helpstring("IMDSELLink Interface"),
      dual,
      nonextensible,
      oleautomation
    ]
    interface IMDSELLink : IAcadEntity {
        [id(0x00000001), propget, helpstring("Параметры")]
        HRESULT Element([out, retval] IElement** pVal);
        [id(0x00000001), propput, helpstring("Параметры")]
        HRESULT Element([in] IElement* pVal);
        [id(0x00000003), propget, helpstring("Начальная точка")]
        HRESULT StartPoint([out, retval] VARIANT* pVal);
        [id(0x00000004), propget, helpstring("Конечная точка")]
        HRESULT EndPoint([out, retval] VARIANT* pVal);
        [id(0x00000006), propget, helpstring("Имеется первая гирлянда")]
        HRESULT GarlandStartEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000006), propput, helpstring("Имеется первая гирлянда")]
        HRESULT GarlandStartEnabled([in] VARIANT_BOOL pVal);
        [id(0x00000007), propget, helpstring("Длина первой гирлянды")]
        HRESULT GarlandStartLength([out, retval] double* pVal);
        [id(0x00000007), propput, helpstring("Длина первой гирлянды")]
        HRESULT GarlandStartLength([in] double pVal);
        [id(0x00000008), propget, helpstring("z гирлянды")]
        HRESULT GarlandStartWeight([out, retval] double* pVal);
        [id(0x00000032), propget, helpstring("Диаметр первой гирлянды (мм)")]
        HRESULT GarlandStartDiameter([out, retval] double* pVal);
        [id(0x00000032), propput, helpstring("Диаметр первой гирлянды (мм)")]
        HRESULT GarlandStartDiameter([in] double pVal);
        [id(0x00000034), propget, helpstring("Число цепей изоляторов первой гирлянды")]
        HRESULT GarlandStartChainCount([out, retval] long* pVal);
        [id(0x00000034), propput, helpstring("Число цепей изоляторов первой гирлянды")]
        HRESULT GarlandStartChainCount([in] long pVal);
        [id(0x00000036), propget, helpstring("Расположение цепей изоляторов первой гирлянды")]
        HRESULT GarlandStartChainLayout([out, retval] short* pVal);
        [id(0x00000036), propput, helpstring("Расположение цепей изоляторов первой гирлянды")]
        HRESULT GarlandStartChainLayout([in] short pVal);
        [id(0x00000038), propget, helpstring("Расстояние между цепями изоляторов первой гирлянды")]
        HRESULT GarlandStartChainDistance([out, retval] double* pVal);
        [id(0x00000038), propput, helpstring("Расстояние между цепями изоляторов первой гирлянды")]
        HRESULT GarlandStartChainDistance([in] double pVal);
        [id(0x0000004a), propget, helpstring("Масса первой гирлянды без гололеда, кгс")]
        HRESULT GarlandStartTotalWeightWithoutIce([out, retval] double* pVal);
        [id(0x0000004a), propput, helpstring("Масса первой гирлянды без гололеда, кгс")]
        HRESULT GarlandStartTotalWeightWithoutIce([in] double pVal);
        [id(0x00000040), propget, helpstring("Общий вес первой гирлянды")]
        HRESULT GarlandStartTotalWeight([out, retval] double* pVal);
        [id(0x00000040), propput, helpstring("Общий вес первой гирлянды")]
        HRESULT GarlandStartTotalWeight([in] double pVal);
        [id(0x00000042), propget, helpstring("Угол наклона первой гирлянды")]
        HRESULT GarlandStartBettaAngle([out, retval] BSTR* pVal);
        [id(0x00000064), propget, helpstring("Расстояние до узла ответвительной арматуры, мм")]
        HRESULT GarlandStartDecorationDist([out, retval] double* pVal);
        [id(0x00000064), propput, helpstring("Расстояние до узла ответвительной арматуры, мм")]
        HRESULT GarlandStartDecorationDist([in] double pVal);
        [id(0x00000009), propget, helpstring("Имеется вторая гирлянда")]
        HRESULT GarlandEndEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000009), propput, helpstring("Имеется вторая гирлянда")]
        HRESULT GarlandEndEnabled([in] VARIANT_BOOL pVal);
        [id(0x0000000a), propget, helpstring("Длина второй гирлянды")]
        HRESULT GarlandEndLength([out, retval] double* pVal);
        [id(0x0000000a), propput, helpstring("Длина второй гирлянды")]
        HRESULT GarlandEndLength([in] double pVal);
        [id(0x0000000b), propget, helpstring("Вес одной цепи второй гирлянды")]
        HRESULT GarlandEndWeight([out, retval] double* pVal);
        [id(0x00000033), propget, helpstring("Диаметр второй гирлянды (мм)")]
        HRESULT GarlandEndDiameter([out, retval] double* pVal);
        [id(0x00000033), propput, helpstring("Диаметр второй гирлянды (мм)")]
        HRESULT GarlandEndDiameter([in] double pVal);
        [id(0x00000035), propget, helpstring("Число цепей изоляторов второй гирлянды")]
        HRESULT GarlandEndChainCount([out, retval] long* pVal);
        [id(0x00000035), propput, helpstring("Число цепей изоляторов второй гирлянды")]
        HRESULT GarlandEndChainCount([in] long pVal);
        [id(0x00000037), propget, helpstring("Расположение цепей изоляторов второй гирлянды")]
        HRESULT GarlandEndChainLayout([out, retval] short* pVal);
        [id(0x00000037), propput, helpstring("Расположение цепей изоляторов второй гирлянды")]
        HRESULT GarlandEndChainLayout([in] short pVal);
        [id(0x00000039), propget, helpstring("Расстояние между цепями изоляторов второй гирлянды")]
        HRESULT GarlandEndChainDistance([out, retval] double* pVal);
        [id(0x00000039), propput, helpstring("Расстояние между цепями изоляторов второй гирлянды")]
        HRESULT GarlandEndChainDistance([in] double pVal);
        [id(0x0000004b), propget, helpstring("Масса второй гирлянды без гололеда, кгс")]
        HRESULT GarlandEndTotalWeightWithoutIce([out, retval] double* pVal);
        [id(0x0000004b), propput, helpstring("Масса второй гирлянды без гололеда, кгс")]
        HRESULT GarlandEndTotalWeightWithoutIce([in] double pVal);
        [id(0x00000041), propget, helpstring("Общий вес второй гирлянды")]
        HRESULT GarlandEndTotalWeight([out, retval] double* pVal);
        [id(0x00000043), propget, helpstring("Угол наклона второй гирлянды")]
        HRESULT GarlandEndBettaAngle([out, retval] BSTR* pVal);
        [id(0x00000065), propget, helpstring("Расстояние до узла ответвительной арматуры, мм")]
        HRESULT GarlandEndDecorationDist([out, retval] double* pVal);
        [id(0x00000065), propput, helpstring("Расстояние до узла ответвительной арматуры, мм")]
        HRESULT GarlandEndDecorationDist([in] double pVal);
        [id(0x0000002d), propget, helpstring("Единицы измерения силы")]
        HRESULT PowerUnits([out, retval] long* pVal);
        [id(0x0000002d), propput, helpstring("Единицы измерения силы")]
        HRESULT PowerUnits([in] long pVal);
        [id(0x0000000e), helpstring("method Calculate")]
        HRESULT Calculate(
                        [in] double Temperature, 
                        [in] double Wind, 
                        [in] double Ice, 
                        [out, retval] IMDSELLinkMode** ppResult);
        [id(0x0000000f), propget, helpstring("Модель провода")]
        HRESULT Model([out, retval] BSTR* pVal);
        [id(0x00000010), propget, helpstring("Сечение (кв. мм)")]
        HRESULT Section([out, retval] double* pVal);
        [id(0x00000011), propget, helpstring("Диаметр (мм)")]
        HRESULT Diameter([out, retval] double* pVal);
        [id(0x00000012), propget, helpstring("Масса провода (кг/км)")]
        HRESULT Mass([out, retval] double* pVal);
        [id(0x00000013), propget, helpstring("Сигма tн")]
        HRESULT SigmaTn([out, retval] double* pVal);
        [id(0x00000014), propget, helpstring("Сигма tм")]
        HRESULT SigmaTm([out, retval] double* pVal);
        [id(0x00000015), propget, helpstring("Сигма tэ")]
        HRESULT SigmaTe([out, retval] double* pVal);
        [id(0x00000016), propget, helpstring("E - модуль упругости")]
        HRESULT E([out, retval] double* pVal);
        [id(0x00000017), propget, helpstring("Мод. нач. F")]
        HRESULT F([out, retval] double* pVal);
        [id(0x00000018), propget, helpstring("Мод. пред. F")]
        HRESULT D([out, retval] double* pVal);
        [id(0x00000019), propget, helpstring("Альфа коэффициент линейного расширения (1e-6/град. С)")]
        HRESULT Alpha([out, retval] double* pVal);
        [id(0x0000001a), propget, helpstring("Строительная длина (м)")]
        HRESULT FactoryLength([out, retval] double* pVal);
        [id(0x0000003a), propget, helpstring("Число проводов расщепленной фазы")]
        HRESULT SplitPhase([out, retval] long* pVal);
        [id(0x0000003a), propput, helpstring("Число проводов расщепленной фазы")]
        HRESULT SplitPhase([in] long pVal);
        [id(0x0000003b), propget, helpstring("Расстояние между проводами расщепленной фазы (мм)")]
        HRESULT SplitDistance([out, retval] double* pVal);
        [id(0x0000003b), propput, helpstring("Расстояние между проводами расщепленной фазы (мм)")]
        HRESULT SplitDistance([in] double pVal);
        [id(0x0000003c), propget, helpstring("Число стяжек на 10 м")]
        HRESULT ClampingDensity([out, retval] double* pVal);
        [id(0x0000003c), propput, helpstring("Число стяжек на 10 м")]
        HRESULT ClampingDensity([in] double pVal);
        [id(0x0000003e), propget, helpstring("Вес стяжек")]
        HRESULT ClampingWeight([out, retval] double* pVal);
        [id(0x0000003e), propput, helpstring("Вес стяжек")]
        HRESULT ClampingWeight([in] double pVal);
        [id(0x00000044), propget, helpstring("Режим отображения результатов")]
        HRESULT TotalResultDataMode([out, retval] long* pVal);
        [id(0x00000044), propput, helpstring("Режим отображения результатов")]
        HRESULT TotalResultDataMode([in] long pVal);
        [id(0x0000003f), propget, helpstring("Ошибка при расчете провода")]
        HRESULT CalculationError([out, retval] BSTR* pVal);
        [id(0x0000001b), propget, helpstring("Режим расчета")]
        HRESULT ModeIndex([out, retval] long* pVal);
        [id(0x0000001b), propput, helpstring("Режим расчета")]
        HRESULT ModeIndex([in] long pVal);
        [id(0x0000001c), propget, helpstring("Длина пролета")]
        HRESULT SpanLength([out, retval] double* pVal);
        [id(0x00000045), propget, helpstring("Приведенный центр тяжести")]
        HRESULT CentroidHeight([out, retval] double* pVal);
        [id(0x0000001d), propget, helpstring("Название исходного режима")]
        HRESULT InitialModeName([out, retval] BSTR* pVal);
        [id(0x0000001e), propget, helpstring("Сигма исходного режима")]
        HRESULT InitialModeSigma([out, retval] double* pVal);
        [id(0x0000001f), propget, helpstring("Гамма исходного режима")]
        HRESULT InitialModeGamma([out, retval] double* pVal);
        [id(0x00000020), propget, helpstring("Температура исходного режима")]
        HRESULT InitialModeT([out, retval] double* pVal);
        [id(0x00000021), propget, helpstring("Напряжение в расчетном режиме (Ед.силы/мм?)")]
        HRESULT SigmaCoeff([out, retval] double* pVal);
        [id(0x00000022), propget, helpstring("Нагрузка на провод")]
        HRESULT GammaCoeff([out, retval] double* pVal);
        [id(0x00000023), propget, helpstring("Максимальная длина провода (м)")]
        HRESULT LengthMax([out, retval] double* pVal);
        [id(0x00000024), propget, helpstring("Длина провода в текущем режиме (м)")]
        HRESULT Length([out, retval] double* pVal);
        [id(0x00000024), propput, helpstring("Длина провода в текущем режиме (м)")]
        HRESULT Length([in] double pVal);
        [id(0x00000025), propget, helpstring("Нормативные нагрузки")]
        HRESULT GammaStdNorm([out, retval] VARIANT* pVal);
        [id(0x00000026), propget, helpstring("Расчетные нагрузки")]
        HRESULT GammaStdCalc([out, retval] VARIANT* pVal);
        [id(0x00000027), propget, helpstring("Удельные нагрузки")]
        HRESULT GammaStdSpec([out, retval] VARIANT* pVal);
        [id(0x00000028), propget, helpstring("Максимальная стрела провеса для всех режимов")]
        HRESULT SlackMax([out, retval] double* pVal);
        [id(0x00000029), propget, helpstring("Стрела провеса")]
        HRESULT Slack([out, retval] double* pVal);
        [id(0x00000029), propput, helpstring("Стрела провеса")]
        HRESULT Slack([in] double pVal);
        [id(0x0000002a), propget, helpstring("Угол отклонения ветром")]
        HRESULT WindAngle([out, retval] double* pVal);
        [id(0x0000003d), propget, helpstring("Допустимое тяжение для опоры")]
        HRESULT SupportStressMax([out, retval] double* pVal);
        [id(0x0000002b), propget, helpstring("Текущее значение тяжения")]
        HRESULT Stress([out, retval] double* pVal);
        [id(0x0000002c), propget, helpstring("Способ задания тяжения")]
        HRESULT MaxStress([out, retval] long* pVal);
        [id(0x0000002c), propput, helpstring("Способ задания тяжения")]
        HRESULT MaxStress([in] long pVal);
        [id(0x0000002e), propget, helpstring("Максимальное тяжение")]
        HRESULT StressMaxValue([out, retval] double* pVal);
        [id(0x0000002e), propput, helpstring("Максимальное тяжение")]
        HRESULT StressMaxValue([in] double pVal);
        [id(0x00000046), propget, helpstring("Максимальное напряжение")]
        HRESULT TensionMaxValue([out, retval] double* pVal);
        [id(0x00000046), propput, helpstring("Максимальное напряжение")]
        HRESULT TensionMaxValue([in] double pVal);
        [id(0x0000002f), propget, helpstring("property NodeStart")]
        HRESULT NodeStart([out, retval] IDispatch** pVal);
        [id(0x00000030), propget, helpstring("property NodeEnd")]
        HRESULT NodeEnd([out, retval] IDispatch** pVal);
        [id(0x00000031), propget, helpstring("property Nodes")]
        HRESULT Nodes([out, retval] IMDSNodes** pVal);
        [id(0x00000047), helpstring("method climateData")]
        HRESULT climateData([out, retval] IDispatch** pVal);
        [id(0x00000048), propget, helpstring("Высота начальной точки подвеса, м")]
        HRESULT StartLevel([out, retval] double* pVal);
        [id(0x00000049), propget, helpstring("Высота конечной точки подвеса, м")]
        HRESULT EndLevel([out, retval] double* pVal);
        [id(0x0000004c), helpstring("method CurrentModeData")]
        HRESULT CurrentModeData([out, retval] IMDSELLinkMode** ppResult);
        [id(0x0000004d), helpstring("method CalculateByMode")]
        HRESULT CalculateByMode(
                        [in] long nMode, 
                        [out, retval] IMDSELLinkMode** ppResult);
        [id(0x00000078), propget, helpstring("Коэффициенты расчетных формул")]
        HRESULT CalcCoeffs([out, retval] VARIANT* pVal);
    };

    [
      uuid(564E7EEE-5A1B-441A-9A51-3C2B4E279151),
      helpstring("MDSELLink Class")
    ]
    coclass MDSELLink {
        [default] interface IMDSELLink;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(4B4DADBB-09E7-43D5-8A9C-4C94E32D9C55),
      helpstring("IMDSELLinkPropWrapper Interface")
    ]
    interface IMDSELLinkPropWrapper : IUnknown {
    };

    [
      uuid(E65176D7-3782-4D26-8C13-854399A85514),
      helpstring("MDSELLinkPropWrapper Class")
    ]
    coclass MDSELLinkPropWrapper {
        [default] interface IMDSELLinkPropWrapper;
    };

    [
      uuid(CDDE043B-9453-4AC5-8ED7-0663EB7E44D3),
      helpstring("MDSELLinkMode Class")
    ]
    coclass MDSELLinkMode {
        [default] interface IMDSELLinkMode;
    };
};
