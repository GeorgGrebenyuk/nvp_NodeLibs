// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: OdaX_csd.dll

[
  uuid(0DFA2554-8A2B-44D0-BE8F-85EEB803AEE9),
  version(23.2),
  helpstring("OdaX 23.2 (x64) Type Library"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 134283890),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 2147483647),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 8.01.0626 at Tue Jan 19 06:14:07 2038
")

]
library OdaX
{
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IAcadObjectEvents;
    interface IAcadObject;
    interface IAcadDatabase;
    interface IAcadModelSpace;
    interface IAcadBlock;
    interface IAcadEntity;
    interface IAcadAcCmColor;
    interface IAcadHyperlinks;
    interface IAcadHyperlink;
    interface IAcad3DFace;
    interface IAcadPolygonMesh;
    interface IAcad3DPolyline;
    interface IAcadArc;
    interface IAcadAttribute;
    interface IAcad3DSolid;
    interface IAcadRegion;
    interface IAcadCircle;
    interface IAcadDimAligned;
    interface IAcadDimension;
    interface IAcadDimAngular;
    interface IAcadDimDiametric;
    interface IAcadDimRotated;
    interface IAcadDimOrdinate;
    interface IAcadDimRadial;
    interface IAcadEllipse;
    interface IAcadLeader;
    interface IAcadMText;
    interface IAcadPoint;
    interface IAcadLWPolyline;
    interface IAcadPolyline;
    interface IAcadRay;
    interface IAcadShape;
    interface IAcadSolid;
    interface IAcadSpline;
    interface IAcadText;
    interface IAcadTolerance;
    interface IAcadTrace;
    interface IAcadXline;
    interface IAcadBlockReference;
    interface IAcadHatch;
    interface IAcadRasterImage;
    interface IAcadLine;
    interface IAcadLayout;
    interface IAcadPlotConfiguration;
    interface IAcadMInsertBlock;
    interface IAcadPolyfaceMesh;
    interface IAcadMLine;
    interface IAcadDim3PointAngular;
    interface IAcadExternalReference;
    interface IAcadTable;
    interface IAcadDimArcLength;
    interface IAcadDimRadialLarge;
    interface IAcadSection;
    interface IAcadSectionSettings;
    interface IAcadSectionTypeSettings;
    interface IAcadMLeader;
    interface IAcadOle;
    interface IAcadPaperSpace;
    interface IAcadPViewport;
    interface IAcadView;
    interface IAcadBlocks;
    interface IAcadGroups;
    interface IAcadGroup;
    interface IAcadDimStyles;
    interface IAcadDimStyle;
    interface IAcadLayers;
    interface IAcadLayer;
    interface IAcadLineTypes;
    interface IAcadLineType;
    interface IAcadDictionaries;
    interface IAcadDictionary;
    interface IAcadXRecord;
    interface IAcadRegisteredApplications;
    interface IAcadRegisteredApplication;
    interface IAcadTextStyles;
    interface IAcadTextStyle;
    interface IAcadUCSs;
    interface IAcadUCS;
    interface IAcadViews;
    interface IAcadViewports;
    interface IAcadViewport;
    interface IAcadLayouts;
    interface IAcadPlotConfigurations;
    interface IAcadDatabasePreferences;
    interface IAcadFileDependencies;
    interface IAcadFileDependency;
    interface IAcadSummaryInfo;
    interface IAcadSectionManager;
    interface IAcadMaterials;
    interface IAcadMaterial;
    interface IOdaOle;
    interface IAcadDynamicBlockReferenceProperty;
    interface IOdaMLineStyles;
    interface IOdaMLineStyle;
    interface IAcadSurface;
    interface IAcadPlaneSurface;
    interface IAcadExtrudedSurface;
    interface IAcadRevolvedSurface;
    interface IAcadSweptSurface;
    interface IAcadLoftedSurface;
    interface IAcadHelix;
    interface IAcadUnderlay;
    interface IAcadDwfUnderlay;
    interface IOdaPolyfaceMesh;
    interface IAcadSubEntity;
    interface IAcadMLeaderLeader;
    interface IAcadSubEntSolidFace;
    interface IAcadSubEntSolidEdge;
    interface IAcadSubEntSolidVertex;
    interface IAcadWipeout;
    interface IOdaLight;
    interface IOdaCamera;
    interface IOPMPropertyExpander;
    interface IOPMPropertyExtension;
    interface IOdaLineType;
    interface IOdaBlock;
    interface IAcadMLeaderStyle;
    interface IOdaSpline;
    interface IAcadHatch2;
    interface IOdaRasterImage;
    interface IAcadAttributeReference;
    interface IAcadTableStyle;
    interface IAcadSortentsTable;
    interface IAcadSectionTypeSettings2;
    interface IAcadIdPair;

    
    
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
    

    
    
        
        
        
    

    
    
        
        
    

    
    
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
        
    

    typedef [uuid(A9C7C6E5-CD58-4FF0-ACAE-7265220D0FC0), public]
    BSTR ACAD_LAYER;

    typedef [uuid(3045D5A4-9B09-451D-A044-62219FBF70B5), public]
    long ACAD_NULL;

    typedef [uuid(540A4308-2EE2-4E37-A83C-5A0966FAF867), public]
    VARIANT ACAD_POINT;

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
        
    

    [
      odl,
      uuid(32C85A4A-F475-4A97-BCAC-8DAC27ED8897),
      helpstring("Event interface for TeighaX entites"),
      oleautomation
    ]
    interface IAcadObjectEvents : IUnknown {
        [helpstring("Occurs when an object in a drawing has been modified.")]
        HRESULT _stdcall Modified([in] IAcadObject* pObject);
    };

    [
      odl,
      uuid(8C5505D5-0BBD-472F-AF6F-709395BD3B29),
      helpstring("The standard interface for a basic TeighaX object"),
      dual,
      oleautomation
    ]
    interface IAcadObject : IDispatch {
        [id(0x00000400), propget, helpstring("Returns the handle of an object.")]
        HRESULT Handle([out, retval] BSTR* Handle);
        [id(0x00000401), propget, helpstring("Returns the TeighaX class name of an object.")]
        HRESULT ObjectName([out, retval] BSTR* ObjectName);
        [id(0x00000402), helpstring("Returns the extended data (XData) associated with an object.")]
        HRESULT GetXData(
                        [in] BSTR AppName, 
                        [out] VARIANT* XDataType, 
                        [out] VARIANT* XDataValue);
        [id(0x00000403), helpstring("Sets the extended data (XData) associated with an object.")]
        HRESULT SetXData(
                        [in] VARIANT XDataType, 
                        [in] VARIANT XDataValue);
        [id(0x00000404), helpstring("Deletes a specified object.")]
        HRESULT Delete();
        [id(0x00000405), propget, helpstring("Returns the object ID of an object.")]
        HRESULT ObjectID([out, retval] LONG_PTR* ObjectID);
        [id(0x00000406), propget, helpstring("Returns the Application object.")]
        HRESULT Application([out, retval] IDispatch** ApplicationObject);
        [id(0x00000407), propget, hidden, helpstring("Returns the database in which the object belongs.")]
        HRESULT Database([out, retval] IAcadDatabase** pDatabase);
        [id(0x00000408), propget, helpstring("Returns whether an object has an associated extension dictionary.")]
        HRESULT HasExtensionDictionary([out, retval] VARIANT_BOOL* bHasDictionary);
        [id(0x00000409), helpstring("Returns the extension dictionary associated with an object.")]
        HRESULT GetExtensionDictionary([out, retval] IAcadDictionary** pExtDictionary);
        [id(0x0000040a), propget, helpstring("Returns the object ID of the parent object.")]
        HRESULT OwnerID([out, retval] LONG_PTR* OwnerID);
        [id(0x0000040b), propget, helpstring("Returns the drawing to which an object belongs.")]
        HRESULT Document([out, retval] IDispatch** pDocument);
        [id(0x00000475), hidden, helpstring("Erases all the objects in a selection set")]
        HRESULT Erase();
    };

    typedef [public    ,
      custom(F914481D-9C62-4B43-9340-E9B2E6252E5F, 1)    
]
    int64 LONG_PTR;

    [
      odl,
      uuid(CDE87ACC-18FE-4122-A35D-767A839C7962),
      helpstring("Provides an interface to the database resident objects in an TeighaX document"),
      dual,
      oleautomation
    ]
    interface IAcadDatabase : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the ModelSpace collection for a document.")]
        HRESULT ModelSpace([out, retval] IAcadModelSpace** pMSpace);
        [id(0x00000002), propget, helpstring("Returns the PaperSpace collection for a document.")]
        HRESULT PaperSpace([out, retval] IAcadPaperSpace** pPSpace);
        [id(0x00000003), propget, helpstring("Returns the Blocks collection for a document.")]
        HRESULT Blocks([out, retval] IAcadBlocks** pBlocks);
        [id(0x00000004), helpstring("Duplicates multiple objects.")]
        HRESULT CopyObjects(
                        [in] VARIANT Objects, 
                        [in, optional] VARIANT Owner, 
                        [in, out, optional] VARIANT* IdPairs, 
                        [out, retval] VARIANT* pNewObjects);
        [id(0x00000005), propget, helpstring("Returns the Groups Collection object for a document.")]
        HRESULT Groups([out, retval] IAcadGroups** pGroups);
        [id(0x00000006), propget, helpstring("Returns the DimStyles Collection object for a document.")]
        HRESULT DimStyles([out, retval] IAcadDimStyles** pDimStyles);
        [id(0x00000007), propget, helpstring("Returns the Layers Collection object for a document.")]
        HRESULT Layers([out, retval] IAcadLayers** pLayers);
        [id(0x00000008), propget, helpstring("Returns the Linetypes Collection object for a document.")]
        HRESULT Linetypes([out, retval] IAcadLineTypes** pLinetypes);
        [id(0x00000009), propget, helpstring("Returns the Dictionaries Collection object for a document.")]
        HRESULT Dictionaries([out, retval] IAcadDictionaries** pDictionaries);
        [id(0x0000000a), propget, helpstring("Returns the RegisteredApplications Collection object for a document.")]
        HRESULT RegisteredApplications([out, retval] IAcadRegisteredApplications** pRegApps);
        [id(0x0000000b), propget, helpstring("Returns the TextStyles Collection object of a document.")]
        HRESULT TextStyles([out, retval] IAcadTextStyles** pTextStyles);
        [id(0x0000000c), propget, helpstring("Returns the UCSs Collection object of a document.")]
        HRESULT UserCoordinateSystems([out, retval] IAcadUCSs** pUCSs);
        [id(0x0000000d), propget, helpstring("Returns the Views Collection object of a document.")]
        HRESULT Views([out, retval] IAcadViews** pViews);
        [id(0x0000000e), propget, helpstring("Returns the Viewports Collection object of a document.")]
        HRESULT Viewports([out, retval] IAcadViewports** pViewports);
        [id(0x0000000f), propget, helpstring("Specifies or returns the elevation in modelspace.")]
        HRESULT ElevationModelSpace([out, retval] double* Elevation);
        [id(0x0000000f), propput, helpstring("Specifies or returns the elevation in modelspace.")]
        HRESULT ElevationModelSpace([in] double Elevation);
        [id(0x00000010), propget, helpstring("Specifies or returns the elevation in paperspace.")]
        HRESULT ElevationPaperSpace([out, retval] double* Elevation);
        [id(0x00000010), propput, helpstring("Specifies or returns the elevation in paperspace.")]
        HRESULT ElevationPaperSpace([in] double Elevation);
        [id(0x00000011), propget, helpstring("Specifies or returns the drawing limits of a document.")]
        HRESULT Limits([out, retval] VARIANT* Limits);
        [id(0x00000011), propput, helpstring("Specifies or returns the drawing limits of a document.")]
        HRESULT Limits([in] VARIANT Limits);
        [id(0x00000012), helpstring("Returns the object that corresponds with a specified handle.")]
        HRESULT HandleToObject(
                        [in] BSTR Handle, 
                        [out, retval] IDispatch** pObj);
        [id(0x00000013), helpstring("Returns the object that corresponds with a specified object ID.")]
        HRESULT ObjectIdToObject(
                        [in] LONG_PTR ObjectID, 
                        [out, retval] IDispatch** pObj);
        [id(0x00000014), propget, helpstring("Returns the Layouts Collection object for a document.")]
        HRESULT Layouts([out, retval] IAcadLayouts** pLayouts);
        [id(0x00000015), propget, helpstring("Returns the PlotConfigurations Collection object for a document.")]
        HRESULT PlotConfigurations([out, retval] IAcadPlotConfigurations** pPlotConfigs);
        [id(0x00000016), propget, helpstring("Returns the Preferences object for a document.")]
        HRESULT Preferences([out, retval] IAcadDatabasePreferences** pPref);
        [id(0x00000046), propget, helpstring("Returns the FileDependencies Collection object for a document.")]
        HRESULT FileDependencies([out, retval] IAcadFileDependencies** pFDM);
        [id(0x00000047), propget, helpstring("Returns the SummaryInfo object for a document.")]
        HRESULT SummaryInfo([out, retval] IAcadSummaryInfo** pSummaryInfo);
        [id(0x00000048), propget, helpstring("Returns the SectionManager Collection object for a document.")]
        HRESULT SectionManager([out, retval] IAcadSectionManager** pSecMgr);
        [id(0x00000049), propget, helpstring("Returns the Materials Collection object for a document.")]
        HRESULT Materials([out, retval] IAcadMaterials** pMaterials);
    };

    [
      odl,
      uuid(3BB28A2F-38EE-454D-8545-7E34F1F1F187),
      helpstring("TeighaX Interface of a special Block object containing all model space entities"),
      dual,
      oleautomation
    ]
    interface IAcadModelSpace : IAcadBlock {
    };

    [
      odl,
      uuid(F4862476-4843-4E3B-AB28-B81F3AFC618C),
      helpstring("TeighaX Interface of a block definition containing a name and a set of objects"),
      dual,
      oleautomation
    ]
    interface IAcadBlock : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in a collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadEntity** pItem);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000600), propget, helpstring("Returns the number of items in a collection.")]
        HRESULT Count([out, retval] long* pVal);
        [id(0x00000601), propget, helpstring("Specifies or returns the name of an object.")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000601), propput, helpstring("Specifies or returns the name of an object.")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000602), propget, helpstring("Specifies or returns the coordinates for the origin of a block.")]
        HRESULT Origin([out, retval] VARIANT* Origin);
        [id(0x00000602), propput, helpstring("Specifies or returns the coordinates for the origin of a block.")]
        HRESULT Origin([in] VARIANT Origin);
        [id(0x00000603), helpstring("Creates a custom object.")]
        HRESULT AddCustomObject(
                        [in] BSTR ClassName, 
                        [out, retval] IDispatch** pObject);
        [id(0x00000604), helpstring("Creates a 3DFace object and adds it to modelspace, paperspace, or a block.")]
        HRESULT Add3DFace(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [in] VARIANT point3, 
                        [in] VARIANT Point4, 
                        [out, retval] IAcad3DFace** pFace3d);
        [id(0x00000605), helpstring("Creates a PolyfaceMesh object and adds it to modelspace, paperspace, or a block.")]
        HRESULT Add3DMesh(
                        [in] int M, 
                        [in] int N, 
                        [in] VARIANT PointsMatrix, 
                        [out, retval] IAcadPolygonMesh** pMesh3d);
        [id(0x00000606), helpstring("Creates a 3DPolyline object and adds it to modelspace, paperspace, or a block.")]
        HRESULT Add3DPoly(
                        [in] VARIANT PointsArray, 
                        [out, retval] IAcad3DPolyline** pPoly3d);
        [id(0x00000607), helpstring("Creates an Arc object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddArc(
                        [in] VARIANT Center, 
                        [in] double Radius, 
                        [in] double StartAngle, 
                        [in] double EndAngle, 
                        [out, retval] IAcadArc** pArc);
        [id(0x00000608), helpstring("Creates an Attribute object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddAttribute(
                        [in] double Height, 
                        [in] AcAttributeMode Mode, 
                        [in] BSTR Prompt, 
                        [in] VARIANT InsertionPoint, 
                        [in] BSTR Tag, 
                        [in] BSTR Value, 
                        [out, retval] IAcadAttribute** pAttr);
        [id(0x00000609), helpstring("Creates a 3D solid box and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddBox(
                        [in] VARIANT Origin, 
                        [in] double Length, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] IAcad3DSolid** pBox);
        [id(0x0000060a), helpstring("Creates a Circle object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddCircle(
                        [in] VARIANT Center, 
                        [in] double Radius, 
                        [out, retval] IAcadCircle** pCircle);
        [id(0x0000060b), helpstring("Creates a 3D solid cone and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddCone(
                        [in] VARIANT Center, 
                        [in] double BaseRadius, 
                        [in] double Height, 
                        [out, retval] IAcad3DSolid** pCone);
        [id(0x0000060c), helpstring("Creates a 3D solid cylinder and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddCylinder(
                        [in] VARIANT Center, 
                        [in] double Radius, 
                        [in] double Height, 
                        [out, retval] IAcad3DSolid** pCyl);
        [id(0x0000060d), helpstring("Creates an aligned dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDimAligned(
                        [in] VARIANT ExtLine1Point, 
                        [in] VARIANT ExtLine2Point, 
                        [in] VARIANT TextPosition, 
                        [out, retval] IAcadDimAligned** pDim);
        [id(0x0000060e), helpstring("Creates an angular dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDimAngular(
                        [in] VARIANT AngleVertex, 
                        [in] VARIANT FirstEndPoint, 
                        [in] VARIANT SecondEndPoint, 
                        [in] VARIANT TextPoint, 
                        [out, retval] IAcadDimAngular** pDim);
        [id(0x0000060f), helpstring("Creates a diametric dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDimDiametric(
                        [in] VARIANT ChordPoint, 
                        [in] VARIANT FarChordPoint, 
                        [in] double LeaderLength, 
                        [out, retval] IAcadDimDiametric** pDim);
        [id(0x00000610), helpstring("Creates a rotated linear dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDimRotated(
                        [in] VARIANT ExtLine1Point, 
                        [in] VARIANT ExtLine2Point, 
                        [in] VARIANT DimLineLocation, 
                        [in] double RotationAngle, 
                        [out, retval] IAcadDimRotated** pDim);
        [id(0x00000611), helpstring("Creates an ordinate dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDimOrdinate(
                        [in] VARIANT DefinitionPoint, 
                        [in] VARIANT LeaderEndPoint, 
                        [in] int UseXAxis, 
                        [out, retval] IAcadDimOrdinate** pDim);
        [id(0x00000612), helpstring("Creates a radial dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDimRadial(
                        [in] VARIANT Center, 
                        [in] VARIANT ChordPoint, 
                        [in] double LeaderLength, 
                        [out, retval] IAcadDimRadial** pDim);
        [id(0x00000613), helpstring("Creates an Ellipse object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddEllipse(
                        [in] VARIANT Center, 
                        [in] VARIANT MajorAxis, 
                        [in] double RadiusRatio, 
                        [out, retval] IAcadEllipse** pEllipse);
        [id(0x00000614), helpstring("Creates a 3D solid elliptical cone object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddEllipticalCone(
                        [in] VARIANT Center, 
                        [in] double MajorRadius, 
                        [in] double MinorRadius, 
                        [in] double Height, 
                        [out, retval] IAcad3DSolid** pEllipCone);
        [id(0x00000615), helpstring("Creates a 3D solid elliptical cylinder object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddEllipticalCylinder(
                        [in] VARIANT Center, 
                        [in] double MajorRadius, 
                        [in] double MinorRadius, 
                        [in] double Height, 
                        [out, retval] IAcad3DSolid** pEllipCyl);
        [id(0x00000616), helpstring("Creates an extruded solid object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddExtrudedSolid(
                        [in] IAcadRegion* Profile, 
                        [in] double Height, 
                        [in] double TaperAngle, 
                        [out, retval] IAcad3DSolid** pExtrSolid);
        [id(0x00000617), helpstring("Creates an extruded solid object along a path and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddExtrudedSolidAlongPath(
                        [in] IAcadRegion* Profile, 
                        [in] IDispatch* Path, 
                        [out, retval] IAcad3DSolid** pExtrSolid);
        [id(0x00000618), helpstring("Creates a Leader object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddLeader(
                        [in] VARIANT PointsArray, 
                        [in] IAcadEntity* Annotation, 
                        [in] AcLeaderType Type, 
                        [out, retval] IAcadLeader** pLeader);
        [id(0x00000619), helpstring("Creates an Multiline Text object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddMText(
                        [in] VARIANT InsertionPoint, 
                        [in] double Width, 
                        [in] BSTR Text, 
                        [out, retval] IAcadMText** pMtext);
        [id(0x0000061a), helpstring("Creates a Point object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddPoint(
                        [in] VARIANT Point, 
                        [out, retval] IAcadPoint** pPoint);
        [id(0x0000061b), helpstring("Creates a Lightweight Polyline object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddLightWeightPolyline(
                        [in] VARIANT VerticesList, 
                        [out, retval] IAcadLWPolyline** pLWPolyline);
        [id(0x0000061c), helpstring("Creates a Polyline object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddPolyline(
                        [in] VARIANT VerticesList, 
                        [out, retval] IAcadPolyline** pPolyline);
        [id(0x0000061d), helpstring("Creates a Ray object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddRay(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [out, retval] IAcadRay** pRay);
        [id(0x0000061e), helpstring("Creates a Region object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddRegion(
                        [in] VARIANT ObjectList, 
                        [out, retval] VARIANT* pRegions);
        [id(0x0000061f), helpstring("Creates a revolved solid object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddRevolvedSolid(
                        [in] IAcadRegion* Profile, 
                        [in] VARIANT AxisPoint, 
                        [in] VARIANT AxisDir, 
                        [in] double Angle, 
                        [out, retval] IAcad3DSolid** pRevolSolid);
        [id(0x00000620), helpstring("Creates a Shape object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddShape(
                        [in] BSTR Name, 
                        [in] VARIANT InsertionPoint, 
                        [in] double ScaleFactor, 
                        [in] double RotationAngle, 
                        [out, retval] IAcadShape** pShape);
        [id(0x00000621), helpstring("Creates a 2D solid polygon object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddSolid(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [in] VARIANT point3, 
                        [in] VARIANT Point4, 
                        [out, retval] IAcadSolid** pSolid);
        [id(0x00000622), helpstring("Creates a Sphere object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddSphere(
                        [in] VARIANT Center, 
                        [in] double Radius, 
                        [out, retval] IAcad3DSolid** pSphere);
        [id(0x00000623), helpstring("Creates a Spline object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddSpline(
                        [in] VARIANT PointsArray, 
                        [in] VARIANT StartTangent, 
                        [in] VARIANT EndTangent, 
                        [out, retval] IAcadSpline** pSpline);
        [id(0x00000624), helpstring("Creates a Text object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddText(
                        [in] BSTR TextString, 
                        [in] VARIANT InsertionPoint, 
                        [in] double Height, 
                        [out, retval] IAcadText** pText);
        [id(0x00000625), helpstring("Creates a Tolerance object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddTolerance(
                        [in] BSTR Text, 
                        [in] VARIANT InsertionPoint, 
                        [in] VARIANT Direction, 
                        [out, retval] IAcadTolerance** pTolerance);
        [id(0x00000626), helpstring("Creates a Torus object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddTorus(
                        [in] VARIANT Center, 
                        [in] double TorusRadius, 
                        [in] double TubeRadius, 
                        [out, retval] IAcad3DSolid** pTorus);
        [id(0x00000627), helpstring("Creates a Trace object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddTrace(
                        [in] VARIANT PointsArray, 
                        [out, retval] IAcadTrace** pTrace);
        [id(0x00000628), helpstring("Creates a Wedge object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddWedge(
                        [in] VARIANT Center, 
                        [in] double Length, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] IAcad3DSolid** pWedge);
        [id(0x00000629), helpstring("Creates an XLine object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddXline(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [out, retval] IAcadXline** pXline);
        [id(0x0000062a), helpstring("Inserts a drawing or named block to modelspace, paperspace, or a block.")]
        HRESULT InsertBlock(
                        [in] VARIANT InsertionPoint, 
                        [in] BSTR Name, 
                        [in] double Xscale, 
                        [in] double Yscale, 
                        [in] double Zscale, 
                        [in] double Rotation, 
                        [in, optional] VARIANT Password, 
                        [out, retval] IAcadBlockReference** pBlkRef);
        [id(0x0000062b), helpstring("Creates a Hatch object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddHatch(
                        [in] int PatternType, 
                        [in] BSTR PatternName, 
                        [in] VARIANT_BOOL Associativity, 
                        [in, optional] VARIANT HatchObjectType, 
                        [out, retval] IAcadHatch** pHatch);
        [id(0x0000062c), helpstring("Adds a raster image as a Raster object to modelspace, paperspace, or a block.")]
        HRESULT AddRaster(
                        [in] BSTR imageFileName, 
                        [in] VARIANT InsertionPoint, 
                        [in] double ScaleFactor, 
                        [in] double RotationAngle, 
                        [out, retval] IAcadRasterImage** pRaster);
        [id(0x0000062d), helpstring("Creates a Line object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddLine(
                        [in] VARIANT StartPoint, 
                        [in] VARIANT EndPoint, 
                        [out, retval] IAcadLine** pLine);
        [id(0x0000062e), propget, helpstring("Returns whether a specified block is a layout block.")]
        HRESULT IsLayout([out, retval] VARIANT_BOOL* bIsLayout);
        [id(0x0000062f), propget, helpstring("Returns the layout associated with the specified block.")]
        HRESULT Layout([out, retval] IAcadLayout** pLayout);
        [id(0x00000630), propget, helpstring("Returns whether a specified block is an external reference block.")]
        HRESULT IsXRef([out, retval] VARIANT_BOOL* pIsXRref);
        [id(0x00000631), helpstring("Adds an array of blocks to modelspace, paperspace, or a block.")]
        HRESULT AddMInsertBlock(
                        [in] VARIANT InsertionPoint, 
                        [in] BSTR Name, 
                        [in] double Xscale, 
                        [in] double Yscale, 
                        [in] double Zscale, 
                        [in] double Rotation, 
                        [in] long NumRows, 
                        [in] long NumColumns, 
                        [in] long RowSpacing, 
                        [in] long ColumnSpacing, 
                        [in, optional] VARIANT Password, 
                        [out, retval] IAcadMInsertBlock** pMInsertBlk);
        [id(0x00000632), helpstring("Creates a Polyface Mesh object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddPolyfaceMesh(
                        [in] VARIANT VertexList, 
                        [in] VARIANT FaceList, 
                        [out, retval] IAcadPolyfaceMesh** pPFMesh);
        [id(0x00000633), helpstring("Creates a Multiline object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddMLine(
                        [in] VARIANT VertexList, 
                        [out, retval] IAcadMLine** pMLine);
        [id(0x00000634), helpstring("Creates a 3-point angular dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDim3PointAngular(
                        [in] VARIANT AngleVertex, 
                        [in] VARIANT FirstEndPoint, 
                        [in] VARIANT SecondEndPoint, 
                        [in] VARIANT TextPoint, 
                        [out, retval] IAcadDim3PointAngular** pDim);
        [id(0x00000635), propget, helpstring("Returns the Database object.")]
        HRESULT XRefDatabase([out, retval] IAcadDatabase** pDatabase);
        [id(0x00000636), helpstring("Attaches an external reference to a drawing.")]
        HRESULT AttachExternalReference(
                        [in] BSTR PathName, 
                        [in] BSTR Name, 
                        [in] VARIANT InsertionPoint, 
                        [in] double Xscale, 
                        [in] double Yscale, 
                        [in] double Zscale, 
                        [in] double Rotation, 
                        [in] VARIANT_BOOL bOverlay, 
                        [in, optional] VARIANT Password, 
                        [out, retval] IAcadExternalReference** pXRef);
        [id(0x00000637), helpstring("Unloads an external reference from a drawing.")]
        HRESULT Unload();
        [id(0x00000638), helpstring("Reloads an external reference to a drawing.")]
        HRESULT Reload();
        [id(0x00000639), helpstring("Binds an external reference to a drawing.")]
        HRESULT Bind([in] VARIANT_BOOL bPrefixName);
        [id(0x0000063a), helpstring("Detachs an external reference from a drawing.")]
        HRESULT Detach();
        [id(0x0000063b), helpstring("Creates a Table object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddTable(
                        [in] VARIANT InsertionPoint, 
                        [in] int NumRows, 
                        [in] int NumColumns, 
                        [in] double RowHeight, 
                        [in] double ColWidth, 
                        [out, retval] IAcadTable** pTable);
        [id(0x0000063c), propget, helpstring("Specifies or returns the path of an external reference.")]
        HRESULT Path([out, retval] BSTR* bstrName);
        [id(0x0000063c), propput, helpstring("Specifies or returns the path of an external reference.")]
        HRESULT Path([in] BSTR bstrName);
        [id(0x0000063d), propget, helpstring("Specifies or returns the comments of a block.")]
        HRESULT Comments([out, retval] BSTR* bstrName);
        [id(0x0000063d), propput, helpstring("Specifies or returns the comments of a block.")]
        HRESULT Comments([in] BSTR bstrName);
        [id(0x0000063e), propget, helpstring("Specifies or returns the units of measure for a block.")]
        HRESULT Units([out, retval] AcInsertUnits* pIU);
        [id(0x0000063e), propput, helpstring("Specifies or returns the units of measure for a block.")]
        HRESULT Units([in] AcInsertUnits pIU);
        [id(0x0000063f), propget, helpstring("Specifies or returns whether a block can be exploded.")]
        HRESULT Explodable([out, retval] VARIANT_BOOL* bExplodable);
        [id(0x0000063f), propput, helpstring("Specifies or returns whether a block can be exploded.")]
        HRESULT Explodable([in] VARIANT_BOOL bExplodable);
        [id(0x00000640), propget, helpstring("Specifies or returns whether a block can be scaled.")]
        HRESULT BlockScaling([out, retval] AcBlockScaling* pBS);
        [id(0x00000640), propput, helpstring("Specifies or returns whether a block can be scaled.")]
        HRESULT BlockScaling([in] AcBlockScaling pBS);
        [id(0x00000641), propget, helpstring("Returns whether the block is a dynamic block.")]
        HRESULT IsDynamicBlock([out, retval] VARIANT_BOOL* pDynamicBlock);
        [id(0x00000642), helpstring("Creates an arc length dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDimArc(
                        [in] VARIANT ArcCenter, 
                        [in] VARIANT FirstEndPoint, 
                        [in] VARIANT SecondEndPoint, 
                        [in] VARIANT ArcPoint, 
                        [out, retval] IAcadDimArcLength** pDim);
        [id(0x00000643), helpstring("Creates a jogged radial dimension object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddDimRadialLarge(
                        [in] VARIANT Center, 
                        [in] VARIANT ChordPoint, 
                        [in] VARIANT OverrideCenter, 
                        [in] VARIANT JogPoint, 
                        [in] double JogAngle, 
                        [out, retval] IAcadDimRadialLarge** pDim);
        [id(0x00000644), helpstring("Creates a Section object and adds it to modelspace, paperspace, or a block.")]
        HRESULT AddSection(
                        [in] VARIANT FromPoint, 
                        [in] VARIANT ToPoint, 
                        [in] VARIANT planeVector, 
                        [out, retval] IAcadSection** ppSecPlane);
        [id(0x00000645), helpstring("Creates a multileader")]
        HRESULT AddMLeader(
                        [in] VARIANT PointsArray, 
                        [out] int* leaderLineIndex, 
                        [out, retval] IAcadMLeader** pMLeader);
        [id(0x00000700), helpstring("Embed raster as an OLE item.")]
        HRESULT AddEmbeddedRaster(
                        [in] BSTR ImagePath, 
                        [in] VARIANT InsertionPoint, 
                        [in] double Height, 
                        [in] double Width, 
                        [out, retval] IAcadOle** __MIDL__IAcadBlock0000);
    };

    [
      odl,
      uuid(5C0548E8-75CD-4F22-AA54-61BA3D8C7E8D),
      helpstring("The standard interface for a basic TeighaX entity"),
      dual,
      oleautomation
    ]
    interface IAcadEntity : IAcadObject {
        [id(0x00000516), propget, helpstring("Specifies or returns the true color of an object.")]
        HRESULT TrueColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x00000516), propput, helpstring("Specifies or returns the true color of an object.")]
        HRESULT TrueColor([in] IAcadAcCmColor* pColor);
        [id(0x00000501), propget, helpstring("Specifies or returns the current layer of an object.")]
        HRESULT Layer([out, retval] BSTR* Layer);
        [id(0x00000501), propput, helpstring("Specifies or returns the current layer of an object.")]
        HRESULT Layer([in] BSTR Layer);
        [id(0x00000502), propget, helpstring("Specifies or returns the current linetype of an object.")]
        HRESULT Linetype([out, retval] BSTR* Linetype);
        [id(0x00000502), propput, helpstring("Specifies or returns the current linetype of an object.")]
        HRESULT Linetype([in] BSTR Linetype);
        [id(0x00000503), propget, helpstring("Specifies or returns the linetype scale factor of an object.")]
        HRESULT LinetypeScale([out, retval] ACAD_NOUNITS* ltScale);
        [id(0x00000503), propput, helpstring("Specifies or returns the linetype scale factor of an object.")]
        HRESULT LinetypeScale([in] ACAD_NOUNITS ltScale);
        [id(0x00000504), propget, helpstring("Specifies or returns the visibility of an object or the application.")]
        HRESULT Visible([out, retval] VARIANT_BOOL* bVisible);
        [id(0x00000504), propput, helpstring("Specifies or returns the visibility of an object or the application.")]
        HRESULT Visible([in] VARIANT_BOOL bVisible);
        [id(0x00000505), helpstring("Not implemented. Creates an array of selected objects in a polar pattern.")]
        HRESULT ArrayPolar(
                        [in] int NumberOfObjects, 
                        [in] double AngleToFill, 
                        [in] VARIANT CenterPoint, 
                        [out, retval] VARIANT* pArrayObjs);
        [id(0x00000506), helpstring("Not implemented. Creates an array of selected objects in a rectangular pattern.")]
        HRESULT ArrayRectangular(
                        [in] int NumberOfRows, 
                        [in] int NumberOfColumns, 
                        [in] int NumberOfLevels, 
                        [in] double DistBetweenRows, 
                        [in] double DistBetweenCols, 
                        [in] double DistBetweenLevels, 
                        [out, retval] VARIANT* pArrayObjs);
        [id(0x00000507), helpstring("Not implemented. Highlights or removes highlight from an entity.")]
        HRESULT Highlight([in] VARIANT_BOOL HighlightFlag);
        [id(0x00000508), helpstring("Copies a specified entity.")]
        HRESULT Copy([out, retval] IDispatch** pCopyObj);
        [id(0x00000509), helpstring("Moves an entity from one point to a second point.")]
        HRESULT Move(
                        [in] VARIANT FromPoint, 
                        [in] VARIANT ToPoint);
        [id(0x0000050a), helpstring("Rotates an entity around a point.")]
        HRESULT Rotate(
                        [in] VARIANT BasePoint, 
                        [in] double RotationAngle);
        [id(0x0000050b), helpstring("Rotates an entity around a line defined by two points, where the direction of the axis if from the first point to the second point.")]
        HRESULT Rotate3D(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [in] double RotationAngle);
        [id(0x0000050c), helpstring("Not implemented. Mirrors an object around a line defined by two points.")]
        HRESULT Mirror(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [out, retval] IDispatch** pMirrorObj);
        [id(0x0000050d), helpstring("Not implemented. Mirrors an object around a plane defined by three points.")]
        HRESULT Mirror3D(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [in] VARIANT point3, 
                        [out, retval] IDispatch** pMirrorObj);
        [id(0x0000050e), helpstring("Scales an object with respect to a base point and scale factor.")]
        HRESULT ScaleEntity(
                        [in] VARIANT BasePoint, 
                        [in] double ScaleFactor);
        [id(0x0000050f), helpstring("Performs the specified transformation on an entity.")]
        HRESULT TransformBy([in] VARIANT TransformationMatrix);
        [id(0x00000510), helpstring("Not implemented. Updates the display of an entity.")]
        HRESULT Update();
        [id(0x00000511), helpstring("Returns the minimum and maximum point of an entity's bounding box.")]
        HRESULT GetBoundingBox(
                        [out] VARIANT* MinPoint, 
                        [out] VARIANT* MaxPoint);
        [id(0x00000512), helpstring("Returns coordinates of intersections with the (input) IntersectObject.")]
        HRESULT IntersectWith(
                        [in] IDispatch* IntersectObject, 
                        [in] AcExtendOption option, 
                        [out, retval] VARIANT* intPoints);
        [id(0x00000513), propget, helpstring("Specifies or returns the plot style name of an object.")]
        HRESULT PlotStyleName([out, retval] BSTR* plotStyle);
        [id(0x00000513), propput, helpstring("Specifies or returns the plot style name of an object.")]
        HRESULT PlotStyleName([in] BSTR plotStyle);
        [id(0x00000514), propget, helpstring("Specifies or returns the lineweight of an object.")]
        HRESULT Lineweight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000514), propput, helpstring("Specifies or returns the lineweight of an object.")]
        HRESULT Lineweight([in] ACAD_LWEIGHT Lineweight);
        [id(0x00000515), propget, helpstring("Assigns a hyperlink to an object and displays the hyperlink name and description (if one is specified).")]
        HRESULT Hyperlinks([out, retval] IAcadHyperlinks** Hyperlinks);
        [id(0x00000577), propget, helpstring("Specifies or returns the material of an object.")]
        HRESULT Material([out, retval] BSTR* Material);
        [id(0x00000577), propput, helpstring("Specifies or returns the material of an object.")]
        HRESULT Material([in] BSTR Material);
        [id(0x00000575), propget, hidden, helpstring("Returns the class name of the object.")]
        HRESULT EntityName([out, retval] BSTR* EntityName);
        [id(0x00000576), propget, hidden, helpstring("Returns the entity type of the object as an integer.")]
        HRESULT EntityType([out, retval] long* entType);
        [id(0x00000500), propget, hidden, helpstring("Specifies the color for objects")]
        HRESULT color([out, retval] ACAD_COLOR* color);
        [id(0x00000500), propput, hidden, helpstring("Specifies the color for objects")]
        HRESULT color([in] ACAD_COLOR color);
    };

    [
      odl,
      uuid(486689F1-1B6F-40BC-8A6F-6327DBC23DEC),
      helpstring("An interface for a TeighaX true color object"),
      dual,
      oleautomation
    ]
    interface IAcadAcCmColor : IDispatch {
        [id(0x00000001), propput, helpstring("Specifies or returns the AcCmEntityColor of a true color.")]
        HRESULT EntityColor([in] long eColor);
        [id(0x00000001), propget, helpstring("Specifies or returns the AcCmEntityColor of a true color.")]
        HRESULT EntityColor([out, retval] long* eColor);
        [id(0x00000002), propget, helpstring("Returns the name of a color.")]
        HRESULT ColorName([out, retval] BSTR* Name);
        [id(0x00000003), propget, helpstring("Returns the book name of a color.")]
        HRESULT BookName([out, retval] BSTR* Name);
        [id(0x00000004), helpstring("Specifies the color name and book name of a color.")]
        HRESULT SetNames(
                        [in] BSTR ColorName, 
                        [in] BSTR BookName);
        [id(0x00000005), helpstring("Deletes a true color.")]
        HRESULT Delete();
        [id(0x00000006), propget, helpstring("Returns the red component of a true color.")]
        HRESULT Red([out, retval] long* Red);
        [id(0x00000007), propget, helpstring("Returns the blue component of a true color.")]
        HRESULT Blue([out, retval] long* Blue);
        [id(0x00000008), propget, helpstring("Returns the green component of a true color.")]
        HRESULT Green([out, retval] long* Green);
        [id(0x00000009), helpstring("Specifies the RGB values of a true color.")]
        HRESULT SetRGB(
                        [in] long Red, 
                        [in] long Green, 
                        [in] long Blue);
        [id(0x00000010), propput, helpstring("Specifies or returns the color method.")]
        HRESULT ColorMethod([in] AcColorMethod Flags);
        [id(0x00000010), propget, helpstring("Specifies or returns the color method.")]
        HRESULT ColorMethod([out, retval] AcColorMethod* Flags);
        [id(0x00000011), propget, helpstring("Specifies or returns the color index of an object.")]
        HRESULT ColorIndex([out, retval] AcColor* color);
        [id(0x00000011), propput, helpstring("Specifies or returns the color index of an object.")]
        HRESULT ColorIndex([in] AcColor color);
        [id(0x00000012), helpstring("Sets the color to a color from a color book.")]
        HRESULT SetColorBookColor(
                        [in] BSTR BookName, 
                        [in] BSTR ColorName);
    };

    
    
        
        
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
    

    typedef [uuid(05727F01-1A93-44A8-8C88-571230D956E6), public]
    double ACAD_NOUNITS;

    
    
        
        
        
        
    

    typedef [uuid(FCF2E2D6-9D8D-4A15-AE7B-D84FE012974E), public]
    AcLineWeight ACAD_LWEIGHT;

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    [
      odl,
      uuid(7361CAC4-E2A0-44E7-AEF0-F2D3FE1F70CE),
      helpstring("TeighaX Interface for the collection of all hyperlinks for a given entity"),
      dual,
      oleautomation
    ]
    interface IAcadHyperlinks : IDispatch {
        [id(00000000), helpstring("Returns an object at a given index in a collection.")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IAcadHyperlink** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection.")]
        HRESULT Count([out, retval] long* pVal);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), propget, helpstring("Returns the Application object.")]
        HRESULT Application([out, retval] IDispatch** ApplicationObject);
        [id(0x00000003), helpstring("Creates an object and adds it to the collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT Description, 
                        [in, optional] VARIANT NamedLocation, 
                        [out, retval] IAcadHyperlink** pHyperlink);
    };

    [
      odl,
      uuid(4713F8D1-08BF-4AD0-A2E7-0E60B9C27286),
      helpstring("TeighaX Interface of a URL and URL description"),
      dual,
      oleautomation
    ]
    interface IAcadHyperlink : IDispatch {
        [id(0x00000001), propput, helpstring("Specifies or returns a link to an external file.")]
        HRESULT URL([in] BSTR URLPath);
        [id(0x00000001), propget, helpstring("Specifies or returns a link to an external file.")]
        HRESULT URL([out, retval] BSTR* URLPath);
        [id(0x00000002), propput, helpstring("Specifies or returns a text description of the URL.")]
        HRESULT URLDescription([in] BSTR Description);
        [id(0x00000002), propget, helpstring("Specifies or returns a text description of the URL.")]
        HRESULT URLDescription([out, retval] BSTR* Description);
        [id(0x00000003), propget, helpstring("Returns the Application object.")]
        HRESULT Application([out, retval] IDispatch** ApplicationObject);
        [id(0x00000004), helpstring("Deletes a specified object.")]
        HRESULT Delete();
        [id(0x00000005), propput, helpstring("Specifies or returns the named location within a file that is referenced by a URL.")]
        HRESULT URLNamedLocation([in] BSTR Location);
        [id(0x00000005), propget, helpstring("Specifies or returns the named location within a file that is referenced by a URL.")]
        HRESULT URLNamedLocation([out, retval] BSTR* Location);
    };

    typedef [uuid(0CDE08FD-99B5-4091-BE6F-2C68DCA2FA54), public]
    AcColor ACAD_COLOR;

    [
      odl,
      uuid(84E27613-7667-499D-AAF1-C3F0F9C2DF84),
      helpstring("TeighaX Interface of a 3D triangle or quadrilateral plane section"),
      dual,
      oleautomation
    ]
    interface IAcad3DFace : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies the current vertex of a 3DFace object.")]
        HRESULT Coordinates([out, retval] VARIANT* corners);
        [id(0x00000001), propput, helpstring("Specifies the current vertex of a 3DFace object.")]
        HRESULT Coordinates([in] VARIANT corners);
        [id(0x00000002), propget, helpstring("Specifies or returns whether edge 1 of a 3DFace is visible or hidden.")]
        HRESULT VisibilityEdge1([out, retval] VARIANT_BOOL* visibility);
        [id(0x00000002), propput, helpstring("Specifies or returns whether edge 1 of a 3DFace is visible or hidden.")]
        HRESULT VisibilityEdge1([in] VARIANT_BOOL visibility);
        [id(0x00000003), propget, helpstring("Specifies or returns whether edge 2 of a 3DFace is visible or hidden.")]
        HRESULT VisibilityEdge2([out, retval] VARIANT_BOOL* visibility);
        [id(0x00000003), propput, helpstring("Specifies or returns whether edge 2 of a 3DFace is visible or hidden.")]
        HRESULT VisibilityEdge2([in] VARIANT_BOOL visibility);
        [id(0x00000004), propget, helpstring("Specifies or returns whether edge 3 of a 3DFace is visible or hidden.")]
        HRESULT VisibilityEdge3([out, retval] VARIANT_BOOL* visibility);
        [id(0x00000004), propput, helpstring("Specifies or returns whether edge 3 of a 3DFace is visible or hidden.")]
        HRESULT VisibilityEdge3([in] VARIANT_BOOL visibility);
        [id(0x00000005), propget, helpstring("Specifies or returns whether edge 4 of a 3DFace is visible or hidden.")]
        HRESULT VisibilityEdge4([out, retval] VARIANT_BOOL* visibility);
        [id(0x00000005), propput, helpstring("Specifies or returns whether edge 4 of a 3DFace is visible or hidden.")]
        HRESULT VisibilityEdge4([in] VARIANT_BOOL visibility);
        [id(0x00000006), helpstring("Returns the visibility status of a 3DFace edge.")]
        HRESULT GetInvisibleEdge(
                        [in] int Index, 
                        [out, retval] VARIANT_BOOL* bVisible);
        [id(0x00000007), helpstring("Specifies the visibility status of a 3DFace edge.")]
        HRESULT SetInvisibleEdge(
                        [in] int Index, 
                        [in] VARIANT_BOOL State);
        [id(0x00000008), propget, helpstring("Specifies the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000008), propput, helpstring("Specifies the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
    };

    [
      odl,
      uuid(BC86D261-9293-4386-A8F9-056467DF24D5),
      helpstring("TeighaX Interface of a free-form 3D mesh entity"),
      dual,
      oleautomation
    ]
    interface IAcadPolygonMesh : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the coordinates of a polygon mesh.")]
        HRESULT Coordinates([out, retval] VARIANT* Coordinates);
        [id(0x00000001), propput, helpstring("Specifies or returns the coordinates of a polygon mesh.")]
        HRESULT Coordinates([in] VARIANT Coordinates);
        [id(0x00000002), propget, helpstring("Specifies or returns whether the mesh is open or closed in the M direction.")]
        HRESULT MClose([out, retval] VARIANT_BOOL* bClose);
        [id(0x00000002), propput, helpstring("Specifies or returns whether the mesh is open or closed in the M direction.")]
        HRESULT MClose([in] VARIANT_BOOL bClose);
        [id(0x00000003), propget, helpstring("Specifies or returns whether the mesh is open or closed in the N direction.")]
        HRESULT NClose([out, retval] VARIANT_BOOL* bClose);
        [id(0x00000003), propput, helpstring("Specifies or returns whether the mesh is open or closed in the N direction.")]
        HRESULT NClose([in] VARIANT_BOOL bClose);
        [id(0x00000004), propget, helpstring("Specifies or returns the density of a polygon mesh in the M direction.")]
        HRESULT MDensity([out, retval] long* density);
        [id(0x00000004), propput, helpstring("Specifies or returns the density of a polygon mesh in the M direction.")]
        HRESULT MDensity([in] long density);
        [id(0x00000005), propget, helpstring("Specifies or returns the density of a polygon mesh in the N direction")]
        HRESULT NDensity([out, retval] long* density);
        [id(0x00000005), propput, helpstring("Specifies or returns the density of a polygon mesh in the N direction")]
        HRESULT NDensity([in] long density);
        [id(0x00000006), propget, helpstring("Returns the number of verticies in the M direction of a polygon mesh.")]
        HRESULT MVertexCount([out, retval] long* Count);
        [id(0x00000007), propget, helpstring("Returns the number of verticies in the N direction of a polygon mesh.")]
        HRESULT NVertexCount([out, retval] long* Count);
        [id(0x00000008), propget, helpstring("Specifies or returns the type of a polygon mesh.")]
        HRESULT Type([out, retval] AcPolymeshType* Type);
        [id(0x00000008), propput, helpstring("Specifies or returns the type of a polygon mesh.")]
        HRESULT Type([in] AcPolymeshType Type);
        [id(0x00000009), helpstring("Appends a new vertex to a polygon mesh.")]
        HRESULT AppendVertex([in] VARIANT vertex);
        [id(0x0000000a), helpstring("Explodes the polygon mesh and returns the individual entities as an array of the object.")]
        HRESULT Explode([out, retval] VARIANT* pArrayObjs);
        [id(0x0000000b), propget, helpstring("Specifies or returns the coordinate of a single vertex in a polygon mesh.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000b), propput, helpstring("Specifies or returns the coordinate of a single vertex in a polygon mesh.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
    };

    
    
        
        
        
        
    

    [
      odl,
      uuid(578BF875-6F54-42C0-9867-1CEACDEA42DB),
      helpstring("TeighaX Interface of a 3D polyline of straight line segments entity"),
      dual,
      oleautomation
    ]
    interface IAcad3DPolyline : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the current vertex of a 3D polyline.")]
        HRESULT Coordinates([out, retval] VARIANT* Coordinates);
        [id(0x00000001), propput, helpstring("Specifies or returns the current vertex of a 3D polyline.")]
        HRESULT Coordinates([in] VARIANT Coordinates);
        [id(0x00000002), helpstring("Appends a vertex to a 3D polyline.")]
        HRESULT AppendVertex([in] VARIANT vertex);
        [id(0x00000003), helpstring("Explodes a 3D polyline.")]
        HRESULT Explode([out, retval] VARIANT* pArrayObjs);
        [id(0x00000004), propget, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000004), propput, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
        [id(0x00000005), propget, helpstring("Specifies or returns the type of line or surface curve fitting.")]
        HRESULT Type([out, retval] Ac3DPolylineType* Type);
        [id(0x00000005), propput, helpstring("Specifies or returns the type of line or surface curve fitting.")]
        HRESULT Type([in] Ac3DPolylineType Type);
        [id(0x00000006), propget, helpstring("Specifies or returns whether a 3D polyline is open or closed.")]
        HRESULT Closed([out, retval] VARIANT_BOOL* fClose);
        [id(0x00000006), propput, helpstring("Specifies or returns whether a 3D polyline is open or closed.")]
        HRESULT Closed([in] VARIANT_BOOL fClose);
        [id(0x00000007), propget, helpstring("Returns the length of a 3D polyline.")]
        HRESULT Length([out, retval] double* Length);
    };

    
    
        
        
        
    

    [
      odl,
      uuid(BE246810-2926-4AE4-BFE8-30278289184E),
      helpstring("TeighaX Interface of a circular arc entity"),
      dual,
      oleautomation
    ]
    interface IAcadArc : IAcadEntity {
        [id(0x00000001), propget, helpstring("Returns the x, y, and z coordinates of an arc's start point.")]
        HRESULT StartPoint([out, retval] VARIANT* StartPoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the x, y, and z coordinates of an arc's center point.")]
        HRESULT Center([out, retval] VARIANT* CenterPoint);
        [id(0x00000002), propput, helpstring("Specifies or returns the x, y, and z coordinates of an arc's center point.")]
        HRESULT Center([in] VARIANT CenterPoint);
        [id(0x00000003), propget, helpstring("Returns the x, y, and z coordinates of an arc's end point.")]
        HRESULT EndPoint([out, retval] VARIANT* EndPoint);
        [id(0x00000004), propget, helpstring("Specifies or returns the radius of an arc.")]
        HRESULT Radius([out, retval] double* Radius);
        [id(0x00000004), propput, helpstring("Specifies or returns the radius of an arc.")]
        HRESULT Radius([in] double Radius);
        [id(0x00000005), propget, helpstring("Specifies or returns the start angle of an arc.")]
        HRESULT StartAngle([out, retval] ACAD_ANGLE* Angle);
        [id(0x00000005), propput, helpstring("Specifies or returns the start angle of an arc.")]
        HRESULT StartAngle([in] ACAD_ANGLE Angle);
        [id(0x00000006), propget, helpstring("Specifies or returns the end angle of an arc.")]
        HRESULT EndAngle([out, retval] ACAD_ANGLE* Angle);
        [id(0x00000006), propput, helpstring("Specifies or returns the end angle of an arc.")]
        HRESULT EndAngle([in] ACAD_ANGLE Angle);
        [id(0x00000007), propget, helpstring("Returns the total angle of an arc.")]
        HRESULT TotalAngle([out, retval] ACAD_ANGLE* TotalAngle);
        [id(0x00000008), propget, helpstring("Returns the length of an arc.")]
        HRESULT ArcLength([out, retval] ACAD_DISTANCE* ArcLength);
        [id(0x00000009), propget, helpstring("Specifies or returns the thickness (z-direction value) of an arc.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000009), propput, helpstring("Specifies or returns the thickness (z-direction value) of an arc.")]
        HRESULT Thickness([in] double Thickness);
        [id(0x0000000a), helpstring("Not implemented. Creates a new arc at a specified distance from an original arc.")]
        HRESULT Offset(
                        [in] double Distance, 
                        [out, retval] VARIANT* pOffsetCurves);
        [id(0x0000000b), propget, helpstring("Returns the area of an arc as if it was closed with a line.")]
        HRESULT Area([out, retval] double* Area);
        [id(0x0000000c), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x0000000c), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
    };

    typedef [uuid(3FB408BE-B0FC-44D5-8F28-5646C071C00E), public]
    double ACAD_ANGLE;

    typedef [uuid(C04DCF35-BBF7-4E30-86AF-0FECF305C11B), public]
    double ACAD_DISTANCE;

    
    
        
        
        
        
        
        
        
    

    [
      odl,
      uuid(3C4DB784-0BD2-4CDD-8E49-393A388DB213),
      helpstring("TeighaX Interface of an object appearing as a text string that describes the characteristics of an attribute reference"),
      dual,
      oleautomation
    ]
    interface IAcadAttribute : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the field length of an attribute.")]
        HRESULT FieldLength([out, retval] long* fieldLen);
        [id(0x00000001), propput, helpstring("Specifies or returns the field length of an attribute.")]
        HRESULT FieldLength([in] long fieldLen);
        [id(0x00000002), propget, helpstring("Specifies or returns the tag of an attribute.")]
        HRESULT TagString([out, retval] BSTR* Tag);
        [id(0x00000002), propput, helpstring("Specifies or returns the tag of an attribute.")]
        HRESULT TagString([in] BSTR Tag);
        [id(0x00000003), propget, helpstring("Specifies or returns the prompt string of an attribute.")]
        HRESULT PromptString([out, retval] BSTR* bstrPrompt);
        [id(0x00000003), propput, helpstring("Specifies or returns the prompt string of an attribute.")]
        HRESULT PromptString([in] BSTR bstrPrompt);
        [id(0x00000004), propget, helpstring("Specifies or returns the text that displays for an attribute.")]
        HRESULT TextString([out, retval] BSTR* bstrText);
        [id(0x00000004), propput, helpstring("Specifies or returns the text that displays for an attribute.")]
        HRESULT TextString([in] BSTR bstrText);
        [id(0x00000005), propget, helpstring("Specifies or returns the text style of an attribute.")]
        HRESULT StyleName([out, retval] BSTR* Name);
        [id(0x00000005), propput, helpstring("Specifies or returns the text style of an attribute.")]
        HRESULT StyleName([in] BSTR Name);
        [id(0x00000006), propget, helpstring("Specifies or returns the horizontal and vertical alignment of the attribute text.")]
        HRESULT Alignment([out, retval] AcAlignment* align);
        [id(0x00000006), propput, helpstring("Specifies or returns the horizontal and vertical alignment of the attribute text.")]
        HRESULT Alignment([in] AcAlignment align);
        [id(0x00000007), propget, hidden, helpstring("Specifies or returns the horizontal alignment of an attribute.")]
        HRESULT HorizontalAlignment([out, retval] AcHorizontalAlignment* horizAlign);
        [id(0x00000007), propput, hidden, helpstring("Specifies or returns the horizontal alignment of an attribute.")]
        HRESULT HorizontalAlignment([in] AcHorizontalAlignment horizAlign);
        [id(0x00000008), propget, hidden, helpstring("Specifies or returns the vertical alignment of an attribute.")]
        HRESULT VerticalAlignment([out, retval] AcVerticalAlignment* vertiAlign);
        [id(0x00000008), propput, hidden, helpstring("Specifies or returns the vertical alignment of an attribute.")]
        HRESULT VerticalAlignment([in] AcVerticalAlignment vertiAlign);
        [id(0x00000009), propget, helpstring("Specifies or returns the height of an attribute.")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000009), propput, helpstring("Specifies or returns the height of an attribute.")]
        HRESULT Height([in] double Height);
        [id(0x0000000a), propget, helpstring("Specifies or returns the rotation angle of an attribute.")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x0000000a), propput, helpstring("Specifies or returns the rotation angle of an attribute.")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x0000000b), propget, helpstring("Specifies or returns the scale factor of an attribute.")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* scalFactor);
        [id(0x0000000b), propput, helpstring("Specifies or returns the scale factor of an attribute.")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS scalFactor);
        [id(0x0000000c), propget, helpstring("Specifies or returns the oblique angle of an attribute.")]
        HRESULT ObliqueAngle([out, retval] ACAD_ANGLE* obliAngle);
        [id(0x0000000c), propput, helpstring("Specifies or returns the oblique angle of an attribute.")]
        HRESULT ObliqueAngle([in] ACAD_ANGLE obliAngle);
        [id(0x0000000d), propget, helpstring("Specifies or returns the x, y, z alignment point of an attribute.")]
        HRESULT TextAlignmentPoint([out, retval] VARIANT* alignPoint);
        [id(0x0000000d), propput, helpstring("Specifies or returns the x, y, z alignment point of an attribute.")]
        HRESULT TextAlignmentPoint([in] VARIANT alignPoint);
        [id(0x0000000e), propget, helpstring("Specifies or returns the x, y, and z coordinates of the attribute text insertion point.")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x0000000e), propput, helpstring("Specifies or returns the x, y, and z coordinates of the attribute text insertion point.")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x0000000f), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x0000000f), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000010), propget, helpstring("Specifies or returns the text generation flag of an attribute.")]
        HRESULT TextGenerationFlag([out, retval] long* textGenFlag);
        [id(0x00000010), propput, helpstring("Specifies or returns the text generation flag of an attribute.")]
        HRESULT TextGenerationFlag([in] long textGenFlag);
        [id(0x00000011), propget, helpstring("Specifies or returns the thickness (z-direction value) of an attribute.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000011), propput, helpstring("Specifies or returns the thickness (z-direction value) of an attribute.")]
        HRESULT Thickness([in] double Thickness);
        [id(0x00000012), propget, helpstring("Specifies or returns the mode of an attribute.")]
        HRESULT Mode([out, retval] long* Mode);
        [id(0x00000012), propput, helpstring("Specifies or returns the mode of an attribute.")]
        HRESULT Mode([in] long Mode);
        [id(0x00000013), propget, helpstring("Specifies or returns whether the text of an attribute is upside down.")]
        HRESULT UpsideDown([out, retval] VARIANT_BOOL* bUpsideDown);
        [id(0x00000013), propput, helpstring("Specifies or returns whether the text of an attribute is upside down.")]
        HRESULT UpsideDown([in] VARIANT_BOOL bUpsideDown);
        [id(0x00000014), propget, helpstring("Specifies or returns whether the attribute text is backward.")]
        HRESULT Backward([out, retval] VARIANT_BOOL* bBackward);
        [id(0x00000014), propput, helpstring("Specifies or returns whether the attribute text is backward.")]
        HRESULT Backward([in] VARIANT_BOOL bBackward);
        [id(0x00000015), propget, helpstring("Specifies or returns the invisible mode of the attribute.")]
        HRESULT Invisible([out, retval] VARIANT_BOOL* bInvisible);
        [id(0x00000015), propput, helpstring("Specifies or returns the invisible mode of the attribute.")]
        HRESULT Invisible([in] VARIANT_BOOL bInvisible);
        [id(0x00000016), propget, helpstring("Specifies or returns the constant mode of the attribute.")]
        HRESULT Constant([out, retval] VARIANT_BOOL* bConstant);
        [id(0x00000016), propput, helpstring("Specifies or returns the constant mode of the attribute.")]
        HRESULT Constant([in] VARIANT_BOOL bConstant);
        [id(0x00000017), propget, helpstring("Specifies or returns the verify mode of the attribute.")]
        HRESULT Verify([out, retval] VARIANT_BOOL* bVerify);
        [id(0x00000017), propput, helpstring("Specifies or returns the verify mode of the attribute.")]
        HRESULT Verify([in] VARIANT_BOOL bVerify);
        [id(0x00000018), propget, helpstring("Specifies or returns the preset mode of the attribute.")]
        HRESULT Preset([out, retval] VARIANT_BOOL* bPreset);
        [id(0x00000018), propput, helpstring("Specifies or returns the preset mode of the attribute.")]
        HRESULT Preset([in] VARIANT_BOOL bPreset);
        [id(0x00000019), propget, helpstring("Not implemented. Specifies or returns whether an attribute is moved relative to its associated block.")]
        HRESULT LockPosition([out, retval] VARIANT_BOOL* bLockPosition);
        [id(0x00000019), propput, helpstring("Not implemented. Specifies or returns whether an attribute is moved relative to its associated block.")]
        HRESULT LockPosition([in] VARIANT_BOOL bLockPosition);
        [id(0x0000001a), propget, helpstring("Determines whether if the attribute is multiline")]
        HRESULT MTextAttribute([out, retval] VARIANT_BOOL* bMTextAttribute);
        [id(0x0000001a), propput, helpstring("Determines whether if the attribute is multiline")]
        HRESULT MTextAttribute([in] VARIANT_BOOL bMTextAttribute);
        [id(0x0000001b), propget, helpstring("Gets the multiline attribute content")]
        HRESULT MTextAttributeContent([out, retval] BSTR* content);
        [id(0x0000001b), propput, helpstring("Gets the multiline attribute content")]
        HRESULT MTextAttributeContent([in] BSTR content);
        [id(0x0000001c), helpstring("Updates multiline MText")]
        HRESULT UpdateMTextAttribute();
        [id(0x0000001d), propget, helpstring("Gets the width of text boundary of the Mtext")]
        HRESULT MTextBoundaryWidth([out, retval] double* boundaryWidth);
        [id(0x0000001d), propput, helpstring("Gets the width of text boundary of the Mtext")]
        HRESULT MTextBoundaryWidth(double boundaryWidth);
        [id(0x0000001e), propget, helpstring("Gets the drawing direction of the Mtext")]
        HRESULT MTextDrawingDirection([out, retval] AcDrawingDirection* drawDir);
        [id(0x0000001e), propput, helpstring("Gets the drawing direction of the Mtext")]
        HRESULT MTextDrawingDirection([in] AcDrawingDirection drawDir);
    };

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    
    
        
        
        
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
        
        
        
    

    [
      odl,
      uuid(39A7A24C-E946-455C-8AF9-0E2AF761AFD7),
      helpstring("TeighaX Interface of a solid object with free-form surface support"),
      dual,
      oleautomation
    ]
    interface IAcad3DSolid : IAcadEntity {
        [id(0x00000001), propget, helpstring("Not implemented. Returns the center of the area or mass for a 3D solid or region.")]
        HRESULT Centroid([out, retval] VARIANT* Centroid);
        [id(0x00000002), propget, helpstring("Not implemented. Returns the moment of inertia for a 3D solid.")]
        HRESULT MomentOfInertia([out, retval] VARIANT* momentInertia);
        [id(0x00000003), propget, helpstring("Not implemented. Returns the principal directions of a 3D solid or region.")]
        HRESULT PrincipalDirections([out, retval] VARIANT* prinDir);
        [id(0x00000004), propget, helpstring("Not implemented. Returns the principal moments of a 3D solid or region.")]
        HRESULT PrincipalMoments([out, retval] VARIANT* prinMoments);
        [id(0x00000005), propget, helpstring("Not implemented. Returns the product of inertia of a 3D solid or region.")]
        HRESULT ProductOfInertia([out, retval] VARIANT* prodInertia);
        [id(0x00000006), propget, helpstring("Not implemented. Returns the radius of gyration of a 3D solid or region.")]
        HRESULT RadiiOfGyration([out, retval] VARIANT* radiiGyration);
        [id(0x00000007), propget, helpstring("Not implemented. Returns the volume of a 3D solid.")]
        HRESULT Volume([out, retval] double* Volume);
        [id(0x00000008), helpstring("Not implemented. Performs a boolean operation on an object and another 3D solid or region.")]
        HRESULT Boolean(
                        [in] AcBooleanType Operation, 
                        [in] IAcad3DSolid* SolidObject);
        [id(0x00000009), helpstring("Not implemented. Checks the interference between two 3D solids.")]
        HRESULT CheckInterference(
                        [in] IAcad3DSolid* Object, 
                        [in] VARIANT_BOOL CreateInterferenceSolid, 
                        [out, retval] IAcad3DSolid** pIntSolid);
        [id(0x0000000a), helpstring("Not implemented. Creates a section of a 3D solid; the resulting section is a region.")]
        HRESULT SectionSolid(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [in] VARIANT point3, 
                        [out, retval] IAcadRegion** pRegion);
        [id(0x0000000b), helpstring("Not implemented. Creates a slice of a 3D solid; the resulting slice is an array of the 3D solid.")]
        HRESULT SliceSolid(
                        [in] VARIANT Point1, 
                        [in] VARIANT Point2, 
                        [in] VARIANT point3, 
                        [in] VARIANT_BOOL Negative, 
                        [out, retval] IAcad3DSolid** pNegSideSolid);
        [id(0x0000000c), propget, helpstring("Not implemented. Returns the type of 3D solid.")]
        HRESULT SolidType([out, retval] BSTR* SolidType);
        [id(0x0000000d), propget, helpstring("Not implemented. Specifies or returns the center of a 3D solid.")]
        HRESULT Position([out, retval] VARIANT* Position);
        [id(0x0000000d), propput, helpstring("Not implemented. Specifies or returns the center of a 3D solid.")]
        HRESULT Position([in] VARIANT Position);
        [id(0x0000000e), propget, helpstring("Not implemented. Specifies or returns whether history is saved for a 3D solid.")]
        HRESULT History([out, retval] VARIANT_BOOL* bHistory);
        [id(0x0000000e), propput, helpstring("Not implemented. Specifies or returns whether history is saved for a 3D solid.")]
        HRESULT History([in] VARIANT_BOOL bHistory);
        [id(0x0000000f), propget, helpstring("Not implemented. Specifies or returns whether to show the history of a 3D solid.")]
        HRESULT ShowHistory([out, retval] VARIANT_BOOL* Position);
        [id(0x0000000f), propput, helpstring("Not implemented. Specifies or returns whether to show the history of a 3D solid.")]
        HRESULT ShowHistory([in] VARIANT_BOOL Position);
    };

    
    
        
        
        
    

    [
      odl,
      uuid(8EA338B3-E80D-4439-AC60-9F703CC83B89),
      helpstring("TeighaX Interface of a bounded planar face consisting of lines, circles, arcs, elliptical arcs, and spline curves"),
      dual,
      oleautomation
    ]
    interface IAcadRegion : IAcadEntity {
        [id(0x00000001), propget, helpstring("Not implemented. Returns the area of a region.")]
        HRESULT Area([out, retval] double* Area);
        [id(0x00000002), propget, helpstring("Not implemented. Returns the center point of the area for a region.")]
        HRESULT Centroid([out, retval] VARIANT* Centroid);
        [id(0x00000003), propget, helpstring("Not implemented. Returns the moment of inertia for a region.")]
        HRESULT MomentOfInertia([out, retval] VARIANT* momentInertia);
        [id(0x00000004), propget, helpstring("Not implemented. Returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000005), propget, helpstring("Not implemented. Returns the perimeter of a region.")]
        HRESULT Perimeter([out, retval] double* Perimeter);
        [id(0x00000006), propget, helpstring("Not implemented. Returns the set of principal direction points for a region.")]
        HRESULT PrincipalDirections([out, retval] VARIANT* prinDir);
        [id(0x00000007), propget, helpstring("Not implemented. Returns the set of principal moment points for a region.")]
        HRESULT PrincipalMoments([out, retval] VARIANT* prinMoments);
        [id(0x00000008), propget, helpstring("Not implemented. Returns the product of inertia for a region.")]
        HRESULT ProductOfInertia([out, retval] double* prodInertia);
        [id(0x00000009), propget, helpstring("Not implemented. Returns the radius of gyration for a region.")]
        HRESULT RadiiOfGyration([out, retval] VARIANT* radiiGyration);
        [id(0x0000000a), helpstring("Not implemented. Performs a Boolean operation with another region.")]
        HRESULT Boolean(
                        [in] AcBooleanType Operation, 
                        [in] IAcadRegion* Object);
        [id(0x0000000b), helpstring("Explodes the region and returns the individual entities as an array of the object.")]
        HRESULT Explode([out, retval] VARIANT* pArrayObjs);
    };

    [
      odl,
      uuid(9C70B8BB-8005-48C1-ADC6-6F5C98C7B294),
      helpstring("TeighaX Interface of a full circle entity"),
      dual,
      oleautomation
    ]
    interface IAcadCircle : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the x, y, z coordinates of the center of a circle.")]
        HRESULT Center([out, retval] VARIANT* CenterPoint);
        [id(0x00000001), propput, helpstring("Specifies or returns the x, y, z coordinates of the center of a circle.")]
        HRESULT Center([in] VARIANT CenterPoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the radius of a circle.")]
        HRESULT Radius([out, retval] double* Radius);
        [id(0x00000002), propput, helpstring("Specifies or returns the radius of a circle.")]
        HRESULT Radius([in] double Radius);
        [id(0x00000003), propget, helpstring("Specifies or returns the diameter of a circle.")]
        HRESULT Diameter([out, retval] double* Diameter);
        [id(0x00000003), propput, helpstring("Specifies or returns the diameter of a circle.")]
        HRESULT Diameter([in] double Diameter);
        [id(0x00000004), propget, helpstring("Specifies or returns the circumference of a circle.")]
        HRESULT Circumference([out, retval] double* Circumference);
        [id(0x00000004), propput, helpstring("Specifies or returns the circumference of a circle.")]
        HRESULT Circumference([in] double Circumference);
        [id(0x00000005), propget, helpstring("Specifies or returns the area of a circle.")]
        HRESULT Area([out, retval] double* Area);
        [id(0x00000005), propput, helpstring("Specifies or returns the area of a circle.")]
        HRESULT Area([in] double Area);
        [id(0x00000006), propget, helpstring("Specifies or returns the x, y, z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000006), propput, helpstring("Specifies or returns the x, y, z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000007), propget, helpstring("Specifies or returns the thickness (z-direction value) of a circle.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000007), propput, helpstring("Specifies or returns the thickness (z-direction value) of a circle.")]
        HRESULT Thickness([in] double Thickness);
        [id(0x00000008), helpstring("Not implemented. Creates a new circle at a specified distance from an original circle.")]
        HRESULT Offset(
                        [in] double Distance, 
                        [out, retval] VARIANT* pOffsetCurves);
    };

    [
      odl,
      uuid(964E844B-F94D-4205-BF1E-FD02C3052EB9),
      helpstring("TeighaX Interface of a linear dimension, measuring the distance between two points, that is displayed parallel to the points being measured"),
      dual,
      oleautomation
    ]
    interface IAcadDimAligned : IAcadDimension {
        [id(0x00000001), propget, helpstring("Specifies or returns the start point of the first extension line.")]
        HRESULT ExtLine1Point([out, retval] VARIANT* xLine1Point);
        [id(0x00000001), propput, helpstring("Specifies or returns the start point of the first extension line.")]
        HRESULT ExtLine1Point([in] VARIANT xLine1Point);
        [id(0x00000002), propget, helpstring("Specifies or returns the start point of the second extension line.")]
        HRESULT ExtLine2Point([out, retval] VARIANT* xLine2Point);
        [id(0x00000002), propput, helpstring("Specifies or returns the start point of the second extension line.")]
        HRESULT ExtLine2Point([in] VARIANT xLine2Point);
        [id(0x00000003), propget, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([out, retval] VARIANT_BOOL* bAlternate);
        [id(0x00000003), propput, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([in] VARIANT_BOOL bAlternate);
        [id(0x00000004), propget, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000004), propput, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([in] AcDimPrecision precision);
        [id(0x00000005), propget, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([out, retval] ACAD_NOUNITS* scale);
        [id(0x00000005), propput, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([in] ACAD_NOUNITS scale);
        [id(0x00000006), propget, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([out, retval] double* Distance);
        [id(0x00000006), propput, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([in] double Distance);
        [id(0x00000007), propget, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([out, retval] AcDimPrecision* Distance);
        [id(0x00000007), propput, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([in] AcDimPrecision Distance);
        [id(0x00000009), propget, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([out, retval] AcDimUnits* Units);
        [id(0x00000009), propput, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([in] AcDimUnits Units);
        [id(0x0000000b), propget, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([out, retval] BSTR* prefix);
        [id(0x0000000b), propput, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([in] BSTR prefix);
        [id(0x0000000c), propget, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([out, retval] BSTR* suffix);
        [id(0x0000000c), propput, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([in] BSTR suffix);
        [id(0x0000000d), propget, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* color);
        [id(0x0000000d), propput, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR color);
        [id(0x0000000e), propget, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([out, retval] ACAD_COLOR* color);
        [id(0x0000000e), propput, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([in] ACAD_COLOR color);
        [id(0x0000000f), propget, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([out, retval] AcDimPrecision* Prec);
        [id(0x0000000f), propput, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([in] AcDimPrecision Prec);
        [id(0x00000010), propget, helpstring("Specifies or returns how far dimension lines extend beyond extension lines when using dimension lines with oblique strokes.")]
        HRESULT DimensionLineExtend([out, retval] double* extend);
        [id(0x00000010), propput, helpstring("Specifies or returns how far dimension lines extend beyond extension lines when using dimension lines with oblique strokes.")]
        HRESULT DimensionLineExtend([in] double extend);
        [id(0x00000011), propget, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([out, retval] double* extend);
        [id(0x00000011), propput, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([in] double extend);
        [id(0x00000012), propget, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([out, retval] AcDimFit* fittype);
        [id(0x00000012), propput, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([in] AcDimFit fittype);
        [id(0x00000013), propget, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([out, retval] AcDimFractionType* Type);
        [id(0x00000013), propput, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([in] AcDimFractionType Type);
        [id(0x00000014), propget, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([out, retval] AcDimHorizontalJustification* Type);
        [id(0x00000014), propput, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([in] AcDimHorizontalJustification Type);
        [id(0x00000015), propget, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([out, retval] ACAD_NOUNITS* Type);
        [id(0x00000015), propput, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([in] ACAD_NOUNITS Type);
        [id(0x00000016), propget, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([out, retval] AcDimLUnits* format);
        [id(0x00000016), propput, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([in] AcDimLUnits format);
        [id(0x00000017), propget, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([out, retval] ACAD_LWEIGHT* lweight);
        [id(0x00000017), propput, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([in] ACAD_LWEIGHT lweight);
        [id(0x00000018), propget, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([out, retval] double* Distance);
        [id(0x00000018), propput, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([in] double Distance);
        [id(0x00000019), propget, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x00000019), propput, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001a), propget, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001a), propput, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001b), propget, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001b), propput, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001c), propget, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001c), propput, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001d), propget, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001d), propput, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([in] VARIANT_BOOL bInside);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([in] VARIANT_BOOL bInside);
        [id(0x00000020), propget, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000020), propput, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([in] VARIANT_BOOL bInside);
        [id(0x00000021), propget, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000021), propput, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([in] VARIANT_BOOL bInside);
        [id(0x00000023), propget, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([out, retval] double* Offset);
        [id(0x00000023), propput, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([in] double Offset);
        [id(0x00000030), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000030), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000031), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000031), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000032), propget, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000032), propput, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000033), propget, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000033), propput, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000034), propget, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000034), propput, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000035), propget, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000035), propput, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000036), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000036), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000037), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000037), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000038), propget, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000038), propput, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000039), propget, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000039), propput, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003a), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003a), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x0000003b), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003b), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003c), propget, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000003c), propput, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x0000003e), propget, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003e), propput, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([in] AcDimArrowheadType Type);
        [id(0x0000003f), propget, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003f), propput, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([in] AcDimArrowheadType Type);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] double* bVal);
        [id(0x00000041), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([out, retval] BSTR* BlockName);
        [id(0x00000041), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([in] BSTR BlockName);
        [id(0x00000042), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([out, retval] BSTR* BlockName);
        [id(0x00000042), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([in] BSTR BlockName);
        [id(0x00000050), propget, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([out, retval] BSTR* Linetype);
        [id(0x00000050), propput, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([in] BSTR Linetype);
        [id(0x00000051), propget, helpstring("Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([out, retval] BSTR* Linetype);
        [id(0x00000051), propput, helpstring("Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([in] BSTR Linetype);
        [id(0x00000052), propget, helpstring("Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([out, retval] BSTR* Linetype);
        [id(0x00000052), propput, helpstring("Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([in] BSTR Linetype);
        [id(0x00000053), propget, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([out, retval] VARIANT_BOOL* bFixedLen);
        [id(0x00000053), propput, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([in] VARIANT_BOOL bFixedLen);
        [id(0x00000054), propget, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([out, retval] double* FixedLen);
        [id(0x00000054), propput, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([in] double FixedLen);
        [id(0x00000055), propget, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([out, retval] VARIANT_BOOL* bIsDynamic);
        [id(0x00000055), propput, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([in] VARIANT_BOOL bIsDynamic);
        [id(0x00000056), propget, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([out, retval] VARIANT_BOOL* bIsReference);
        [id(0x00000056), propput, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([in] VARIANT_BOOL bIsReference);
        [id(0x00000057), propget, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([out, retval] BSTR* bstrName);
        [id(0x00000057), propput, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([in] BSTR bstrName);
        [id(0x00000058), propget, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([out, retval] BSTR* bstrExpression);
        [id(0x00000058), propput, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([in] BSTR bstrExpression);
        [id(0x00000059), propget, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([out, retval] BSTR* Value);
        [id(0x00000059), propput, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([in] BSTR Value);
        [id(0x0000005a), propget, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([out, retval] BSTR* bstrDescription);
        [id(0x0000005a), propput, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([in] BSTR bstrDescription);
        [id(0x00000626), propget, helpstring("Specifies the text suffix for all applicable linear dimension when change to sub-units")]
        HRESULT SubUnitsSuffix([out, retval] BSTR* suffix);
        [id(0x00000626), propput, helpstring("Specifies the text suffix for all applicable linear dimension when change to sub-units")]
        HRESULT SubUnitsSuffix([in] BSTR suffix);
        [id(0x00000627), propget, helpstring("Specifies the sub-units scale factor for all applicable linear dimension")]
        HRESULT SubUnitsFactor([out, retval] double* factor);
        [id(0x00000627), propput, helpstring("Specifies the sub-units scale factor for all applicable linear dimension")]
        HRESULT SubUnitsFactor([in] double factor);
        [id(0x00000628), propget, helpstring("Specifies the text suffix for the alternate dimension when change to alternate sub-units")]
        HRESULT AltSubUnitsSuffix([out, retval] BSTR* suffix);
        [id(0x00000628), propput, helpstring("Specifies the text suffix for the alternate dimension when change to alternate sub-units")]
        HRESULT AltSubUnitsSuffix([in] BSTR suffix);
        [id(0x00000629), propget, helpstring("Specifies the alternate sub-units scale factor for all applicable linear dimension")]
        HRESULT AltSubUnitsFactor([out, retval] double* factor);
        [id(0x00000629), propput, helpstring("Specifies the alternate sub-units scale factor for all applicable linear dimension")]
        HRESULT AltSubUnitsFactor([in] double factor);
    };

    [
      odl,
      uuid(E0A05132-ABAE-4B7F-8465-AC43BD0EAA7B),
      helpstring("The common interface for TeighaX dimensions"),
      dual,
      oleautomation
    ]
    interface IAcadDimension : IAcadEntity {
        [id(0x00000601), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000601), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000602), propget, helpstring("Specifies or returns the rotation angle of a dimension.")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000602), propput, helpstring("Specifies or returns the rotation angle of a dimension.")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000603), propget, helpstring("Specifies or returns the x, y, z coordinates for the text position of a dimension.")]
        HRESULT TextPosition([out, retval] VARIANT* textPos);
        [id(0x00000603), propput, helpstring("Specifies or returns the x, y, z coordinates for the text position of a dimension.")]
        HRESULT TextPosition([in] VARIANT textPos);
        [id(0x00000604), propget, helpstring("Specifies or returns the rotation angle of dimension text.")]
        HRESULT TextRotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000604), propput, helpstring("Specifies or returns the rotation angle of dimension text.")]
        HRESULT TextRotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000605), propget, helpstring("Specifies or returns a dimension text string that displays in addition to or instead of the dimension measurement.")]
        HRESULT TextOverride([out, retval] BSTR* bstrText);
        [id(0x00000605), propput, helpstring("Specifies or returns a dimension text string that displays in addition to or instead of the dimension measurement.")]
        HRESULT TextOverride([in] BSTR bstrText);
        [id(0x00000606), propget, helpstring("Specifies or returns the name of the dimension style assigned to a dimension.")]
        HRESULT StyleName([out, retval] BSTR* bstrName);
        [id(0x00000606), propput, helpstring("Specifies or returns the name of the dimension style assigned to a dimension.")]
        HRESULT StyleName([in] BSTR bstrName);
        [id(0x0000060a), propget, helpstring("Specifies or returns the text color of a dimension.")]
        HRESULT TextColor([out, retval] ACAD_COLOR* color);
        [id(0x0000060a), propput, helpstring("Specifies or returns the text color of a dimension.")]
        HRESULT TextColor([in] ACAD_COLOR color);
        [id(0x0000060c), propget, helpstring("Specifies or returns the decimal separator of a dimension formatted for decimals.")]
        HRESULT DecimalSeparator([out, retval] BSTR* character);
        [id(0x0000060c), propput, helpstring("Specifies or returns the decimal separator of a dimension formatted for decimals.")]
        HRESULT DecimalSeparator([in] BSTR character);
        [id(0x0000060d), propget, helpstring("Specifies or returns the amount of blank space surrounding dimension text when the text causes a dimension line to break.")]
        HRESULT TextGap([out, retval] double* Offset);
        [id(0x0000060d), propput, helpstring("Specifies or returns the amount of blank space surrounding dimension text when the text causes a dimension line to break.")]
        HRESULT TextGap([in] double Offset);
        [id(0x0000060f), propget, helpstring("Specifies or returns the prefix for text of a dimension.")]
        HRESULT TextPrefix([out, retval] BSTR* prefix);
        [id(0x0000060f), propput, helpstring("Specifies or returns the prefix for text of a dimension.")]
        HRESULT TextPrefix([in] BSTR prefix);
        [id(0x00000610), propget, helpstring("Specifies or returns the suffix for text of a dimension.")]
        HRESULT TextSuffix([out, retval] BSTR* suffix);
        [id(0x00000610), propput, helpstring("Specifies or returns the suffix for text of a dimension.")]
        HRESULT TextSuffix([in] BSTR suffix);
        [id(0x00000611), propget, helpstring("Specifies or returns the scale factor of a dimension.")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* factor);
        [id(0x00000611), propput, helpstring("Specifies or returns the scale factor of a dimension.")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS factor);
        [id(0x00000612), propget, helpstring("Specifies or returns the vertical position of text for a dimension.")]
        HRESULT VerticalTextPosition([out, retval] AcDimVerticalJustification* Type);
        [id(0x00000612), propput, helpstring("Specifies or returns the vertical position of text for a dimension.")]
        HRESULT VerticalTextPosition([in] AcDimVerticalJustification Type);
        [id(0x00000613), propget, helpstring("Specifies or returns the number of decimal places for tolerance values of dimensions.")]
        HRESULT TolerancePrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000613), propput, helpstring("Specifies or returns the number of decimal places for tolerance values of dimensions.")]
        HRESULT TolerancePrecision([in] AcDimPrecision precision);
        [id(0x00000614), propget, helpstring("Specifies or returns the scale factor of tolerance text height in relation to dimension text height.")]
        HRESULT ToleranceHeightScale([out, retval] ACAD_NOUNITS* scale);
        [id(0x00000614), propput, helpstring("Specifies or returns the scale factor of tolerance text height in relation to dimension text height.")]
        HRESULT ToleranceHeightScale([in] ACAD_NOUNITS scale);
        [id(0x00000615), propget, helpstring("Specifies or returns the lower tolerance limit for dimensions.")]
        HRESULT ToleranceLowerLimit([out, retval] double* lower);
        [id(0x00000615), propput, helpstring("Specifies or returns the lower tolerance limit for dimensions.")]
        HRESULT ToleranceLowerLimit([in] double lower);
        [id(0x00000616), propget, helpstring("Specifies or returns how dimension lines move when the corresponding dimension text moves.")]
        HRESULT TextMovement([out, retval] AcDimTextMovement* Move);
        [id(0x00000616), propput, helpstring("Specifies or returns how dimension lines move when the corresponding dimension text moves.")]
        HRESULT TextMovement([in] AcDimTextMovement Move);
        [id(0x00000617), propget, helpstring("Specifies or returns whether dimension tolerance values display with dimension text.")]
        HRESULT ToleranceDisplay([out, retval] AcDimToleranceMethod* method);
        [id(0x00000617), propput, helpstring("Specifies or returns whether dimension tolerance values display with dimension text.")]
        HRESULT ToleranceDisplay([in] AcDimToleranceMethod method);
        [id(0x00000618), propget, helpstring("Specifies or returns the vertical placement of tolerance values for dimension text.")]
        HRESULT ToleranceJustification([out, retval] AcDimToleranceJustify* method);
        [id(0x00000618), propput, helpstring("Specifies or returns the vertical placement of tolerance values for dimension text.")]
        HRESULT ToleranceJustification([in] AcDimToleranceJustify method);
        [id(0x00000619), propget, helpstring("Specifies or returns the upper tolerance limit for dimensions.")]
        HRESULT ToleranceUpperLimit([out, retval] double* upper);
        [id(0x00000619), propput, helpstring("Specifies or returns the upper tolerance limit for dimensions.")]
        HRESULT ToleranceUpperLimit([in] double upper);
        [id(0x0000061a), propget, helpstring("Specifies or returns the text style of a dimension.")]
        HRESULT TextStyle([out, retval] BSTR* style);
        [id(0x0000061a), propput, helpstring("Specifies or returns the text style of a dimension.")]
        HRESULT TextStyle([in] BSTR style);
        [id(0x0000061b), propget, helpstring("Specifies or returns the text height of a dimension.")]
        HRESULT TextHeight([out, retval] double* Height);
        [id(0x0000061b), propput, helpstring("Specifies or returns the text height of a dimension.")]
        HRESULT TextHeight([in] double Height);
        [id(0x0000061d), propget, helpstring("Specifies or returns whether leading zeros display for dimensions.")]
        HRESULT SuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000061d), propput, helpstring("Specifies or returns whether leading zeros display for dimensions.")]
        HRESULT SuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x0000061e), propget, helpstring("Specifies or returns whether trailing zeros display for dimensions.")]
        HRESULT SuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000061e), propput, helpstring("Specifies or returns whether trailing zeros display for dimensions.")]
        HRESULT SuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000621), propget, helpstring("Specifies or returns whether leading zeros display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000621), propput, helpstring("Specifies or returns whether leading zeros display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000622), propget, helpstring("Specifies or returns whether trailing zeros display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000622), propput, helpstring("Specifies or returns whether trailing zeros display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000623), propget, helpstring("Not implemented. Specifies or returns the background fill of dimension text.")]
        HRESULT TextFill([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000623), propput, helpstring("Not implemented. Specifies or returns the background fill of dimension text.")]
        HRESULT TextFill([in] VARIANT_BOOL bVal);
        [id(0x00000624), propget, helpstring("Not implemented. Specifies or returns the fill color for dimension text.")]
        HRESULT TextFillColor([out, retval] ACAD_COLOR* color);
        [id(0x00000624), propput, helpstring("Not implemented. Specifies or returns the fill color for dimension text.")]
        HRESULT TextFillColor([in] ACAD_COLOR color);
    };

    
    
        
        
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
        
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
        
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    [
      odl,
      uuid(DB5BBA0F-232A-43B3-AADD-FD48956A3739),
      helpstring("TeighaX Interface of a dimension measuring the angular distance between two lines or between the angle of a circular arc"),
      dual,
      oleautomation
    ]
    interface IAcadDimAngular : IAcadDimension {
        [id(0x00000025), propget, helpstring("Specifies or returns the start point of the first extension line.")]
        HRESULT ExtLine1StartPoint([out, retval] VARIANT* xLine1Point);
        [id(0x00000025), propput, helpstring("Specifies or returns the start point of the first extension line.")]
        HRESULT ExtLine1StartPoint([in] VARIANT xLine1Point);
        [id(0x00000026), propget, helpstring("Specifies or returns the end point of the first extension line.")]
        HRESULT ExtLine1EndPoint([out, retval] VARIANT* xLine1Point);
        [id(0x00000026), propput, helpstring("Specifies or returns the end point of the first extension line.")]
        HRESULT ExtLine1EndPoint([in] VARIANT xLine1Point);
        [id(0x00000027), propget, helpstring("Specifies or returns the start point of the second extension line.")]
        HRESULT ExtLine2StartPoint([out, retval] VARIANT* xLine2Point);
        [id(0x00000027), propput, helpstring("Specifies or returns the start point of the second extension line.")]
        HRESULT ExtLine2StartPoint([in] VARIANT xLine2Point);
        [id(0x00000028), propget, helpstring("Specifies or returns the end point of the second extension line.")]
        HRESULT ExtLine2EndPoint([out, retval] VARIANT* xLine2Point);
        [id(0x00000028), propput, helpstring("Specifies or returns the end point of the second extension line.")]
        HRESULT ExtLine2EndPoint([in] VARIANT xLine2Point);
        [id(0x00000029), propget, helpstring("Specifies or returns the unit of measurement for angular dimensions.")]
        HRESULT AngleFormat([out, retval] AcAngleUnits* format);
        [id(0x00000029), propput, helpstring("Specifies or returns the unit of measurement for angular dimensions.")]
        HRESULT AngleFormat([in] AcAngleUnits format);
        [id(0x0000000d), propget, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000e), propget, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000e), propput, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([in] ACAD_COLOR Type);
        [id(0x00000011), propget, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([out, retval] double* extend);
        [id(0x00000011), propput, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([in] double extend);
        [id(0x00000012), propget, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([out, retval] AcDimFit* fittype);
        [id(0x00000012), propput, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([in] AcDimFit fittype);
        [id(0x00000014), propget, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([out, retval] AcDimHorizontalJustification* Type);
        [id(0x00000014), propput, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([in] AcDimHorizontalJustification Type);
        [id(0x00000017), propget, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([out, retval] ACAD_LWEIGHT* lweight);
        [id(0x00000017), propput, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([in] ACAD_LWEIGHT lweight);
        [id(0x00000019), propget, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x00000019), propput, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001a), propget, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001a), propput, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001b), propget, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001b), propput, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001c), propget, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001c), propput, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001d), propget, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001d), propput, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([in] VARIANT_BOOL bInside);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([in] VARIANT_BOOL bInside);
        [id(0x00000020), propget, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000020), propput, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([in] VARIANT_BOOL bInside);
        [id(0x00000021), propget, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000021), propput, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([in] VARIANT_BOOL bInside);
        [id(0x00000024), propget, helpstring("Specifies or returns the number of decimal places for angular dimension text.")]
        HRESULT TextPrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000024), propput, helpstring("Specifies or returns the number of decimal places for angular dimension text.")]
        HRESULT TextPrecision([in] AcDimPrecision precision);
        [id(0x00000023), propget, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([out, retval] double* Offset);
        [id(0x00000023), propput, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([in] double Offset);
        [id(0x0000003c), propget, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000003c), propput, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x0000003e), propget, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003e), propput, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([in] AcDimArrowheadType Type);
        [id(0x0000003f), propget, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003f), propput, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([in] AcDimArrowheadType Type);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] ACAD_ANGLE* bVal);
        [id(0x00000041), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([out, retval] BSTR* BlockName);
        [id(0x00000041), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([in] BSTR BlockName);
        [id(0x00000042), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([out, retval] BSTR* BlockName);
        [id(0x00000042), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([in] BSTR BlockName);
        [id(0x00000050), propget, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([out, retval] BSTR* Linetype);
        [id(0x00000050), propput, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([in] BSTR Linetype);
        [id(0x00000051), propget, helpstring("Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([out, retval] BSTR* Linetype);
        [id(0x00000051), propput, helpstring("Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([in] BSTR Linetype);
        [id(0x00000052), propget, helpstring("Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([out, retval] BSTR* Linetype);
        [id(0x00000052), propput, helpstring("Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([in] BSTR Linetype);
        [id(0x00000053), propget, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([out, retval] VARIANT_BOOL* bFixedLen);
        [id(0x00000053), propput, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([in] VARIANT_BOOL bFixedLen);
        [id(0x00000054), propget, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([out, retval] double* FixedLen);
        [id(0x00000054), propput, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([in] double FixedLen);
        [id(0x00000055), propget, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([out, retval] VARIANT_BOOL* bIsDynamic);
        [id(0x00000055), propput, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([in] VARIANT_BOOL bIsDynamic);
        [id(0x00000056), propget, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([out, retval] VARIANT_BOOL* bIsReference);
        [id(0x00000056), propput, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([in] VARIANT_BOOL bIsReference);
        [id(0x00000057), propget, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([out, retval] BSTR* bstrName);
        [id(0x00000057), propput, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([in] BSTR bstrName);
        [id(0x00000058), propget, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([out, retval] BSTR* bstrExpression);
        [id(0x00000058), propput, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([in] BSTR bstrExpression);
        [id(0x00000059), propget, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([out, retval] BSTR* Value);
        [id(0x00000059), propput, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([in] BSTR Value);
        [id(0x0000005a), propget, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([out, retval] BSTR* bstrDescription);
        [id(0x0000005a), propput, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([in] BSTR bstrDescription);
    };

    
    
        
        
        
        
        
    

    [
      odl,
      uuid(46737CD5-465F-465D-B9E5-7F5A70EF4704),
      helpstring("TeighaX Interface of a dimension measuring the diameter of a circle or arc"),
      dual,
      oleautomation
    ]
    interface IAcadDimDiametric : IAcadDimension {
        [id(0x0000002a), propput, helpstring("Specifies the length of the leader used with the diametral dimension.")]
        HRESULT LeaderLength([in] double rhs);
        [id(0x00000003), propget, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([out, retval] VARIANT_BOOL* bAlternate);
        [id(0x00000003), propput, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([in] VARIANT_BOOL bAlternate);
        [id(0x00000004), propget, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000004), propput, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([in] AcDimPrecision precision);
        [id(0x00000005), propget, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([out, retval] ACAD_NOUNITS* scale);
        [id(0x00000005), propput, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([in] ACAD_NOUNITS scale);
        [id(0x00000006), propget, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([out, retval] double* Distance);
        [id(0x00000006), propput, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([in] double Distance);
        [id(0x00000007), propget, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([out, retval] AcDimPrecision* Distance);
        [id(0x00000007), propput, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([in] AcDimPrecision Distance);
        [id(0x00000009), propget, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([out, retval] AcDimUnits* Units);
        [id(0x00000009), propput, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([in] AcDimUnits Units);
        [id(0x0000000b), propget, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([out, retval] BSTR* prefix);
        [id(0x0000000b), propput, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([in] BSTR prefix);
        [id(0x0000000c), propget, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([out, retval] BSTR* prefix);
        [id(0x0000000c), propput, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([in] BSTR prefix);
        [id(0x0000000d), propget, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000f), propget, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([out, retval] AcDimPrecision* Prec);
        [id(0x0000000f), propput, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([in] AcDimPrecision Prec);
        [id(0x00000013), propget, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([out, retval] AcDimFractionType* Type);
        [id(0x00000013), propput, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([in] AcDimFractionType Type);
        [id(0x00000012), propget, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([out, retval] AcDimFit* fittype);
        [id(0x00000012), propput, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([in] AcDimFit fittype);
        [id(0x00000015), propget, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([out, retval] ACAD_NOUNITS* Type);
        [id(0x00000015), propput, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([in] ACAD_NOUNITS Type);
        [id(0x00000016), propget, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([out, retval] AcDimLUnits* format);
        [id(0x00000016), propput, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([in] AcDimLUnits format);
        [id(0x00000018), propget, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([out, retval] double* Distance);
        [id(0x00000018), propput, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([in] double Distance);
        [id(0x00000019), propget, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x00000019), propput, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001a), propget, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001a), propput, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([in] VARIANT_BOOL bInside);
        [id(0x00000020), propget, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000020), propput, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([in] VARIANT_BOOL bInside);
        [id(0x00000021), propget, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000021), propput, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000002b), propget, helpstring("Specifies or returns the type of center mark used for diametral dimensions.")]
        HRESULT CenterType([out, retval] AcDimCenterType* Type);
        [id(0x0000002b), propput, helpstring("Specifies or returns the type of center mark used for diametral dimensions.")]
        HRESULT CenterType([in] AcDimCenterType Type);
        [id(0x0000002c), propget, helpstring("Specifies or returns the size of the center mark used for diametral dimensions.")]
        HRESULT CenterMarkSize([out, retval] double* Type);
        [id(0x0000002c), propput, helpstring("Specifies or returns the size of the center mark used for diametral dimensions.")]
        HRESULT CenterMarkSize([in] double Type);
        [id(0x00000030), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000030), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000031), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000031), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000032), propget, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000032), propput, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000033), propget, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000033), propput, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000034), propget, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000034), propput, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000035), propget, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000035), propput, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000036), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000036), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000037), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000037), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000038), propget, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000038), propput, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000039), propget, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000039), propput, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003a), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003a), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x0000003b), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003b), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003c), propget, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000003c), propput, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x0000003e), propget, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003e), propput, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([in] AcDimArrowheadType Type);
        [id(0x0000003f), propget, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003f), propput, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([in] AcDimArrowheadType Type);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] double* bVal);
        [id(0x00000041), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([out, retval] BSTR* BlockName);
        [id(0x00000041), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([in] BSTR BlockName);
        [id(0x00000042), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([out, retval] BSTR* BlockName);
        [id(0x00000042), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([in] BSTR BlockName);
        [id(0x00000050), propget, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([out, retval] BSTR* Linetype);
        [id(0x00000050), propput, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([in] BSTR Linetype);
        [id(0x00000055), propget, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([out, retval] VARIANT_BOOL* bIsDynamic);
        [id(0x00000055), propput, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([in] VARIANT_BOOL bIsDynamic);
        [id(0x00000056), propget, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([out, retval] VARIANT_BOOL* bIsReference);
        [id(0x00000056), propput, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([in] VARIANT_BOOL bIsReference);
        [id(0x00000057), propget, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([out, retval] BSTR* bstrName);
        [id(0x00000057), propput, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([in] BSTR bstrName);
        [id(0x00000058), propget, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([out, retval] BSTR* bstrExpression);
        [id(0x00000058), propput, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([in] BSTR bstrExpression);
        [id(0x00000059), propget, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([out, retval] BSTR* Value);
        [id(0x00000059), propput, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([in] BSTR Value);
        [id(0x0000005a), propget, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([out, retval] BSTR* bstrDescription);
        [id(0x0000005a), propput, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([in] BSTR bstrDescription);
    };

    
    
        
        
        
    

    [
      odl,
      uuid(CE503926-32B9-4917-AC61-3F6753FBC2DB),
      helpstring("TeighaX Interface of a dimension that measures the distance between two points and is displayed at a given rotation"),
      dual,
      oleautomation
    ]
    interface IAcadDimRotated : IAcadDimension {
        [id(0x00000003), propget, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([out, retval] VARIANT_BOOL* bAlternate);
        [id(0x00000003), propput, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([in] VARIANT_BOOL bAlternate);
        [id(0x00000004), propget, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000004), propput, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([in] AcDimPrecision precision);
        [id(0x00000005), propget, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([out, retval] ACAD_NOUNITS* scale);
        [id(0x00000005), propput, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([in] ACAD_NOUNITS scale);
        [id(0x00000006), propget, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([out, retval] double* Distance);
        [id(0x00000006), propput, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([in] double Distance);
        [id(0x00000007), propget, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([out, retval] AcDimPrecision* Distance);
        [id(0x00000007), propput, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([in] AcDimPrecision Distance);
        [id(0x00000009), propget, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([out, retval] AcDimUnits* Units);
        [id(0x00000009), propput, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([in] AcDimUnits Units);
        [id(0x0000000b), propget, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([out, retval] BSTR* prefix);
        [id(0x0000000b), propput, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([in] BSTR prefix);
        [id(0x0000000c), propget, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([out, retval] BSTR* prefix);
        [id(0x0000000c), propput, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([in] BSTR prefix);
        [id(0x0000000d), propget, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000e), propget, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000e), propput, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000f), propget, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([out, retval] AcDimPrecision* Prec);
        [id(0x0000000f), propput, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([in] AcDimPrecision Prec);
        [id(0x00000010), propget, helpstring("Specifies or returns how far dimension lines extend beyond extension lines when using dimension lines with oblique strokes.")]
        HRESULT DimensionLineExtend([out, retval] double* extend);
        [id(0x00000010), propput, helpstring("Specifies or returns how far dimension lines extend beyond extension lines when using dimension lines with oblique strokes.")]
        HRESULT DimensionLineExtend([in] double extend);
        [id(0x00000011), propget, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([out, retval] double* extend);
        [id(0x00000011), propput, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([in] double extend);
        [id(0x00000012), propget, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([out, retval] AcDimFit* fittype);
        [id(0x00000012), propput, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([in] AcDimFit fittype);
        [id(0x00000013), propget, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([out, retval] AcDimFractionType* Type);
        [id(0x00000013), propput, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([in] AcDimFractionType Type);
        [id(0x00000014), propget, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([out, retval] AcDimHorizontalJustification* Type);
        [id(0x00000014), propput, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([in] AcDimHorizontalJustification Type);
        [id(0x00000015), propget, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([out, retval] ACAD_NOUNITS* Type);
        [id(0x00000015), propput, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([in] ACAD_NOUNITS Type);
        [id(0x00000016), propget, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([out, retval] AcDimLUnits* format);
        [id(0x00000016), propput, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([in] AcDimLUnits format);
        [id(0x00000017), propget, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([out, retval] ACAD_LWEIGHT* lweight);
        [id(0x00000017), propput, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([in] ACAD_LWEIGHT lweight);
        [id(0x00000018), propget, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([out, retval] double* Distance);
        [id(0x00000018), propput, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([in] double Distance);
        [id(0x00000019), propget, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x00000019), propput, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001a), propget, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001a), propput, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001b), propget, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001b), propput, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001c), propget, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001c), propput, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001d), propget, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001d), propput, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([in] VARIANT_BOOL bInside);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([in] VARIANT_BOOL bInside);
        [id(0x00000020), propget, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000020), propput, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([in] VARIANT_BOOL bInside);
        [id(0x00000021), propget, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000021), propput, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([in] VARIANT_BOOL bInside);
        [id(0x00000023), propget, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([out, retval] double* Offset);
        [id(0x00000023), propput, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([in] double Offset);
        [id(0x00000030), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000030), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000031), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000031), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000032), propget, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000032), propput, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000033), propget, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000033), propput, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000034), propget, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000034), propput, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000035), propget, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000035), propput, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000036), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000036), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000037), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000037), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000038), propget, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT SuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000038), propput, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT SuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000039), propget, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT SuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000039), propput, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT SuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003a), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003a), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x0000003b), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003b), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003c), propget, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000003c), propput, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x0000003e), propget, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003e), propput, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([in] AcDimArrowheadType Type);
        [id(0x0000003f), propget, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003f), propput, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([in] AcDimArrowheadType Type);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] double* bVal);
        [id(0x00000041), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([out, retval] BSTR* BlockName);
        [id(0x00000041), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([in] BSTR BlockName);
        [id(0x00000042), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([out, retval] BSTR* BlockName);
        [id(0x00000042), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([in] BSTR BlockName);
        [id(0x00000050), propget, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([out, retval] BSTR* Linetype);
        [id(0x00000050), propput, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([in] BSTR Linetype);
        [id(0x00000051), propget, helpstring("Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([out, retval] BSTR* Linetype);
        [id(0x00000051), propput, helpstring("Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([in] BSTR Linetype);
        [id(0x00000052), propget, helpstring("Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([out, retval] BSTR* Linetype);
        [id(0x00000052), propput, helpstring("Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([in] BSTR Linetype);
        [id(0x00000053), propget, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([out, retval] VARIANT_BOOL* bFixedLen);
        [id(0x00000053), propput, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([in] VARIANT_BOOL bFixedLen);
        [id(0x00000054), propget, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([out, retval] double* FixedLen);
        [id(0x00000054), propput, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([in] double FixedLen);
        [id(0x00000055), propget, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([out, retval] VARIANT_BOOL* bIsDynamic);
        [id(0x00000055), propput, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([in] VARIANT_BOOL bIsDynamic);
        [id(0x00000056), propget, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([out, retval] VARIANT_BOOL* bIsReference);
        [id(0x00000056), propput, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([in] VARIANT_BOOL bIsReference);
        [id(0x00000057), propget, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([out, retval] BSTR* bstrName);
        [id(0x00000057), propput, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([in] BSTR bstrName);
        [id(0x00000058), propget, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([out, retval] BSTR* bstrExpression);
        [id(0x00000058), propput, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([in] BSTR bstrExpression);
        [id(0x00000059), propget, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([out, retval] BSTR* Value);
        [id(0x00000059), propput, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([in] BSTR Value);
        [id(0x0000005a), propget, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([out, retval] BSTR* bstrDescription);
        [id(0x0000005a), propput, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([in] BSTR bstrDescription);
        [id(0x00000626), propget, helpstring("Specifies the text suffix for all applicable linear dimension when change to sub-units")]
        HRESULT SubUnitsSuffix([out, retval] BSTR* suffix);
        [id(0x00000626), propput, helpstring("Specifies the text suffix for all applicable linear dimension when change to sub-units")]
        HRESULT SubUnitsSuffix([in] BSTR suffix);
        [id(0x00000627), propget, helpstring("Specifies the sub-units scale factor for all applicable linear dimension")]
        HRESULT SubUnitsFactor([out, retval] double* factor);
        [id(0x00000627), propput, helpstring("Specifies the sub-units scale factor for all applicable linear dimension")]
        HRESULT SubUnitsFactor([in] double factor);
        [id(0x00000628), propget, helpstring("Specifies the text suffix for the alternate dimension when change to alternate sub-units")]
        HRESULT AltSubUnitsSuffix([out, retval] BSTR* suffix);
        [id(0x00000628), propput, helpstring("Specifies the text suffix for the alternate dimension when change to alternate sub-units")]
        HRESULT AltSubUnitsSuffix([in] BSTR suffix);
        [id(0x00000629), propget, helpstring("Specifies the alternate sub-units scale factor for all applicable linear dimension")]
        HRESULT AltSubUnitsFactor([out, retval] double* factor);
        [id(0x00000629), propput, helpstring("Specifies the alternate sub-units scale factor for all applicable linear dimension")]
        HRESULT AltSubUnitsFactor([in] double factor);
    };

    [
      odl,
      uuid(55154FC3-8121-46EA-BB93-7D022B33B3CB),
      helpstring("TeighaX Interface of a dimension measuring the absolute X or Y position of a point from the origin"),
      dual,
      oleautomation
    ]
    interface IAcadDimOrdinate : IAcadDimension {
        [id(0x00000003), propget, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([out, retval] VARIANT_BOOL* bAlternate);
        [id(0x00000003), propput, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([in] VARIANT_BOOL bAlternate);
        [id(0x00000004), propget, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000004), propput, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([in] AcDimPrecision precision);
        [id(0x00000005), propget, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([out, retval] ACAD_NOUNITS* scale);
        [id(0x00000005), propput, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([in] ACAD_NOUNITS scale);
        [id(0x00000006), propget, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([out, retval] double* Distance);
        [id(0x00000006), propput, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([in] double Distance);
        [id(0x00000007), propget, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([out, retval] AcDimPrecision* Distance);
        [id(0x00000007), propput, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([in] AcDimPrecision Distance);
        [id(0x00000009), propget, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([out, retval] AcDimUnits* Units);
        [id(0x00000009), propput, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([in] AcDimUnits Units);
        [id(0x0000000b), propget, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([out, retval] BSTR* prefix);
        [id(0x0000000b), propput, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([in] BSTR prefix);
        [id(0x0000000c), propget, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([out, retval] BSTR* prefix);
        [id(0x0000000c), propput, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([in] BSTR prefix);
        [id(0x0000000e), propget, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000e), propput, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000f), propget, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([out, retval] AcDimPrecision* Prec);
        [id(0x0000000f), propput, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([in] AcDimPrecision Prec);
        [id(0x00000013), propget, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([out, retval] AcDimFractionType* Type);
        [id(0x00000013), propput, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([in] AcDimFractionType Type);
        [id(0x00000015), propget, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([out, retval] ACAD_NOUNITS* Type);
        [id(0x00000015), propput, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([in] ACAD_NOUNITS Type);
        [id(0x00000016), propget, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([out, retval] AcDimLUnits* format);
        [id(0x00000016), propput, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([in] AcDimLUnits format);
        [id(0x00000017), propget, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([out, retval] ACAD_LWEIGHT* lweight);
        [id(0x00000017), propput, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([in] ACAD_LWEIGHT lweight);
        [id(0x00000018), propget, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([out, retval] double* Distance);
        [id(0x00000018), propput, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([in] double Distance);
        [id(0x00000023), propget, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([out, retval] double* Offset);
        [id(0x00000023), propput, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([in] double Offset);
        [id(0x00000030), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000030), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000031), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000031), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000032), propget, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000032), propput, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000033), propget, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000033), propput, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000034), propget, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000034), propput, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000035), propget, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000035), propput, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000036), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000036), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000037), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000037), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000038), propget, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000038), propput, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000039), propget, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000039), propput, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003a), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003a), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x0000003b), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003b), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] double* bVal);
        [id(0x00000053), propget, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([out, retval] VARIANT_BOOL* bFixedLen);
        [id(0x00000053), propput, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([in] VARIANT_BOOL bFixedLen);
        [id(0x00000054), propget, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([out, retval] double* FixedLen);
        [id(0x00000054), propput, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([in] double FixedLen);
        [id(0x00000626), propget, helpstring("Specifies the text suffix for all applicable linear dimension when change to sub-units")]
        HRESULT SubUnitsSuffix([out, retval] BSTR* suffix);
        [id(0x00000626), propput, helpstring("Specifies the text suffix for all applicable linear dimension when change to sub-units")]
        HRESULT SubUnitsSuffix([in] BSTR suffix);
        [id(0x00000627), propget, helpstring("Specifies the sub-units scale factor for all applicable linear dimension")]
        HRESULT SubUnitsFactor([out, retval] double* factor);
        [id(0x00000627), propput, helpstring("Specifies the sub-units scale factor for all applicable linear dimension")]
        HRESULT SubUnitsFactor([in] double factor);
        [id(0x00000628), propget, helpstring("Specifies the text suffix for the alternate dimension when change to alternate sub-units")]
        HRESULT AltSubUnitsSuffix([out, retval] BSTR* suffix);
        [id(0x00000628), propput, helpstring("Specifies the text suffix for the alternate dimension when change to alternate sub-units")]
        HRESULT AltSubUnitsSuffix([in] BSTR suffix);
        [id(0x00000629), propget, helpstring("Specifies the alternate sub-units scale factor for all applicable linear dimension")]
        HRESULT AltSubUnitsFactor([out, retval] double* factor);
        [id(0x00000629), propput, helpstring("Specifies the alternate sub-units scale factor for all applicable linear dimension")]
        HRESULT AltSubUnitsFactor([in] double factor);
    };

    [
      odl,
      uuid(8E5DF017-28B1-459E-92A4-579EE2BDE09F),
      helpstring("TeighaX Interface of a dimension measuring the radius of a circle or arc"),
      dual,
      oleautomation
    ]
    interface IAcadDimRadial : IAcadDimension {
        [id(0x0000002a), propput, helpstring("Specifies the length of the leader used with the radial dimension.")]
        HRESULT LeaderLength([in] double rhs);
        [id(0x00000003), propget, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([out, retval] VARIANT_BOOL* bAlternate);
        [id(0x00000003), propput, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([in] VARIANT_BOOL bAlternate);
        [id(0x00000004), propget, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000004), propput, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([in] AcDimPrecision precision);
        [id(0x00000005), propget, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([out, retval] ACAD_NOUNITS* scale);
        [id(0x00000005), propput, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([in] ACAD_NOUNITS scale);
        [id(0x00000006), propget, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([out, retval] double* Distance);
        [id(0x00000006), propput, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([in] double Distance);
        [id(0x00000007), propget, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([out, retval] AcDimPrecision* Distance);
        [id(0x00000007), propput, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([in] AcDimPrecision Distance);
        [id(0x00000009), propget, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([out, retval] AcDimUnits* Units);
        [id(0x00000009), propput, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([in] AcDimUnits Units);
        [id(0x0000000b), propget, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([out, retval] BSTR* prefix);
        [id(0x0000000b), propput, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([in] BSTR prefix);
        [id(0x0000000c), propget, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([out, retval] BSTR* prefix);
        [id(0x0000000c), propput, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([in] BSTR prefix);
        [id(0x0000002b), propget, helpstring("Specifies or returns the type of center mark used for radial dimensions.")]
        HRESULT CenterType([out, retval] AcDimCenterType* Type);
        [id(0x0000002b), propput, helpstring("Specifies or returns the type of center mark used for radial dimensions.")]
        HRESULT CenterType([in] AcDimCenterType Type);
        [id(0x0000002c), propget, helpstring("Specifies or returns the size of the center mark used for radial dimensions.")]
        HRESULT CenterMarkSize([out, retval] double* Type);
        [id(0x0000002c), propput, helpstring("Specifies or returns the size of the center mark used for radial dimensions.")]
        HRESULT CenterMarkSize([in] double Type);
        [id(0x0000000d), propget, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000f), propget, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([out, retval] AcDimPrecision* Prec);
        [id(0x0000000f), propput, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([in] AcDimPrecision Prec);
        [id(0x00000013), propget, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([out, retval] AcDimFractionType* Type);
        [id(0x00000013), propput, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([in] AcDimFractionType Type);
        [id(0x00000012), propget, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([out, retval] AcDimFit* fittype);
        [id(0x00000012), propput, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([in] AcDimFit fittype);
        [id(0x00000015), propget, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([out, retval] ACAD_NOUNITS* Type);
        [id(0x00000015), propput, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([in] ACAD_NOUNITS Type);
        [id(0x00000016), propget, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([out, retval] AcDimLUnits* format);
        [id(0x00000016), propput, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([in] AcDimLUnits format);
        [id(0x00000018), propget, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([out, retval] double* Distance);
        [id(0x00000018), propput, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([in] double Distance);
        [id(0x0000001a), propget, helpstring("Specifies or returns whether the dimension line displays for radial dimensions.")]
        HRESULT DimLineSuppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001a), propput, helpstring("Specifies or returns whether the dimension line displays for radial dimensions.")]
        HRESULT DimLineSuppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([in] VARIANT_BOOL bInside);
        [id(0x00000020), propget, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000020), propput, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([in] VARIANT_BOOL bInside);
        [id(0x00000021), propget, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000021), propput, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([in] VARIANT_BOOL bInside);
        [id(0x00000030), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000030), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000031), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000031), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000032), propget, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000032), propput, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000033), propget, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000033), propput, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000034), propget, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000034), propput, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000035), propget, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000035), propput, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000036), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000036), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000037), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000037), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000038), propget, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000038), propput, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000039), propget, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000039), propput, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003a), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003a), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x0000003b), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003b), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003c), propget, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000003c), propput, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x0000003f), propget, helpstring("Specifies or returns the arrowhead of the dimension line for radial dimensions.")]
        HRESULT ArrowheadType([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003f), propput, helpstring("Specifies or returns the arrowhead of the dimension line for radial dimensions.")]
        HRESULT ArrowheadType([in] AcDimArrowheadType Type);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] double* bVal);
        [id(0x00000042), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the dimension line for radial dimensions.")]
        HRESULT ArrowheadBlock([out, retval] BSTR* BlockName);
        [id(0x00000042), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the dimension line for radial dimensions.")]
        HRESULT ArrowheadBlock([in] BSTR BlockName);
        [id(0x00000050), propget, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([out, retval] BSTR* Linetype);
        [id(0x00000050), propput, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([in] BSTR Linetype);
        [id(0x00000055), propget, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([out, retval] VARIANT_BOOL* bIsDynamic);
        [id(0x00000055), propput, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([in] VARIANT_BOOL bIsDynamic);
        [id(0x00000056), propget, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([out, retval] VARIANT_BOOL* bIsReference);
        [id(0x00000056), propput, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([in] VARIANT_BOOL bIsReference);
        [id(0x00000057), propget, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([out, retval] BSTR* bstrName);
        [id(0x00000057), propput, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([in] BSTR bstrName);
        [id(0x00000058), propget, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([out, retval] BSTR* bstrExpression);
        [id(0x00000058), propput, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([in] BSTR bstrExpression);
        [id(0x00000059), propget, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([out, retval] BSTR* Value);
        [id(0x00000059), propput, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([in] BSTR Value);
        [id(0x0000005a), propget, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([out, retval] BSTR* bstrDescription);
        [id(0x0000005a), propput, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([in] BSTR bstrDescription);
    };

    [
      odl,
      uuid(A1C6B178-FA1B-43DA-9F73-8A4D1420FA95),
      helpstring("TeighaX Interface of an elliptical arc or complete ellipse entity"),
      dual,
      oleautomation
    ]
    interface IAcadEllipse : IAcadEntity {
        [id(0x00000001), propget, helpstring("Returns the x, y, and z coordinates of an ellipse's start point.")]
        HRESULT StartPoint([out, retval] VARIANT* StartPoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the x, y, and z coordinates of an ellipse's center point.")]
        HRESULT Center([out, retval] VARIANT* Center);
        [id(0x00000002), propput, helpstring("Specifies or returns the x, y, and z coordinates of an ellipse's center point.")]
        HRESULT Center([in] VARIANT Center);
        [id(0x00000003), propget, helpstring("Returns the x, y, and z coordinates of an ellipse's end point.")]
        HRESULT EndPoint([out, retval] VARIANT* EndPoint);
        [id(0x00000004), propget, helpstring("Specifies or returns the radius of the longer axis of an ellipse.")]
        HRESULT MajorRadius([out, retval] double* MajorRadius);
        [id(0x00000004), propput, helpstring("Specifies or returns the radius of the longer axis of an ellipse.")]
        HRESULT MajorRadius([in] double MajorRadius);
        [id(0x00000005), propget, helpstring("Specifies or returns the radius of the smaller axis of an ellipse.")]
        HRESULT MinorRadius([out, retval] double* MinorRadius);
        [id(0x00000005), propput, helpstring("Specifies or returns the radius of the smaller axis of an ellipse.")]
        HRESULT MinorRadius([in] double MinorRadius);
        [id(0x00000006), propget, helpstring("Specifies or returns the ratio of the ellipse's major axis length to the minor axis length.")]
        HRESULT RadiusRatio([out, retval] double* RadiusRatio);
        [id(0x00000006), propput, helpstring("Specifies or returns the ratio of the ellipse's major axis length to the minor axis length.")]
        HRESULT RadiusRatio([in] double RadiusRatio);
        [id(0x00000007), propget, helpstring("Specifies or returns the start angle of an ellipse.")]
        HRESULT StartAngle([out, retval] ACAD_ANGLE* StartAngle);
        [id(0x00000007), propput, helpstring("Specifies or returns the start angle of an ellipse.")]
        HRESULT StartAngle([in] ACAD_ANGLE StartAngle);
        [id(0x00000008), propget, helpstring("Specifies or returns the end angle of an ellipse.")]
        HRESULT EndAngle([out, retval] ACAD_ANGLE* EndAngle);
        [id(0x00000008), propput, helpstring("Specifies or returns the end angle of an ellipse.")]
        HRESULT EndAngle([in] ACAD_ANGLE EndAngle);
        [id(0x00000009), propget, helpstring("Specifies or returns the start parameter of an ellipse.")]
        HRESULT StartParameter([out, retval] double* StartParameter);
        [id(0x00000009), propput, helpstring("Specifies or returns the start parameter of an ellipse.")]
        HRESULT StartParameter([in] double StartParameter);
        [id(0x0000000a), propget, helpstring("Specifies or returns the end parameter of an ellipse.")]
        HRESULT EndParameter([out, retval] double* EndParameter);
        [id(0x0000000a), propput, helpstring("Specifies or returns the end parameter of an ellipse.")]
        HRESULT EndParameter([in] double EndParameter);
        [id(0x0000000b), propget, helpstring("Specifies or returns the length of the longer axis of an ellipse.")]
        HRESULT MajorAxis([out, retval] VARIANT* MajorAxis);
        [id(0x0000000b), propput, helpstring("Specifies or returns the length of the longer axis of an ellipse.")]
        HRESULT MajorAxis([in] VARIANT MajorAxis);
        [id(0x0000000c), propget, helpstring("Returns the length of the shorter axis of an ellipse.")]
        HRESULT MinorAxis([out, retval] VARIANT* MinorAxis);
        [id(0x0000000d), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x0000000d), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x0000000e), propget, helpstring("Returns the area of an ellipse.")]
        HRESULT Area([out, retval] double* Area);
        [id(0x0000000f), helpstring("Not implemented. Creates a new ellipse at a specified distance from an original ellipse.")]
        HRESULT Offset(
                        [in] double Distance, 
                        [out, retval] VARIANT* pOffsetCurves);
    };

    
    
        
        
        
        
    

    [
      odl,
      uuid(DDA71310-AA63-4624-BDAD-0E622530EFE0),
      helpstring("TeighaX Interface of an object composed of an arrowhead attached to splines or straight line segments"),
      dual,
      oleautomation
    ]
    interface IAcadLeader : IAcadEntity {
        [id(0x00000040), propget, helpstring("Specifies or returns the vertices of a leader.")]
        HRESULT Coordinates([out, retval] VARIANT* Coordinates);
        [id(0x00000040), propput, helpstring("Specifies or returns the vertices of a leader.")]
        HRESULT Coordinates([in] VARIANT Coordinates);
        [id(0x00000601), propget, helpstring("Specifies the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000606), propget, helpstring("Specifies or returns the style of a leader.")]
        HRESULT StyleName([out, retval] BSTR* bstrName);
        [id(0x00000606), propput, helpstring("Specifies or returns the style of a leader.")]
        HRESULT StyleName([in] BSTR bstrName);
        [id(0x00000041), propget, helpstring("Specifies or returns the type of a leader.")]
        HRESULT Type([out, retval] AcLeaderType* Type);
        [id(0x00000041), propput, helpstring("Specifies or returns the type of a leader.")]
        HRESULT Type([in] AcLeaderType Type);
        [id(0x00000042), helpstring("Evaluates and updates a leader and its associated entity and annotation.")]
        HRESULT Evaluate();
        [id(0x00000043), propget, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000043), propput, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
        [id(0x00000044), propget, helpstring("Specifies or returns the annotation of a leader.")]
        HRESULT Annotation([out, retval] IAcadEntity** pVal);
        [id(0x00000044), propput, helpstring("Specifies or returns the annotation of a leader.")]
        HRESULT Annotation([in] IAcadEntity* pVal);
        [id(0x00000607), propget, helpstring("Specifies or returns the arrowhead size of a leader.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x00000607), propput, helpstring("Specifies or returns the arrowhead size of a leader.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x00000045), propget, helpstring("Specifies or returns the arrowhead type of a leader.")]
        HRESULT ArrowheadType([out, retval] AcDimArrowheadType* Type);
        [id(0x00000045), propput, helpstring("Specifies or returns the arrowhead type of a leader.")]
        HRESULT ArrowheadType([in] AcDimArrowheadType Type);
        [id(0x0000000d), propget, helpstring("Specifies or returns the line color of a leader.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the line color of a leader.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000060e), propget, helpstring("Specifies or returns the lineweight of a leader.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000060e), propput, helpstring("Specifies or returns the lineweight of a leader.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x00000611), propget, helpstring("Specifies or returns the scale of a leader.")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* factor);
        [id(0x00000611), propput, helpstring("Specifies or returns the scale of a leader.")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS factor);
        [id(0x00000612), propget, helpstring("Specifies or returns the vertical placement of a leader annotation.")]
        HRESULT VerticalTextPosition([out, retval] AcDimVerticalJustification* Type);
        [id(0x00000612), propput, helpstring("Specifies or returns the vertical placement of a leader annotation.")]
        HRESULT VerticalTextPosition([in] AcDimVerticalJustification Type);
        [id(0x0000060d), propget, helpstring("Specifies or returns the distance between the leader and the annotation.")]
        HRESULT TextGap([out, retval] double* Offset);
        [id(0x0000060d), propput, helpstring("Specifies or returns the distance between the leader and the annotation.")]
        HRESULT TextGap([in] double Offset);
        [id(0x00000046), propget, helpstring("Specifies or returns the block used for a custom arrowhead of a leader.")]
        HRESULT ArrowheadBlock([out, retval] BSTR* BlockName);
        [id(0x00000046), propput, helpstring("Specifies or returns the block used for a custom arrowhead of a leader.")]
        HRESULT ArrowheadBlock([in] BSTR BlockName);
    };

    [
      odl,
      uuid(10A535E6-7ACE-4B0D-B045-6550A99D4D69),
      helpstring("TeighaX Interface of a paragraph of alphanumeric characters that fits within a nonprinting text boundary"),
      dual,
      oleautomation
    ]
    interface IAcadMText : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the characters of multline text.")]
        HRESULT TextString([out, retval] BSTR* bstrText);
        [id(0x00000001), propput, helpstring("Specifies or returns the characters of multline text.")]
        HRESULT TextString([in] BSTR bstrText);
        [id(0x00000002), propget, helpstring("Specifies or returns the style name of multiline text.")]
        HRESULT StyleName([out, retval] BSTR* bstrName);
        [id(0x00000002), propput, helpstring("Specifies or returns the style name of multiline text.")]
        HRESULT StyleName([in] BSTR bstrName);
        [id(0x00000003), propget, helpstring("Specifies or returns the position of multline text in relation to the insertion point.")]
        HRESULT AttachmentPoint([out, retval] AcAttachmentPoint* attPoint);
        [id(0x00000003), propput, helpstring("Specifies or returns the position of multline text in relation to the insertion point.")]
        HRESULT AttachmentPoint([in] AcAttachmentPoint attPoint);
        [id(0x00000004), propget, helpstring("Specifies or returns the direction in which the characters of multiline text display.")]
        HRESULT DrawingDirection([out, retval] AcDrawingDirection* drawDir);
        [id(0x00000004), propput, helpstring("Specifies or returns the direction in which the characters of multiline text display.")]
        HRESULT DrawingDirection([in] AcDrawingDirection drawDir);
        [id(0x00000005), propget, helpstring("Specifies or returns the width of multiline text.")]
        HRESULT Width([out, retval] double* Width);
        [id(0x00000005), propput, helpstring("Specifies or returns the width of multiline text.")]
        HRESULT Width([in] double Width);
        [id(0x00000006), propget, helpstring("Specifies or returns the height of multiline text.")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000006), propput, helpstring("Specifies or returns the height of multiline text.")]
        HRESULT Height([in] double Height);
        [id(0x00000007), propget, helpstring("Specifies or returns the rotation angle of multiline text.")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000007), propput, helpstring("Specifies or returns the rotation angle of multiline text.")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000008), propget, helpstring("Specifies or returns the x, y, and z coordinates of the attribute text insertion point.")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x00000008), propput, helpstring("Specifies or returns the x, y, and z coordinates of the attribute text insertion point.")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x00000009), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000009), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x0000000a), propget, helpstring("Specifies or returns the line spacing factor of multiline text.")]
        HRESULT LineSpacingFactor([out, retval] double* factor);
        [id(0x0000000a), propput, helpstring("Specifies or returns the line spacing factor of multiline text.")]
        HRESULT LineSpacingFactor([in] double factor);
        [id(0x0000000b), propget, helpstring("Specifies or returns the line spacing style of multiline text.")]
        HRESULT LineSpacingStyle([out, retval] AcLineSpacingStyle* style);
        [id(0x0000000b), propput, helpstring("Specifies or returns the line spacing style of multiline text.")]
        HRESULT LineSpacingStyle([in] AcLineSpacingStyle style);
        [id(0x0000000c), propget, helpstring("Specifies or returns the distance between lines of multiline text.")]
        HRESULT LineSpacingDistance([out, retval] double* Value);
        [id(0x0000000c), propput, helpstring("Specifies or returns the distance between lines of multiline text.")]
        HRESULT LineSpacingDistance([in] double Value);
        [id(0x0000000d), propget, helpstring("Specifies or returns whether the multiline text is filled with a background.")]
        HRESULT BackgroundFill([out, retval] VARIANT_BOOL* bUseBackgroundFill);
        [id(0x0000000d), propput, helpstring("Specifies or returns whether the multiline text is filled with a background.")]
        HRESULT BackgroundFill([in] VARIANT_BOOL bUseBackgroundFill);
        [id(0x0000000e), helpstring("Returns the characters and field codes of multiline text.")]
        HRESULT FieldCode([out, retval] BSTR* bstrText);
    };

    
    
        
        
        
        
        
        
        
        
        
    

    
    
        
        
    

    [
      odl,
      uuid(A16EF6B5-5B37-4AC3-B7AD-244A5A394597),
      helpstring("TeighaX Interface of a point marker appearing as a dot, square, circle, X, tick, or plus sign (+); or as a combination of these"),
      dual,
      oleautomation
    ]
    interface IAcadPoint : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the current vertex of a point.")]
        HRESULT Coordinates([out, retval] VARIANT* Coordinates);
        [id(0x00000001), propput, helpstring("Specifies or returns the current vertex of a point.")]
        HRESULT Coordinates([in] VARIANT Coordinates);
        [id(0x00000002), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000002), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000003), propget, helpstring("Specifies or returns the thickness (z-direction value) of a point.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000003), propput, helpstring("Specifies or returns the thickness (z-direction value) of a point.")]
        HRESULT Thickness([in] double Thickness);
    };

    [
      odl,
      uuid(312389D6-A340-4A08-9495-B77862C21302),
      helpstring("TeighaX Interface of 2D line with adjustable width composed of line and arc segments entity"),
      dual,
      oleautomation
    ]
    interface IAcadLWPolyline : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the current vertex of a lightweight polyline.")]
        HRESULT Coordinates([out, retval] VARIANT* Coordinates);
        [id(0x00000001), propput, helpstring("Specifies or returns the current vertex of a lightweight polyline.")]
        HRESULT Coordinates([in] VARIANT Coordinates);
        [id(0x00000002), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000002), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000003), propget, helpstring("Specifies or returns the thickness (z-direction value) of a lightweight polyline.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000003), propput, helpstring("Specifies or returns the thickness (z-direction value) of a lightweight polyline.")]
        HRESULT Thickness([in] double Thickness);
        [id(0x00000004), helpstring("Creates and adds a new vertex to a lightweight polyline.")]
        HRESULT AddVertex(
                        [in] int Index, 
                        [in] VARIANT vertex);
        [id(0x00000005), helpstring("Explodes the lightweight polyline and returns the individual entities as an array of lines and arcs.")]
        HRESULT Explode([out, retval] VARIANT* pArrayObjs);
        [id(0x00000006), helpstring("Returns the bulge value for a vertex of a lightweight polyline.")]
        HRESULT GetBulge(
                        [in] int Index, 
                        [out, retval] double* bulge);
        [id(0x00000007), helpstring("Specifies the bulge value for a vertex of a lightweight polyline.")]
        HRESULT SetBulge(
                        [in] int Index, 
                        [in] double bulge);
        [id(0x00000008), helpstring("Returns the width for a segment of a lightweight polyline.")]
        HRESULT GetWidth(
                        [in] int Index, 
                        [out] double* StartWidth, 
                        [out] double* EndWidth);
        [id(0x00000009), helpstring("Specifies the width for a segment of a lightweight polyline.")]
        HRESULT SetWidth(
                        [in] int Index, 
                        [in] double StartWidth, 
                        [in] double EndWidth);
        [id(0x0000000a), propget, helpstring("Specifies or returns the width of the entire lightweight polyline.")]
        HRESULT ConstantWidth([out, retval] double* Width);
        [id(0x0000000a), propput, helpstring("Specifies or returns the width of the entire lightweight polyline.")]
        HRESULT ConstantWidth([in] double Width);
        [id(0x0000000b), helpstring("Not implemented. Creates a new lightweight polyline at a specified distance from an original lightweight polyline.")]
        HRESULT Offset(
                        [in] double Distance, 
                        [out, retval] VARIANT* pOffsetCurves);
        [id(0x0000000c), propget, helpstring("Specifies or returns the elevation of the lightweight polyline relative to the z-axis of the object's coordinate system.")]
        HRESULT Elevation([out, retval] double* Elevation);
        [id(0x0000000c), propput, helpstring("Specifies or returns the elevation of the lightweight polyline relative to the z-axis of the object's coordinate system.")]
        HRESULT Elevation([in] double Elevation);
        [id(0x0000000d), propget, helpstring("Returns the area encompassed by a lightweight polyline.")]
        HRESULT Area([out, retval] double* Area);
        [id(0x0000000e), propget, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000e), propput, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
        [id(0x0000000f), propget, helpstring("Specifies or returns whether a lightweight polyline is open or closed.")]
        HRESULT Closed([out, retval] VARIANT_BOOL* fClose);
        [id(0x0000000f), propput, helpstring("Specifies or returns whether a lightweight polyline is open or closed.")]
        HRESULT Closed([in] VARIANT_BOOL fClose);
        [id(0x00000010), propget, helpstring("Specifies or returns whether linetype generation is used for a lightweight polyline.")]
        HRESULT LinetypeGeneration([out, retval] VARIANT_BOOL* bLinetypeGen);
        [id(0x00000010), propput, helpstring("Specifies or returns whether linetype generation is used for a lightweight polyline.")]
        HRESULT LinetypeGeneration([in] VARIANT_BOOL bLinetypeGen);
        [id(0x00000011), propget, helpstring("Specifies the length of a lightweight polyline.")]
        HRESULT Length([out, retval] double* Length);
    };

    [
      odl,
      uuid(C59C0D9F-84DA-4F14-86AA-FC1986B9D32E),
      helpstring("TeighaX Interface of a 2D line of adjustable width or a 3D line or mesh of nonadjustable width composed of line and arc segments"),
      dual,
      oleautomation
    ]
    interface IAcadPolyline : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the current vertex of a polyline.")]
        HRESULT Coordinates([out, retval] VARIANT* Coordinates);
        [id(0x00000001), propput, helpstring("Specifies or returns the current vertex of a polyline.")]
        HRESULT Coordinates([in] VARIANT Coordinates);
        [id(0x00000002), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000002), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000003), propget, helpstring("Specifies or returns the thickness (z-direction value) of a polyline.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000003), propput, helpstring("Specifies or returns the thickness (z-direction value) of a polyline.")]
        HRESULT Thickness([in] double Thickness);
        [id(0x00000004), helpstring("Appends a new vertex to a polyline.")]
        HRESULT AppendVertex([in] VARIANT vertex);
        [id(0x00000005), helpstring("Explodes the polyline and returns the individual entities as an array of the object.")]
        HRESULT Explode([out, retval] VARIANT* pArrayObjs);
        [id(0x00000006), helpstring("Returns the bulge value for a vertex of a polyline.")]
        HRESULT GetBulge(
                        [in] int Index, 
                        [out, retval] double* bulge);
        [id(0x00000007), helpstring("Specifies the bulge value for a vertex of a polyline.")]
        HRESULT SetBulge(
                        [in] int Index, 
                        [in] double bulge);
        [id(0x00000008), helpstring("Returns the width for a segment of a polyline.")]
        HRESULT GetWidth(
                        [in] int Index, 
                        [out] double* StartWidth, 
                        double* EndWidth);
        [id(0x00000009), helpstring("Specifies the width for a segment of a polyline.")]
        HRESULT SetWidth(
                        [in] int Index, 
                        [in] double StartWidth, 
                        double EndWidth);
        [id(0x0000000a), propget, helpstring("Specifies or returns the width of the entire polyline.")]
        HRESULT ConstantWidth([out, retval] double* Width);
        [id(0x0000000a), propput, helpstring("Specifies or returns the width of the entire polyline.")]
        HRESULT ConstantWidth([in] double Width);
        [id(0x0000000b), helpstring("Not implemented. Creates a new polyline at a specified distance from an original lightweight polyline.")]
        HRESULT Offset(
                        [in] double Distance, 
                        [out, retval] VARIANT* pOffsetCurves);
        [id(0x0000000c), propget, helpstring("Specifies or returns the elevation of the polyline relative to the z-axis of the object's coordinate system.")]
        HRESULT Elevation([out, retval] double* Elevation);
        [id(0x0000000c), propput, helpstring("Specifies or returns the elevation of the polyline relative to the z-axis of the object's coordinate system.")]
        HRESULT Elevation([in] double Elevation);
        [id(0x0000000d), propget, helpstring("Specifies or returns the type of polyline.")]
        HRESULT Type([out, retval] AcPolylineType* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the type of polyline.")]
        HRESULT Type([in] AcPolylineType Type);
        [id(0x0000000e), propget, helpstring("Specifies or returns whether a polyline is open or closed.")]
        HRESULT Closed([out, retval] VARIANT_BOOL* fClose);
        [id(0x0000000e), propput, helpstring("Specifies or returns whether a polyline is open or closed.")]
        HRESULT Closed([in] VARIANT_BOOL fClose);
        [id(0x0000000f), propget, helpstring("Specifies or returns whether linetype generation is used for a polyline.")]
        HRESULT LinetypeGeneration([out, retval] VARIANT_BOOL* bLinetypeGen);
        [id(0x0000000f), propput, helpstring("Specifies or returns whether linetype generation is used for a polyline.")]
        HRESULT LinetypeGeneration([in] VARIANT_BOOL bLinetypeGen);
        [id(0x00000010), propget, helpstring("Specifies the area of a polyline.")]
        HRESULT Area([out, retval] double* Area);
        [id(0x00000011), propget, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000011), propput, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
        [id(0x00000012), propget, helpstring("Specifies the length of a polyline.")]
        HRESULT Length([out, retval] double* Length);
    };

    
    
        
        
        
        
    

    [
      odl,
      uuid(3F76D83B-B47F-4732-A4F5-A130A12828DA),
      helpstring("TeighaX Interface of a semi-infinite line entity"),
      dual,
      oleautomation
    ]
    interface IAcadRay : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the start point of a ray.")]
        HRESULT BasePoint([out, retval] VARIANT* BasePoint);
        [id(0x00000001), propput, helpstring("Specifies or returns the start point of a ray.")]
        HRESULT BasePoint([in] VARIANT BasePoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the second point of a ray.")]
        HRESULT SecondPoint([out, retval] VARIANT* SecondPoint);
        [id(0x00000002), propput, helpstring("Specifies or returns the second point of a ray.")]
        HRESULT SecondPoint([in] VARIANT SecondPoint);
        [id(0x00000003), propget, helpstring("Specifies or returns the direction vector of a ray.")]
        HRESULT DirectionVector([out, retval] VARIANT* dirVector);
        [id(0x00000003), propput, helpstring("Specifies or returns the direction vector of a ray.")]
        HRESULT DirectionVector([in] VARIANT dirVector);
    };

    [
      odl,
      uuid(519B1C67-3E5B-428F-A73C-2E0335FCB069),
      helpstring("TeighaX Interface of an object comprising lines, arcs, and circles defined in an SHX file"),
      dual,
      oleautomation
    ]
    interface IAcadShape : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the x, y, and z coordinates of the shape insertion point.")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x00000001), propput, helpstring("Specifies or returns the x, y, and z coordinates of the shape insertion point.")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the name of a shape.")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000002), propput, helpstring("Specifies or returns the name of a shape.")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000003), propget, helpstring("Specifies or returns the height of a shape.")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000003), propput, helpstring("Specifies or returns the height of a shape.")]
        HRESULT Height([in] double Height);
        [id(0x00000004), propget, helpstring("Specifies or returns the rotation angle of a shape.")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000004), propput, helpstring("Specifies or returns the rotation angle of a shape.")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000005), propget, helpstring("Specifies or returns the width scale factor of a shape.")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* scalFactor);
        [id(0x00000005), propput, helpstring("Specifies or returns the width scale factor of a shape.")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS scalFactor);
        [id(0x00000006), propget, helpstring("Specifies or returns the oblique angle of a shape.")]
        HRESULT ObliqueAngle([out, retval] ACAD_ANGLE* obliAngle);
        [id(0x00000006), propput, helpstring("Specifies or returns the oblique angle of a shape.")]
        HRESULT ObliqueAngle([in] ACAD_ANGLE obliAngle);
        [id(0x00000007), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000007), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000008), propget, helpstring("Specifies or returns the thickness (z-direction value) of a shape.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000008), propput, helpstring("Specifies or returns the thickness (z-direction value) of a shape.")]
        HRESULT Thickness([in] double Thickness);
    };

    [
      odl,
      uuid(35D1A36A-1EAD-4112-B833-EEC35B037F9F),
      helpstring("TeighaX Interface of a solid-filled polygon entity"),
      dual,
      oleautomation
    ]
    interface IAcadSolid : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the current vertex of a solid.")]
        HRESULT Coordinates([out, retval] VARIANT* corners);
        [id(0x00000001), propput, helpstring("Specifies or returns the current vertex of a solid.")]
        HRESULT Coordinates([in] VARIANT corners);
        [id(0x00000002), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000002), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000003), propget, helpstring("Specifies or returns the thickness (z-direction value) of a solid.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000003), propput, helpstring("Specifies or returns the thickness (z-direction value) of a solid.")]
        HRESULT Thickness([in] double Thickness);
        [id(0x00000004), propget, helpstring("Specifies or returns the coordinates of a single vertex in a solid.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000004), propput, helpstring("Specifies or returns the coordinates of a single vertex in a solid.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
    };

    [
      odl,
      uuid(28960FAD-CDD3-4FA2-992E-3351D4238FEB),
      helpstring("TeighaX Interface of a quadratic or cubic NURBS (nonuniform rational B-spline) curve entity"),
      dual,
      oleautomation
    ]
    interface IAcadSpline : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the number of control points defined for a spline.")]
        HRESULT NumberOfControlPoints([out, retval] long* numCtrlPoints);
        [id(0x00000002), propget, helpstring("Specifies or returns the number of control points defined for a spline.")]
        HRESULT ControlPoints([out, retval] VARIANT* controlPoint);
        [id(0x00000002), propput, helpstring("Specifies or returns the number of control points defined for a spline.")]
        HRESULT ControlPoints([in] VARIANT controlPoint);
        [id(0x00000003), propget, helpstring("Specifies or returns the current control point of a spline.")]
        HRESULT NumberOfFitPoints([out, retval] long* numFitPoints);
        [id(0x00000004), propget, helpstring("Specifies or returns the current fit points of a spline.")]
        HRESULT FitPoints([out, retval] VARIANT* fitPoint);
        [id(0x00000004), propput, helpstring("Specifies or returns the current fit points of a spline.")]
        HRESULT FitPoints([in] VARIANT fitPoint);
        [id(0x00000005), propget, helpstring("Returns the degree of a spline.")]
        HRESULT Degree([out, retval] long* Degree);
        [id(0x00000006), propget, helpstring("Returns whether a spline is closed.")]
        HRESULT Closed([out, retval] VARIANT_BOOL* fClose);
        [id(0x00000007), propget, helpstring("Returns whether a spline is planar.")]
        HRESULT IsPlanar([out, retval] VARIANT_BOOL* fPlanar);
        [id(0x00000008), propget, helpstring("Returns whether a spline is rational.")]
        HRESULT IsRational([out, retval] VARIANT_BOOL* fRational);
        [id(0x00000009), propget, helpstring("Returns whether a spline is periodic.")]
        HRESULT IsPeriodic([out, retval] VARIANT_BOOL* fPeriodic);
        [id(0x0000000a), propget, helpstring("Specifies or returns the x, y, z coordinate for the start tangent of a spline.")]
        HRESULT StartTangent([out, retval] VARIANT* StartTangent);
        [id(0x0000000a), propput, helpstring("Specifies or returns the x, y, z coordinate for the start tangent of a spline.")]
        HRESULT StartTangent([in] VARIANT StartTangent);
        [id(0x0000000b), propget, helpstring("Specifies or returns the x, y, z coordinate for the end tangent of a spline.")]
        HRESULT EndTangent([out, retval] VARIANT* EndTangent);
        [id(0x0000000b), propput, helpstring("Specifies or returns the x, y, z coordinate for the end tangent of a spline.")]
        HRESULT EndTangent([in] VARIANT EndTangent);
        [id(0x0000000c), propget, helpstring("Specifies or returns the fit tolerance of a spline.")]
        HRESULT FitTolerance([out, retval] double* fitTol);
        [id(0x0000000c), propput, helpstring("Specifies or returns the fit tolerance of a spline.")]
        HRESULT FitTolerance([in] double fitTol);
        [id(0x0000000d), propget, helpstring("Not implemented. Returns the area of a spline.")]
        HRESULT Area([out, retval] double* Area);
        [id(0x0000000e), helpstring("Specifies the coordinates for a control point of a spline.")]
        HRESULT SetControlPoint(
                        [in] int Index, 
                        [in] VARIANT controlPoint);
        [id(0x0000000f), helpstring("Returns the coordinates for a control point of a spline.")]
        HRESULT GetControlPoint(
                        [in] int Index, 
                        [out, retval] VARIANT* controlPoint);
        [id(0x00000010), helpstring("Specifies the fit point of a spline.")]
        HRESULT SetFitPoint(
                        [in] int Index, 
                        [in] VARIANT fitPoint);
        [id(0x00000011), helpstring("Returns the fit point of a spline.")]
        HRESULT GetFitPoint(
                        [in] int Index, 
                        [out, retval] VARIANT* fitPoint);
        [id(0x00000012), helpstring("Specifies the weight of a spline.")]
        HRESULT SetWeight(
                        [in] int Index, 
                        [in] double weight);
        [id(0x00000013), helpstring("Returns the weight of a spline.")]
        HRESULT GetWeight(
                        [in] int Index, 
                        [out, retval] double* weight);
        [id(0x00000014), helpstring("Adds a fit point to a spline.")]
        HRESULT AddFitPoint(
                        [in] int Index, 
                        [in] VARIANT fitPoint);
        [id(0x00000015), helpstring("Deletes a fit point from a spline.")]
        HRESULT DeleteFitPoint([in] int Index);
        [id(0x00000016), helpstring("Not implemented. Increases the order of a spline.")]
        HRESULT ElevateOrder([in] int Order);
        [id(0x00000017), helpstring("Not implemented. Creates a new spline at a specified distance from an original spline.")]
        HRESULT Offset(
                        [in] double Distance, 
                        [out, retval] VARIANT* pOffsetCurves);
        [id(0x00000018), helpstring("Removes the fit data of a spline.")]
        HRESULT PurgeFitData();
        [id(0x00000019), helpstring("Reverses the direction of a spline.")]
        HRESULT Reverse();
        [id(0x0000001a), propget, helpstring("Specifies or returns the knot vector of a spline.")]
        HRESULT Knots([out, retval] VARIANT* KnotValues);
        [id(0x0000001a), propput, helpstring("Specifies or returns the knot vector of a spline.")]
        HRESULT Knots([in] VARIANT KnotValues);
        [id(0x0000001b), propget, helpstring("Specifies or returns the weight vector of a spline.")]
        HRESULT Weights([out, retval] VARIANT* WeightValues);
        [id(0x0000001b), propput, helpstring("Specifies or returns the weight vector of a spline.")]
        HRESULT Weights([in] VARIANT WeightValues);
    };

    [
      odl,
      uuid(5750A4E3-B3CE-4A1C-A228-EB0C12EEDC5E),
      helpstring("TeighaX Interface of a single line of alphanumeric characters"),
      dual,
      oleautomation
    ]
    interface IAcadText : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies the text string of the text")]
        HRESULT TextString([out, retval] BSTR* bstrText);
        [id(0x00000001), propput, helpstring("Specifies the text string of the text")]
        HRESULT TextString([in] BSTR bstrText);
        [id(0x00000002), propget, helpstring("Specifies the style name of the text")]
        HRESULT StyleName([out, retval] BSTR* bstrName);
        [id(0x00000002), propput, helpstring("Specifies the style name of the text")]
        HRESULT StyleName([in] BSTR bstrName);
        [id(0x00000003), propget, helpstring("Specifies both text height and text orientation by designating the endpoints of the baseline")]
        HRESULT Alignment([out, retval] AcAlignment* align);
        [id(0x00000003), propput, helpstring("Specifies both text height and text orientation by designating the endpoints of the baseline")]
        HRESULT Alignment([in] AcAlignment align);
        [id(0x00000004), propget, hidden, helpstring("Specifies the horizontal alignment of the text")]
        HRESULT HorizontalAlignment([out, retval] AcHorizontalAlignment* horizAlign);
        [id(0x00000004), propput, hidden, helpstring("Specifies the horizontal alignment of the text")]
        HRESULT HorizontalAlignment([in] AcHorizontalAlignment horizAlign);
        [id(0x00000005), propget, hidden, helpstring("Specifies the vertical alignment of the text")]
        HRESULT VerticalAlignment([out, retval] AcVerticalAlignment* vertiAlign);
        [id(0x00000005), propput, hidden, helpstring("Specifies the vertical alignment of the text")]
        HRESULT VerticalAlignment([in] AcVerticalAlignment vertiAlign);
        [id(0x00000006), propget, helpstring("Specifies the height of the text")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000006), propput, helpstring("Specifies the height of the text")]
        HRESULT Height([in] double Height);
        [id(0x00000007), propget, helpstring("Specifies the rotation angle of the text")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000007), propput, helpstring("Specifies the rotation angle of the text")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000008), propget, helpstring("Specifies the width scale factor of the text")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* scalFactor);
        [id(0x00000008), propput, helpstring("Specifies the width scale factor of the text")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS scalFactor);
        [id(0x00000009), propget, helpstring("Specifies the oblique angle of the text")]
        HRESULT ObliqueAngle([out, retval] ACAD_ANGLE* obliAngle);
        [id(0x00000009), propput, helpstring("Specifies the oblique angle of the text")]
        HRESULT ObliqueAngle([in] ACAD_ANGLE obliAngle);
        [id(0x0000000a), propget, helpstring("Specify the X, Y, Z coordinate of the alignment point of the text")]
        HRESULT TextAlignmentPoint([out, retval] VARIANT* alignPoint);
        [id(0x0000000a), propput, helpstring("Specify the X, Y, Z coordinate of the alignment point of the text")]
        HRESULT TextAlignmentPoint([in] VARIANT alignPoint);
        [id(0x0000000b), propget, helpstring("Specify the X, Y, Z coordinate of the insertion point of the text")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x0000000b), propput, helpstring("Specify the X, Y, Z coordinate of the insertion point of the text")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x0000000c), propget, helpstring("Specifies the three-dimensional normal unit vector for the entity")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x0000000c), propput, helpstring("Specifies the three-dimensional normal unit vector for the entity")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x0000000d), propget, helpstring("Specifies the attribute text generation flag")]
        HRESULT TextGenerationFlag([out, retval] long* textGenFlag);
        [id(0x0000000d), propput, helpstring("Specifies the attribute text generation flag")]
        HRESULT TextGenerationFlag([in] long textGenFlag);
        [id(0x0000000e), propget, helpstring("Specifies the thickness (z-direction value) of the text")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x0000000e), propput, helpstring("Specifies the thickness (z-direction value) of the text")]
        HRESULT Thickness([in] double Thickness);
        [id(0x0000000f), propget, helpstring("Determines whether the text is upside down or not")]
        HRESULT UpsideDown([out, retval] VARIANT_BOOL* UpsideDown);
        [id(0x0000000f), propput, helpstring("Determines whether the text is upside down or not")]
        HRESULT UpsideDown([in] VARIANT_BOOL UpsideDown);
        [id(0x00000010), propget, helpstring("Determines whether the text is backward or not")]
        HRESULT Backward([out, retval] VARIANT_BOOL* Backward);
        [id(0x00000010), propput, helpstring("Determines whether the text is backward or not")]
        HRESULT Backward([in] VARIANT_BOOL Backward);
        [id(0x00000011), helpstring("Returns the text string with field codes of the text")]
        HRESULT FieldCode([out, retval] BSTR* bstrText);
    };

    [
      odl,
      uuid(CCE6DA3B-2705-4042-B95E-7D500979BF87),
      helpstring("TeighaX Interface of a geometric tolerance contained in a feature control frame"),
      dual,
      oleautomation
    ]
    interface IAcadTolerance : IAcadEntity {
        [id(0x00000050), propget, helpstring("Specifies the direction for the ray, tolerance, or xline through a vector")]
        HRESULT DirectionVector([out, retval] VARIANT* dirVector);
        [id(0x00000050), propput, helpstring("Specifies the direction for the ray, tolerance, or xline through a vector")]
        HRESULT DirectionVector([in] VARIANT dirVector);
        [id(0x00000051), propget, helpstring("Specify the X, Y, Z coordinate for insertion point of the tolerance")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x00000051), propput, helpstring("Specify the X, Y, Z coordinate for insertion point of the tolerance")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x00000052), propget, helpstring("Specifies the three-dimensional normal unit vector for the entity")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000052), propput, helpstring("Specifies the three-dimensional normal unit vector for the entity")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000606), propget, helpstring("Specifies the style name of the tolerance")]
        HRESULT StyleName([out, retval] BSTR* bstrName);
        [id(0x00000606), propput, helpstring("Specifies the style name of the tolerance")]
        HRESULT StyleName([in] BSTR bstrName);
        [id(0x0000060a), propget, helpstring("Specifies the color of the dimension text")]
        HRESULT TextColor([out, retval] ACAD_COLOR* color);
        [id(0x0000060a), propput, helpstring("Specifies the color of the dimension text")]
        HRESULT TextColor([in] ACAD_COLOR color);
        [id(0x00000605), propget, helpstring("Specifies the text string of the tolerance")]
        HRESULT TextString([out, retval] BSTR* bstrText);
        [id(0x00000605), propput, helpstring("Specifies the text string of the tolerance")]
        HRESULT TextString([in] BSTR bstrText);
        [id(0x0000061a), propget, helpstring("Specifies the text style of the tolerance")]
        HRESULT TextStyle([out, retval] BSTR* style);
        [id(0x0000061a), propput, helpstring("Specifies the text style of the tolerance")]
        HRESULT TextStyle([in] BSTR style);
        [id(0x0000061b), propget, helpstring("Specifies the text height of the tolerance")]
        HRESULT TextHeight([out, retval] double* Height);
        [id(0x0000061b), propput, helpstring("Specifies the text height of the tolerance")]
        HRESULT TextHeight([in] double Height);
        [id(0x00000611), propget, helpstring("Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* factor);
        [id(0x00000611), propput, helpstring("Specifies the overall scale factor applied to properties that specify sizes, distances, or offsets")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS factor);
        [id(0x0000000d), propget, helpstring("Specifies the color of the dimension lines")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies the color of the dimension lines")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
    };

    [
      odl,
      uuid(70C16BEE-E89A-4268-B1F3-4B1382947A8C),
      helpstring("TeighaX Interface of a 2D solid line of specified width"),
      dual,
      oleautomation
    ]
    interface IAcadTrace : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies the coordinates of the trace")]
        HRESULT Coordinates([out, retval] VARIANT* corners);
        [id(0x00000001), propput, helpstring("Specifies the coordinates of the trace")]
        HRESULT Coordinates([in] VARIANT corners);
        [id(0x00000002), propget, helpstring("Specifies the three-dimensional normal unit vector for the entity")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000002), propput, helpstring("Specifies the three-dimensional normal unit vector for the entity")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000003), propget, helpstring("Specifies the thickness (z-direction value) of the trace")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000003), propput, helpstring("Specifies the thickness (z-direction value) of the trace")]
        HRESULT Thickness([in] double Thickness);
        [id(0x00000004), propget, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000004), propput, helpstring("Specifies or returns the coordinate of a single vertex in an object.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
    };

    [
      odl,
      uuid(96E6E07B-2A57-40A0-BB38-5BE33BCBD414),
      helpstring("TeighaX Interface of a construction line that is infinite in both directions"),
      dual,
      oleautomation
    ]
    interface IAcadXline : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specify the X, Y, Z coordinate for the base point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously")]
        HRESULT BasePoint([out, retval] VARIANT* BasePoint);
        [id(0x00000001), propput, helpstring("Specify the X, Y, Z coordinate for the base point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously")]
        HRESULT BasePoint([in] VARIANT BasePoint);
        [id(0x00000002), propget, helpstring("Specify the X, Y, Z coordinate for the second point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously")]
        HRESULT SecondPoint([out, retval] VARIANT* SecondPoint);
        [id(0x00000002), propput, helpstring("Specify the X, Y, Z coordinate for the second point of the Xline or use the Pick Point button to set X, Y, Z values simultaneously")]
        HRESULT SecondPoint([in] VARIANT SecondPoint);
        [id(0x00000003), propget, helpstring("Specify the X, Y, Z coordinate for the direction vector of the Xline")]
        HRESULT DirectionVector([out, retval] VARIANT* dirVector);
        [id(0x00000003), propput, helpstring("Specify the X, Y, Z coordinate for the direction vector of the Xline")]
        HRESULT DirectionVector([in] VARIANT dirVector);
        [id(0x00000004), helpstring("Creates a new entity object by offsetting the Xline by a specified distance")]
        HRESULT Offset(
                        [in] double Distance, 
                        [out, retval] VARIANT* pOffsetCurves);
    };

    [
      odl,
      uuid(84FD6023-A88C-4652-94F9-EEDAA3467250),
      helpstring("TeighaX Interface of an instance of a block definition inserted into a drawing"),
      dual,
      oleautomation
    ]
    interface IAcadBlockReference : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the x, y, z coordinates for the insertion point of a block or external reference.")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x00000001), propput, helpstring("Specifies or returns the x, y, z coordinates for the insertion point of a block or external reference.")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the name of a block or external reference.")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000002), propput, helpstring("Specifies or returns the name of a block or external reference.")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000003), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000003), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000004), propget, helpstring("Specifies or returns the rotation angle of a block or external reference.")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000004), propput, helpstring("Specifies or returns the rotation angle of a block or external reference.")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000005), propget, helpstring("Specifies or returns the XScale factor of a block or external reference.")]
        HRESULT XScaleFactor([out, retval] ACAD_NOUNITS* ScaleFactor);
        [id(0x00000005), propput, helpstring("Specifies or returns the XScale factor of a block or external reference.")]
        HRESULT XScaleFactor([in] ACAD_NOUNITS ScaleFactor);
        [id(0x00000006), propget, helpstring("Specifies or returns the YScale factor of a block or external reference.")]
        HRESULT YScaleFactor([out, retval] ACAD_NOUNITS* ScaleFactor);
        [id(0x00000006), propput, helpstring("Specifies or returns the YScale factor of a block or external reference.")]
        HRESULT YScaleFactor([in] ACAD_NOUNITS ScaleFactor);
        [id(0x00000007), propget, helpstring("Specifies or returns the ZScale factor of a block or external reference.")]
        HRESULT ZScaleFactor([out, retval] ACAD_NOUNITS* ScaleFactor);
        [id(0x00000007), propput, helpstring("Specifies or returns the ZScale factor of a block or external reference.")]
        HRESULT ZScaleFactor([in] ACAD_NOUNITS ScaleFactor);
        [id(0x00000008), helpstring("Explodes the block or external reference and returns the individual entities as an array of the object.")]
        HRESULT Explode([out, retval] VARIANT* pArrayObjs);
        [id(0x00000009), helpstring("Returns the attributes of a block or external reference.")]
        HRESULT GetAttributes([out, retval] VARIANT* pAttrObjs);
        [id(0x0000000a), helpstring("Returns the constant attributes of a block or external reference.")]
        HRESULT GetConstantAttributes([out, retval] VARIANT* pAttrObjs);
        [id(0x0000000b), propget, helpstring("Returns if a block or external reference has any attributes associated with it.")]
        HRESULT HasAttributes([out, retval] VARIANT_BOOL* bHas);
        [id(0x00000200), propget, helpstring("Returns the original name of a block reference.")]
        HRESULT EffectiveName([out, retval] BSTR* EffectiveName);
        [id(0x00000201), propget, helpstring("Returns if a block reference is dynamic.")]
        HRESULT IsDynamicBlock([out, retval] VARIANT_BOOL* pDynamicBlock);
        [id(0x00000202), helpstring("Returns the properties of a dynamic block reference.")]
        HRESULT GetDynamicBlockProperties([out, retval] VARIANT* dynamicPropertyArray);
        [id(0x00000203), helpstring("Changes a dynamic block reference to its original state.")]
        HRESULT ResetBlock();
        [id(0x00000204), helpstring("Converts a dynamic block reference to a regular block reference with no name.")]
        HRESULT ConvertToAnonymousBlock();
        [id(0x00000205), helpstring("Converts a dynamic block reference to a regular block reference with a name.")]
        HRESULT ConvertToStaticBlock([in] BSTR newBlockName);
        [id(0x00000206), propget, helpstring("Specifies or returns the effective XScale factor of a block or external reference.")]
        HRESULT XEffectiveScaleFactor([out, retval] ACAD_NOUNITS* ScaleFactor);
        [id(0x00000206), propput, helpstring("Specifies or returns the effective XScale factor of a block or external reference.")]
        HRESULT XEffectiveScaleFactor([in] ACAD_NOUNITS ScaleFactor);
        [id(0x00000207), propget, helpstring("Specifies or returns the effective YScale factor of a block or external reference.")]
        HRESULT YEffectiveScaleFactor([out, retval] ACAD_NOUNITS* ScaleFactor);
        [id(0x00000207), propput, helpstring("Specifies or returns the effective YScale factor of a block or external reference.")]
        HRESULT YEffectiveScaleFactor([in] ACAD_NOUNITS ScaleFactor);
        [id(0x00000208), propget, helpstring("Specifies or returns the effective ZScale factor of a block or external reference.")]
        HRESULT ZEffectiveScaleFactor([out, retval] ACAD_NOUNITS* ScaleFactor);
        [id(0x00000208), propput, helpstring("Specifies or returns the effective ZScale factor of a block or external reference.")]
        HRESULT ZEffectiveScaleFactor([in] ACAD_NOUNITS ScaleFactor);
        [id(0x00000209), propget, helpstring("Returns the insertion units of a block or external reference.")]
        HRESULT InsUnits([out, retval] BSTR* Units);
        [id(0x00000210), propget, helpstring("Returns the insertion units factor of a block or external reference.")]
        HRESULT InsUnitsFactor([out, retval] double* factor);
    };

    [
      odl,
      uuid(1208FD06-20AC-4938-A434-0940DFA0CD60),
      helpstring("TeighaX Interface of an area fill consisting of a pattern of lines"),
      dual,
      oleautomation
    ]
    interface IAcadHatch : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000001), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000002), propget, helpstring("Returns the number of loops in a hatch.")]
        HRESULT NumberOfLoops([out, retval] long* numLoops);
        [id(0x00000003), propget, helpstring("Returns the pattern type of a hatch.")]
        HRESULT PatternType([out, retval] AcPatternType* PatternType);
        [id(0x00000004), propget, helpstring("Returns the pattern name of a hatch.")]
        HRESULT PatternName([out, retval] BSTR* bstrName);
        [id(0x00000005), propget, helpstring("Specifies or returns the pattern angle of a hatch.")]
        HRESULT PatternAngle([out, retval] ACAD_ANGLE* PatternAngle);
        [id(0x00000005), propput, helpstring("Specifies or returns the pattern angle of a hatch.")]
        HRESULT PatternAngle([in] ACAD_ANGLE PatternAngle);
        [id(0x00000006), propget, helpstring("Specifies or returns the pattern scale of a hatch.")]
        HRESULT PatternScale([out, retval] ACAD_NOUNITS* PatternScale);
        [id(0x00000006), propput, helpstring("Specifies or returns the pattern scale of a hatch.")]
        HRESULT PatternScale([in] ACAD_NOUNITS PatternScale);
        [id(0x00000007), propget, helpstring("Specifies or returns the pattern spacing of a hatch.")]
        HRESULT PatternSpace([out, retval] double* PatternSpace);
        [id(0x00000007), propput, helpstring("Specifies or returns the pattern spacing of a hatch.")]
        HRESULT PatternSpace([in] double PatternSpace);
        [id(0x00000008), propget, helpstring("Specifies or returns the ISO pen width of an ISO hatch pattern.")]
        HRESULT ISOPenWidth([out, retval] AcISOPenWidth* penWidth);
        [id(0x00000008), propput, helpstring("Specifies or returns the ISO pen width of an ISO hatch pattern.")]
        HRESULT ISOPenWidth([in] AcISOPenWidth penWidth);
        [id(0x00000009), propget, helpstring("Specifies or returns whether cross-hatching is used to create a double pattern.")]
        HRESULT PatternDouble([out, retval] VARIANT_BOOL* bDouble);
        [id(0x00000009), propput, helpstring("Specifies or returns whether cross-hatching is used to create a double pattern.")]
        HRESULT PatternDouble([in] VARIANT_BOOL bDouble);
        [id(0x0000000a), propget, helpstring("Specifies or returns the elevation of the hatch relative to the z-axis of the object's coordinate system.")]
        HRESULT Elevation([out, retval] double* Elevation);
        [id(0x0000000a), propput, helpstring("Specifies or returns the elevation of the hatch relative to the z-axis of the object's coordinate system.")]
        HRESULT Elevation([in] double Elevation);
        [id(0x0000000b), propget, helpstring("Specifies or returns whether a hatch updates automatically when its boundary changes.")]
        HRESULT AssociativeHatch([out, retval] VARIANT_BOOL* fAssoc);
        [id(0x0000000b), propput, helpstring("Specifies or returns whether a hatch updates automatically when its boundary changes.")]
        HRESULT AssociativeHatch([in] VARIANT_BOOL fAssoc);
        [id(0x0000000c), propget, helpstring("Specifies or returns the hatch style.")]
        HRESULT HatchStyle([out, retval] AcHatchStyle* HatchStyle);
        [id(0x0000000c), propput, helpstring("Specifies or returns the hatch style.")]
        HRESULT HatchStyle([in] AcHatchStyle HatchStyle);
        [id(0x0000000d), helpstring("Specifies the pattern of a hatch.")]
        HRESULT SetPattern(
                        [in] int PatternType, 
                        [in] BSTR PatternName);
        [id(0x0000000e), helpstring("Adds the outer loop to a hatch.")]
        HRESULT AppendOuterLoop([in] VARIANT ObjectArray);
        [id(0x0000000f), helpstring("Adds an inner loop to a hatch.")]
        HRESULT AppendInnerLoop([in] VARIANT ObjectArray);
        [id(0x00000010), helpstring("Adds a loop at a specified index of a hatch.")]
        HRESULT InsertLoopAt(
                        [in] int Index, 
                        [in] AcLoopType LoopType, 
                        [in] VARIANT ObjectArray);
        [id(0x00000011), helpstring("Returns a loop at a specified index of a hatch.")]
        HRESULT GetLoopAt(
                        [in] int Index, 
                        [out] VARIANT* ObjectArray);
        [id(0x00000012), helpstring("Calculates and fills the pattern of a hatch.")]
        HRESULT Evaluate();
        [id(0x00000013), propget, helpstring("Specifies or returns the gradient start color of a hatch.")]
        HRESULT GradientColor1([out, retval] IAcadAcCmColor** pColor);
        [id(0x00000013), propput, helpstring("Specifies or returns the gradient start color of a hatch.")]
        HRESULT GradientColor1([in] IAcadAcCmColor* pColor);
        [id(0x00000014), propget, helpstring("Specifies or returns the gradient end color of a hatch.")]
        HRESULT GradientColor2([out, retval] IAcadAcCmColor** pColor);
        [id(0x00000014), propput, helpstring("Specifies or returns the gradient end color of a hatch.")]
        HRESULT GradientColor2([in] IAcadAcCmColor* pColor);
        [id(0x00000015), propget, helpstring("Specifies or returns the gradient angle of a hatch.")]
        HRESULT GradientAngle([out, retval] ACAD_ANGLE* GradientAngle);
        [id(0x00000015), propput, helpstring("Specifies or returns the gradient angle of a hatch.")]
        HRESULT GradientAngle([in] ACAD_ANGLE GradientAngle);
        [id(0x00000016), propget, helpstring("Specifies or returns whether the gradient is centered.")]
        HRESULT GradientCentered([out, retval] VARIANT_BOOL* fCentered);
        [id(0x00000016), propput, helpstring("Specifies or returns whether the gradient is centered.")]
        HRESULT GradientCentered([in] VARIANT_BOOL fCentered);
        [id(0x00000017), propget, helpstring("Specifies or returns the pattern name of the gradient.")]
        HRESULT GradientName([out, retval] BSTR* bstrName);
        [id(0x00000017), propput, helpstring("Specifies or returns the pattern name of the gradient.")]
        HRESULT GradientName([in] BSTR bstrName);
        [id(0x00000018), propget, helpstring("Specifies or returns the hatch type.")]
        HRESULT HatchObjectType([out, retval] AcHatchObjectType* hatchType);
        [id(0x00000018), propput, helpstring("Specifies or returns the hatch type.")]
        HRESULT HatchObjectType([in] AcHatchObjectType hatchType);
        [id(0x00000019), propget, helpstring("Not implemented. Returns the area of the hatch.")]
        HRESULT Area([out, retval] double* Area);
        [id(0x0000001a), propget, helpstring("Specifies or returns the coordinates for the origin of the hatch pattern.")]
        HRESULT Origin([out, retval] VARIANT* Origin);
        [id(0x0000001a), propput, helpstring("Specifies or returns the coordinates for the origin of the hatch pattern.")]
        HRESULT Origin([in] VARIANT Origin);
    };

    
    
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
    

    [
      odl,
      uuid(785A2F7C-7B41-4672-AF36-CC06717B2BE9),
      helpstring("TeighaX Interface of a raster image consisting of a rectangular grid (or raster) of small squares or dots known as pixels"),
      dual,
      oleautomation
    ]
    interface IAcadRasterImage : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies the current brightness value of the raster image")]
        HRESULT Brightness([out, retval] long* Brightness);
        [id(0x00000001), propput, helpstring("Specifies the current brightness value of the raster image")]
        HRESULT Brightness([in] long Brightness);
        [id(0x00000002), propget, helpstring("Specifies the current contrast value of the raster image")]
        HRESULT Contrast([out, retval] long* Contrast);
        [id(0x00000002), propput, helpstring("Specifies the current contrast value of the raster image")]
        HRESULT Contrast([in] long Contrast);
        [id(0x00000003), propget, helpstring("Specifies the current fade value of the raster image")]
        HRESULT Fade([out, retval] long* Fade);
        [id(0x00000003), propput, helpstring("Specifies the current fade value of the raster image")]
        HRESULT Fade([in] long Fade);
        [id(0x00000004), propget, helpstring("Specifies the origin coordinates (lower left corner) of the raster image")]
        HRESULT Origin([out, retval] VARIANT* Origin);
        [id(0x00000004), propput, helpstring("Specifies the origin coordinates (lower left corner) of the raster image")]
        HRESULT Origin([in] VARIANT Origin);
        [id(0x00000005), propget, helpstring("Specifies the rotation angle of the raster image")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000005), propput, helpstring("Specifies the rotation angle of the raster image")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000006), propget, helpstring("Specifies the width of the raster image")]
        HRESULT ImageWidth([out, retval] double* Width);
        [id(0x00000006), propput, helpstring("Specifies the width of the raster image")]
        HRESULT ImageWidth([in] double Width);
        [id(0x00000007), propget, helpstring("Specifies the height of the raster image")]
        HRESULT ImageHeight([out, retval] double* Height);
        [id(0x00000007), propput, helpstring("Specifies the height of the raster image")]
        HRESULT ImageHeight([in] double Height);
        [id(0x00000008), propget, helpstring("Specifies the name of the image file")]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000008), propput, helpstring("Specifies the name of the image file")]
        HRESULT Name([in] BSTR Name);
        [id(0x00000009), propput, helpstring("Specifies the path to the image file")]
        HRESULT ImageFile([in] BSTR imageFileName);
        [id(0x00000009), propget, helpstring("Specifies the path to the image file")]
        HRESULT ImageFile([out, retval] BSTR* imageFileName);
        [id(0x0000000a), propget, helpstring("Determines whether image is visible or not")]
        HRESULT ImageVisibility([out, retval] VARIANT_BOOL* fVisible);
        [id(0x0000000a), propput, helpstring("Determines whether image is visible or not")]
        HRESULT ImageVisibility([in] VARIANT_BOOL fVisible);
        [id(0x0000000b), propget, helpstring("Enables or disables the clipping boundary of the image")]
        HRESULT ClippingEnabled([out, retval] VARIANT_BOOL* kClip);
        [id(0x0000000b), propput, helpstring("Enables or disables the clipping boundary of the image")]
        HRESULT ClippingEnabled([in] VARIANT_BOOL kClip);
        [id(0x0000000c), propget, helpstring("Determines whether transparency for a bitonal image is On or Off")]
        HRESULT Transparency([out, retval] VARIANT_BOOL* bTransp);
        [id(0x0000000c), propput, helpstring("Determines whether transparency for a bitonal image is On or Off")]
        HRESULT Transparency([in] VARIANT_BOOL bTransp);
        [id(0x0000000d), helpstring("Set clipping boundary")]
        HRESULT ClipBoundary([in] VARIANT boundry);
        [id(0x0000000e), propget, helpstring("Height of the attribute, shape, text, or view toolbar or the main application window")]
        HRESULT Height([out, retval] double* pixelHeight);
        [id(0x0000000f), propget, helpstring("Specifies the width of the text boundary, view, image, toolbar, or main application window")]
        HRESULT Width([out, retval] double* pixelWidth);
        [id(0x00000010), propget, helpstring("Determines if a raster image is displayed at its rotation value")]
        HRESULT ShowRotation([out, retval] VARIANT_BOOL* bShow);
        [id(0x00000010), propput, helpstring("Determines if a raster image is displayed at its rotation value")]
        HRESULT ShowRotation([in] VARIANT_BOOL bShow);
        [id(0x00000011), propget, helpstring("Specifies the scale factor of the raster image")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* ScaleFactor);
        [id(0x00000011), propput, helpstring("Specifies the scale factor of the raster image")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS ScaleFactor);
    };

    [
      odl,
      uuid(9812D0AB-C2E8-48D9-A0E9-476C765E3B79),
      helpstring("TeighaX Interface of a single line segment"),
      dual,
      oleautomation
    ]
    interface IAcadLine : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the x, y, z coordinates of the start point of a line.")]
        HRESULT StartPoint([out, retval] VARIANT* StartPoint);
        [id(0x00000001), propput, helpstring("Specifies or returns the x, y, z coordinates of the start point of a line.")]
        HRESULT StartPoint([in] VARIANT StartPoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the x, y, z coordinates of the end point of a line.")]
        HRESULT EndPoint([out, retval] VARIANT* EndPoint);
        [id(0x00000002), propput, helpstring("Specifies or returns the x, y, z coordinates of the end point of a line.")]
        HRESULT EndPoint([in] VARIANT EndPoint);
        [id(0x00000003), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000003), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000004), propget, helpstring("Specifies or returns the thickness (z-direction value) of a line.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x00000004), propput, helpstring("Specifies or returns the thickness (z-direction value) of a line.")]
        HRESULT Thickness([in] double Thickness);
        [id(0x00000005), helpstring("Not implemented. Copies an existing line and places the copy at a specified distance from the existing line.")]
        HRESULT Offset(
                        [in] double Distance, 
                        [out, retval] VARIANT* pOffsetCurves);
        [id(0x00000006), propget, helpstring("Specifies the x, y, z, delta values of a line.")]
        HRESULT Delta([out, retval] VARIANT* Delta);
        [id(0x00000007), propget, helpstring("Specifies the length of a line.")]
        HRESULT Length([out, retval] double* Length);
        [id(0x00000008), propget, helpstring("Specifies the angle of a line.")]
        HRESULT Angle([out, retval] ACAD_ANGLE* Angle);
    };

    [
      odl,
      uuid(DCE6472A-3CF1-4D4D-9688-3C3087496145),
      helpstring("TeighaX Interface of the plot settings and visual properties of a model space or paper space block"),
      dual,
      oleautomation
    ]
    interface IAcadLayout : IAcadPlotConfiguration {
        [id(0x00000030), propget, helpstring("Returns the block of a layout.")]
        HRESULT Block([out, retval] IAcadBlock** pBlock);
        [id(0x00000031), propget, helpstring("Specifies or returns the order of the specified layout.")]
        HRESULT TabOrder([out, retval] long* pOrder);
        [id(0x00000031), propput, helpstring("Specifies or returns the order of the specified layout.")]
        HRESULT TabOrder([in] long pOrder);
    };

    [
      odl,
      uuid(8C5BD830-EC70-4FEB-986F-762E7851DD03),
      helpstring("TeighaX Interface of a named collection of plot settings"),
      dual,
      oleautomation
    ]
    interface IAcadPlotConfiguration : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies or returns the name of the object.")]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x00000001), propput, helpstring("Specifies or returns the name of the object.")]
        HRESULT Name([in] BSTR pName);
        [id(0x00000003), propget, helpstring("Specifies or returns the name of a plot configuration file.")]
        HRESULT ConfigName([out, retval] BSTR* pName);
        [id(0x00000003), propput, helpstring("Specifies or returns the name of a plot configuration file.")]
        HRESULT ConfigName([in] BSTR pName);
        [id(0x00000006), propget, helpstring("Specifies or returns the name of the media size.")]
        HRESULT CanonicalMediaName([out, retval] BSTR* pName);
        [id(0x00000006), propput, helpstring("Specifies or returns the name of the media size.")]
        HRESULT CanonicalMediaName([in] BSTR pName);
        [id(0x00000007), propget, helpstring("Specifies or returns the units used for plot configuration properties.")]
        HRESULT PaperUnits([out, retval] AcPlotPaperUnits* pPaperUnits);
        [id(0x00000007), propput, helpstring("Specifies or returns the units used for plot configuration properties.")]
        HRESULT PaperUnits([in] AcPlotPaperUnits pPaperUnits);
        [id(0x00000008), propget, helpstring("Specifies or returns whether to print the edges of viewports.")]
        HRESULT PlotViewportBorders([out, retval] VARIANT_BOOL* pViewportBorders);
        [id(0x00000008), propput, helpstring("Specifies or returns whether to print the edges of viewports.")]
        HRESULT PlotViewportBorders([in] VARIANT_BOOL pViewportBorders);
        [id(0x00000009), propget, helpstring("Specifies or returns whether plot styles are applied when displaying objects on the screen.")]
        HRESULT ShowPlotStyles([out, retval] VARIANT_BOOL* pStyles);
        [id(0x00000009), propput, helpstring("Specifies or returns whether plot styles are applied when displaying objects on the screen.")]
        HRESULT ShowPlotStyles([in] VARIANT_BOOL pStyles);
        [id(0x0000000a), propget, helpstring("Specifies or returns the rotation angle of the plot configuration.")]
        HRESULT PlotRotation([out, retval] AcPlotRotation* pRotation);
        [id(0x0000000a), propput, helpstring("Specifies or returns the rotation angle of the plot configuration.")]
        HRESULT PlotRotation([in] AcPlotRotation pRotation);
        [id(0x0000000b), propget, helpstring("Specifies or returns whether objects are centered on the printed media.")]
        HRESULT CenterPlot([out, retval] VARIANT_BOOL* pCentered);
        [id(0x0000000b), propput, helpstring("Specifies or returns whether objects are centered on the printed media.")]
        HRESULT CenterPlot([in] VARIANT_BOOL pCentered);
        [id(0x0000000c), propget, helpstring("Specifies or returns whether objects are printed.")]
        HRESULT PlotHidden([out, retval] VARIANT_BOOL* pHidden);
        [id(0x0000000c), propput, helpstring("Specifies or returns whether objects are printed.")]
        HRESULT PlotHidden([in] VARIANT_BOOL pHidden);
        [id(0x0000000d), propget, helpstring("Specifies or returns the method used to determine which objects print.")]
        HRESULT PlotType([out, retval] AcPlotType* pType);
        [id(0x0000000d), propput, helpstring("Specifies or returns the method used to determine which objects print.")]
        HRESULT PlotType([in] AcPlotType pType);
        [id(0x0000000e), propget, helpstring("Specifies or returns the name of the view to print.")]
        HRESULT ViewToPlot([out, retval] BSTR* pName);
        [id(0x0000000e), propput, helpstring("Specifies or returns the name of the view to print.")]
        HRESULT ViewToPlot([in] BSTR pName);
        [id(0x0000000f), propget, helpstring("Specifies or returns whether to print using a standard scale or custom scale.")]
        HRESULT UseStandardScale([out, retval] VARIANT_BOOL* pUseStdScale);
        [id(0x0000000f), propput, helpstring("Specifies or returns whether to print using a standard scale or custom scale.")]
        HRESULT UseStandardScale([in] VARIANT_BOOL pUseStdScale);
        [id(0x00000010), propget, helpstring("Specifies or returns the standard scale value.")]
        HRESULT StandardScale([out, retval] AcPlotScale* pStdScale);
        [id(0x00000010), propput, helpstring("Specifies or returns the standard scale value.")]
        HRESULT StandardScale([in] AcPlotScale pStdScale);
        [id(0x00000011), helpstring("Returns the custom scale value.")]
        HRESULT GetCustomScale(
                        [out] double* Numerator, 
                        [out] double* Denominator);
        [id(0x00000012), helpstring("Sets the custom scale value.")]
        HRESULT SetCustomScale(
                        [in] double Numerator, 
                        [in] double Denominator);
        [id(0x00000014), propget, helpstring("Specifies or returns whether lineweights are scaled during printing.")]
        HRESULT ScaleLineweights([out, retval] VARIANT_BOOL* pScale);
        [id(0x00000014), propput, helpstring("Specifies or returns whether lineweights are scaled during printing.")]
        HRESULT ScaleLineweights([in] VARIANT_BOOL pScale);
        [id(0x00000015), propget, helpstring("Specifies or returns whether objects print with lineweights.")]
        HRESULT PlotWithLineweights([out, retval] VARIANT_BOOL* pPlot);
        [id(0x00000015), propput, helpstring("Specifies or returns whether objects print with lineweights.")]
        HRESULT PlotWithLineweights([in] VARIANT_BOOL pPlot);
        [id(0x00000018), propget, helpstring("Specifies or returns whether objects in paperspace print first.")]
        HRESULT PlotViewportsFirst([out, retval] VARIANT_BOOL* pViewportsFirst);
        [id(0x00000018), propput, helpstring("Specifies or returns whether objects in paperspace print first.")]
        HRESULT PlotViewportsFirst([in] VARIANT_BOOL pViewportsFirst);
        [id(0x00000019), propget, helpstring("Specifies or returns the style sheet used for printing.")]
        HRESULT StyleSheet([out, retval] BSTR* pName);
        [id(0x00000019), propput, helpstring("Specifies or returns the style sheet used for printing.")]
        HRESULT StyleSheet([in] BSTR pName);
        [id(0x0000001a), helpstring("Returns the margins used for printing.")]
        HRESULT GetPaperMargins(
                        [out] VARIANT* LowerLeft, 
                        [out] VARIANT* UpperRight);
        [id(0x0000001c), helpstring("Returns the width and height of the specified media.")]
        HRESULT GetPaperSize(
                        [out] double* Width, 
                        [out] double* Height);
        [id(0x0000001e), propget, helpstring("Specifies or returns the origin point used for printing.")]
        HRESULT PlotOrigin([out, retval] VARIANT* pOrigin);
        [id(0x0000001e), propput, helpstring("Specifies or returns the origin point used for printing.")]
        HRESULT PlotOrigin([in] VARIANT pOrigin);
        [id(0x0000001f), helpstring("Returns the coordinates that define the area to print.")]
        HRESULT GetWindowToPlot(
                        [out] VARIANT* LowerLeft, 
                        [out] VARIANT* UpperRight);
        [id(0x00000020), helpstring("Sets the coordinates that define the area to print.")]
        HRESULT SetWindowToPlot(
                        [in] VARIANT LowerLeft, 
                        [in] VARIANT UpperRight);
        [id(0x00000021), propget, helpstring("Specifies or returns whether objects print with settings from the plot configuration file or settings from the drawing.")]
        HRESULT PlotWithPlotStyles([out, retval] VARIANT_BOOL* pStyles);
        [id(0x00000021), propput, helpstring("Specifies or returns whether objects print with settings from the plot configuration file or settings from the drawing.")]
        HRESULT PlotWithPlotStyles([in] VARIANT_BOOL pStyles);
        [id(0x00000022), propget, helpstring("Returns whether the settings apply to objects in a modelspace layout only or both modelspace and paperspace layouts.")]
        HRESULT ModelType([out, retval] VARIANT_BOOL* pType);
        [id(0x00000023), helpstring("Copies settings from a plot configuration file.")]
        HRESULT CopyFrom([in] IAcadPlotConfiguration* pPlotConfig);
        [id(0x00000024), helpstring("Returns names of the media available for a print device.")]
        HRESULT GetCanonicalMediaNames([out, retval] VARIANT* pNames);
        [id(0x00000025), helpstring("Returns print device names.")]
        HRESULT GetPlotDeviceNames([out, retval] VARIANT* pNames);
        [id(0x00000026), helpstring("Returns plot style table names.")]
        HRESULT GetPlotStyleTableNames([out, retval] VARIANT* pNames);
        [id(0x00000027), helpstring("Updates print device information with the current settings.")]
        HRESULT RefreshPlotDeviceInfo();
        [id(0x00000028), helpstring("Returns the localized version of a media name.")]
        HRESULT GetLocaleMediaName(
                        [in] BSTR Name, 
                        [out, retval] BSTR* pLocalName);
    };

    
    
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
        
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    [
      odl,
      uuid(E32C3927-3A6B-440E-9DE0-9E9470B8ECC6),
      helpstring("TeighaX Interface of a rectangular array of block references"),
      dual,
      oleautomation
    ]
    interface IAcadMInsertBlock : IAcadBlockReference {
        [id(0x00000100), propput, helpstring("Specifies or returns the number of vertical columns in the block pattern.")]
        HRESULT Columns([in] long NumColumns);
        [id(0x00000100), propget, helpstring("Specifies or returns the number of vertical columns in the block pattern.")]
        HRESULT Columns([out, retval] long* NumColumns);
        [id(0x00000101), propput, helpstring("Specifies or returns the spacing between columns in the block pattern.")]
        HRESULT ColumnSpacing([in] double Spacing);
        [id(0x00000101), propget, helpstring("Specifies or returns the spacing between columns in the block pattern.")]
        HRESULT ColumnSpacing([out, retval] double* Spacing);
        [id(0x00000102), propput, helpstring("Specifies or returns the number of horizontal rows in the block pattern.")]
        HRESULT Rows([in] long NumRows);
        [id(0x00000102), propget, helpstring("Specifies or returns the number of horizontal rows in the block pattern.")]
        HRESULT Rows([out, retval] long* NumRows);
        [id(0x00000103), propput, helpstring("Specifies or returns the spacing between rows in the block pattern.")]
        HRESULT RowSpacing([in] double Spacing);
        [id(0x00000103), propget, helpstring("Specifies or returns the spacing between rows in the block pattern.")]
        HRESULT RowSpacing([out, retval] double* Spacing);
    };

    [
      odl,
      uuid(5BC90641-E59F-4D3D-9B59-56FE7C9F762F),
      helpstring("TeighaX Interface of a three-dimensional polyface mesh"),
      dual,
      oleautomation
    ]
    interface IAcadPolyfaceMesh : IAcadEntity {
        [id(0x00000001), propput, helpstring("Specifies or returns the vertices of a polyface mesh.")]
        HRESULT Coordinates([in] VARIANT Vertices);
        [id(0x00000001), propget, helpstring("Specifies or returns the vertices of a polyface mesh.")]
        HRESULT Coordinates([out, retval] VARIANT* Vertices);
        [id(0x00000002), propget, helpstring("Specifies or returns the coordinate of a single vertex in a polyface mesh.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000002), propput, helpstring("Specifies or returns the coordinate of a single vertex in a polyface mesh.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
        [id(0x00000003), propget, helpstring("Returns the number of vertices in a polyface mesh.")]
        HRESULT NumberOfVertices([out, retval] long* NumVertices);
        [id(0x00000004), propget, helpstring("Specifies the number of faces in a polyface mesh.")]
        HRESULT NumberOfFaces([out, retval] long* NumFaces);
        [id(0x00000050), propput, hidden]
        HRESULT Faces([in] VARIANT rhs);
    };

    [
      odl,
      uuid(760CF113-87CA-4621-81D2-8BE6F0BCE422),
      helpstring("TeighaX Interface of multiple parallel lines"),
      dual,
      oleautomation
    ]
    interface IAcadMLine : IAcadEntity {
        [id(0x00000001), propget, helpstring("Returns the style name of a multiline.")]
        HRESULT StyleName([out, retval] BSTR* Name);
        [id(0x00000002), propget, helpstring("Specifies or returns the vertices of a multline.")]
        HRESULT Coordinates([out, retval] VARIANT* Vertices);
        [id(0x00000002), propput, helpstring("Specifies or returns the vertices of a multline.")]
        HRESULT Coordinates([in] VARIANT Vertices);
        [id(0x00000003), propget, helpstring("Specifies or returns the orientation of a multiline.")]
        HRESULT Justification([out, retval] AcMLineJustification* Justification);
        [id(0x00000003), propput, helpstring("Specifies or returns the orientation of a multiline.")]
        HRESULT Justification([in] AcMLineJustification Justification);
        [id(0x00000004), propget, helpstring("Specifies or returns the scale of a multiline.")]
        HRESULT MLineScale([out, retval] double* scale);
        [id(0x00000004), propput, helpstring("Specifies or returns the scale of a multiline.")]
        HRESULT MLineScale([in] double scale);
    };

    
    
        
        
        
    

    [
      odl,
      uuid(8E1225FF-9C5A-43D3-8DCD-88092C72EAD7),
      helpstring("TeighaX Interface of a dimension measuring the angular distance between three points"),
      dual,
      oleautomation
    ]
    interface IAcadDim3PointAngular : IAcadDimension {
        [id(0x00000026), propget, helpstring("Specifies or returns the point through which the first extension line passes.")]
        HRESULT ExtLine1EndPoint([out, retval] VARIANT* xLine1Point);
        [id(0x00000026), propput, helpstring("Specifies or returns the point through which the first extension line passes.")]
        HRESULT ExtLine1EndPoint([in] VARIANT xLine1Point);
        [id(0x00000028), propget, helpstring("Specifies or returns the point through which the second extension line passes.")]
        HRESULT ExtLine2EndPoint([out, retval] VARIANT* xLine2Point);
        [id(0x00000028), propput, helpstring("Specifies or returns the point through which the second extension line passes.")]
        HRESULT ExtLine2EndPoint([in] VARIANT xLine2Point);
        [id(0x0000002d), propget, helpstring("Specifies or returns the vertex of the angle measured by the dimension.")]
        HRESULT AngleVertex([out, retval] VARIANT* AngleVertex);
        [id(0x0000002d), propput, helpstring("Specifies or returns the vertex of the angle measured by the dimension.")]
        HRESULT AngleVertex([in] VARIANT AngleVertex);
        [id(0x00000024), propget, helpstring("Specifies or returns the number of decimal places for angular dimension text.")]
        HRESULT TextPrecision([out, retval] AcDimPrecision* AngleVertex);
        [id(0x00000024), propput, helpstring("Specifies or returns the number of decimal places for angular dimension text.")]
        HRESULT TextPrecision([in] AcDimPrecision AngleVertex);
        [id(0x00000029), propget, helpstring("Specifies or returns the unit of measurement for angular dimensions.")]
        HRESULT AngleFormat([out, retval] AcAngleUnits* format);
        [id(0x00000029), propput, helpstring("Specifies or returns the unit of measurement for angular dimensions.")]
        HRESULT AngleFormat([in] AcAngleUnits format);
        [id(0x0000000d), propget, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000e), propget, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000e), propput, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([in] ACAD_COLOR Type);
        [id(0x00000011), propget, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([out, retval] double* extend);
        [id(0x00000011), propput, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([in] double extend);
        [id(0x00000012), propget, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([out, retval] AcDimFit* fittype);
        [id(0x00000012), propput, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([in] AcDimFit fittype);
        [id(0x00000014), propget, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([out, retval] AcDimHorizontalJustification* Type);
        [id(0x00000014), propput, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([in] AcDimHorizontalJustification Type);
        [id(0x00000017), propget, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([out, retval] ACAD_LWEIGHT* lweight);
        [id(0x00000017), propput, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([in] ACAD_LWEIGHT lweight);
        [id(0x00000019), propget, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x00000019), propput, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001a), propget, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001a), propput, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001b), propget, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001b), propput, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001c), propget, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001c), propput, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001d), propget, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001d), propput, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([in] VARIANT_BOOL bInside);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([in] VARIANT_BOOL bInside);
        [id(0x00000020), propget, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000020), propput, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([in] VARIANT_BOOL bInside);
        [id(0x00000021), propget, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000021), propput, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([in] VARIANT_BOOL bInside);
        [id(0x00000023), propget, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([out, retval] double* Offset);
        [id(0x00000023), propput, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([in] double Offset);
        [id(0x0000003c), propget, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000003c), propput, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x0000003e), propget, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003e), propput, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([in] AcDimArrowheadType Type);
        [id(0x0000003f), propget, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003f), propput, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([in] AcDimArrowheadType Type);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] ACAD_ANGLE* bVal);
        [id(0x00000041), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([out, retval] BSTR* BlockName);
        [id(0x00000041), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([in] BSTR BlockName);
        [id(0x00000042), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([out, retval] BSTR* BlockName);
        [id(0x00000042), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([in] BSTR BlockName);
        [id(0x00000050), propput, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([in] BSTR rhs);
        [id(0x00000051), propget, helpstring("Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([out, retval] BSTR* Linetype);
        [id(0x00000051), propput, helpstring("Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([in] BSTR Linetype);
        [id(0x00000052), propget, helpstring("Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([out, retval] BSTR* Linetype);
        [id(0x00000052), propput, helpstring("Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([in] BSTR Linetype);
        [id(0x00000053), propget, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([out, retval] VARIANT_BOOL* bFixedLen);
        [id(0x00000053), propput, helpstring("Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([in] VARIANT_BOOL bFixedLen);
        [id(0x00000054), propget, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([out, retval] double* FixedLen);
        [id(0x00000054), propput, helpstring("Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([in] double FixedLen);
        [id(0x00000055), propget, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([out, retval] VARIANT_BOOL* bIsDynamic);
        [id(0x00000055), propput, helpstring("Specifies the constraint type - Dynamic or Annotational")]
        HRESULT DimConstrForm([in] VARIANT_BOOL bIsDynamic);
        [id(0x00000056), propget, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([out, retval] VARIANT_BOOL* bIsReference);
        [id(0x00000056), propput, helpstring("Specifies whether the parameter is a reference constraint. Reference dimensions can be used in expressions but don't drive geometry - similar to an associative dimension")]
        HRESULT DimConstrReference([in] VARIANT_BOOL bIsReference);
        [id(0x00000057), propget, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([out, retval] BSTR* bstrName);
        [id(0x00000057), propput, helpstring("Specifies the name of the dimensional constraint. Names cannot have spaces")]
        HRESULT DimConstrName([in] BSTR bstrName);
        [id(0x00000058), propget, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([out, retval] BSTR* bstrExpression);
        [id(0x00000058), propput, helpstring("Specifies the expression or the value of the constraint")]
        HRESULT DimConstrExpression([in] BSTR bstrExpression);
        [id(0x00000059), propget, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([out, retval] BSTR* Value);
        [id(0x00000059), propput, helpstring("Specifies the value of the constraint")]
        HRESULT DimConstrValue([in] BSTR Value);
        [id(0x0000005a), propget, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([out, retval] BSTR* bstrDescription);
        [id(0x0000005a), propput, helpstring("Specifies description for constraint")]
        HRESULT DimConstrDesc([in] BSTR bstrDescription);
    };

    [
      odl,
      uuid(6AF963C2-966E-4050-A9AA-AB4F71E9EC08),
      helpstring("TeighaX Interface of an instance of an external reference inserted into a drawing"),
      dual,
      oleautomation
    ]
    interface IAcadExternalReference : IAcadBlockReference {
        [id(0x00000100), propget, helpstring("Specifies or returns the source path of an external reference.")]
        HRESULT Path([out, retval] BSTR* bstrName);
        [id(0x00000100), propput, helpstring("Specifies or returns the source path of an external reference.")]
        HRESULT Path([in] BSTR bstrName);
    };

    [
      odl,
      uuid(3CB6BC57-86CE-4647-A207-5F23CDE55F0E),
      helpstring("TeighaX Interface of table object"),
      dual,
      oleautomation
    ]
    interface IAcadTable : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the name of the table style assigned to a table.")]
        HRESULT StyleName([out, retval] BSTR* bstrName);
        [id(0x00000001), propput, helpstring("Specifies or returns the name of the table style assigned to a table.")]
        HRESULT StyleName([in] BSTR bstrName);
        [id(0x00000002), propget, helpstring("Specifies or returns the number of rows in a table.")]
        HRESULT Rows([out, retval] int* pRows);
        [id(0x00000002), propput, helpstring("Specifies or returns the number of rows in a table.")]
        HRESULT Rows([in] int pRows);
        [id(0x00000003), propget, helpstring("Specifies or returns the number of columns in a table.")]
        HRESULT Columns([out, retval] int* pColumns);
        [id(0x00000003), propput, helpstring("Specifies or returns the number of columns in a table.")]
        HRESULT Columns([in] int pColumns);
        [id(0x00000004), propget, helpstring("Specifies or returns the position a table's title and row headings.")]
        HRESULT FlowDirection([out, retval] AcTableDirection* pFlow);
        [id(0x00000004), propput, helpstring("Specifies or returns the position a table's title and row headings.")]
        HRESULT FlowDirection([in] AcTableDirection pFlow);
        [id(0x00000005), propget, helpstring("Specifies or returns the width of a table.")]
        HRESULT Width([out, retval] double* pWidth);
        [id(0x00000005), propput, helpstring("Specifies or returns the width of a table.")]
        HRESULT Width([in] double pWidth);
        [id(0x00000006), propget, helpstring("Specifies or returns the height of a table.")]
        HRESULT Height([out, retval] double* pHeight);
        [id(0x00000006), propput, helpstring("Specifies or returns the height of a table.")]
        HRESULT Height([in] double pHeight);
        [id(0x00000007), propget, helpstring("Specifies or returns the distance between cell text and the top/bottom cell edge.")]
        HRESULT VertCellMargin([out, retval] double* pGap);
        [id(0x00000007), propput, helpstring("Specifies or returns the distance between cell text and the top/bottom cell edge.")]
        HRESULT VertCellMargin([in] double pGap);
        [id(0x00000008), propget, helpstring("Specifies or returns the distance between cell text and the left/right cell edge.")]
        HRESULT HorzCellMargin([out, retval] double* pGap);
        [id(0x00000008), propput, helpstring("Specifies or returns the distance between cell text and the left/right cell edge.")]
        HRESULT HorzCellMargin([in] double pGap);
        [id(0x00000009), propget, helpstring("Specifies or returns the x, y, and z coordinates of the table insertion point.")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x00000009), propput, helpstring("Specifies or returns the x, y, and z coordinates of the table insertion point.")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x0000000a), helpstring("Returns the width of a column in a table.")]
        HRESULT GetColumnWidth(
                        [in] int col, 
                        [out, retval] double* pWidth);
        [id(0x0000000b), helpstring("Sets the width of a column in a table.")]
        HRESULT SetColumnWidth(
                        [in] int col, 
                        [in] double Width);
        [id(0x0000000c), propput, helpstring("Sets the width of all columns in a table.")]
        HRESULT ColumnWidth([in] double rhs);
        [id(0x0000000d), helpstring("Returns the height of a row in a table.")]
        HRESULT GetRowHeight(
                        [in] int row, 
                        [out, retval] double* pHeight);
        [id(0x0000000e), helpstring("Sets the height of a row in a table.")]
        HRESULT SetRowHeight(
                        [in] int row, 
                        [in] double Height);
        [id(0x0000000f), propput, helpstring("Sets the height of all rows in a table.")]
        HRESULT RowHeight([in] double rhs);
        [id(0x0000001a), helpstring("Returns the minimum width of a column in a table.")]
        HRESULT GetMinimumColumnWidth(
                        [in] int col, 
                        [out, retval] double* pWidth);
        [id(0x0000001b), helpstring("Returns the minimum height of a row in a table.")]
        HRESULT GetMinimumRowHeight(
                        [in] int row, 
                        [out, retval] double* pHeight);
        [id(0x0000001c), propget, helpstring("Returns the minimum width of a table.")]
        HRESULT MinimumTableWidth([out, retval] double* pWidth);
        [id(0x0000001d), propget, helpstring("Returns the minimum height of a table.")]
        HRESULT MinimumTableHeight([out, retval] double* pHeight);
        [id(0x0000001e), propget, helpstring("Specifies or returns the x plane where a table is positioned.")]
        HRESULT Direction([out, retval] VARIANT* DirectionVector);
        [id(0x0000001e), propput, helpstring("Specifies or returns the x plane where a table is positioned.")]
        HRESULT Direction([in] VARIANT DirectionVector);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether the title of a table is visible.")]
        HRESULT TitleSuppressed([out, retval] VARIANT_BOOL* bValue);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether the title of a table is visible.")]
        HRESULT TitleSuppressed([in] VARIANT_BOOL bValue);
        [id(0x00000020), propget, helpstring("Specifies or returns whether row headings of a table are visible.")]
        HRESULT HeaderSuppressed([out, retval] VARIANT_BOOL* bValue);
        [id(0x00000020), propput, helpstring("Specifies or returns whether row headings of a table are visible.")]
        HRESULT HeaderSuppressed([in] VARIANT_BOOL bValue);
        [id(0x00000021), helpstring("Returns how the cells of a row type are aligned.")]
        HRESULT GetAlignment(
                        [in] AcRowType rowType, 
                        [out, retval] AcCellAlignment* pCellAlignment);
        [id(0x00000022), helpstring("Specifies how the cells of a row type are aligned.")]
        HRESULT SetAlignment(
                        [in] int rowTypes, 
                        [in] AcCellAlignment cellAlignment);
        [id(0x00000023), helpstring("Specifies or returns whether the row type of a table has a background color.")]
        HRESULT GetBackgroundColorNone(
                        [in] AcRowType rowType, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x00000024), helpstring("Specifies or returns whether the row type of a table has a background color.")]
        HRESULT SetBackgroundColorNone(
                        [in] int rowTypes, 
                        [in] VARIANT_BOOL bValue);
        [id(0x00000025), helpstring("Returns the background color value of a table's row type.")]
        HRESULT GetBackgroundColor(
                        [in] AcRowType rowType, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x00000026), helpstring("Specifies the background color value of a table's row type.")]
        HRESULT SetBackgroundColor(
                        [in] int rowTypes, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000027), helpstring("Returns the color value of a table's row type.")]
        HRESULT GetContentColor(
                        [in] AcRowType rowType, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x00000028), helpstring("Specifies the color value of a table's row type.")]
        HRESULT SetContentColor(
                        [in] int rowTypes, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000029), helpstring("Returns the name of the text style assigned to the row type of a table.")]
        HRESULT GetTextStyle(
                        [in] AcRowType rowType, 
                        [out, retval] BSTR* bstrName);
        [id(0x0000002a), helpstring("Specifies the text style assigned to the row type of a table.")]
        HRESULT SetTextStyle(
                        [in] int rowTypes, 
                        [in] BSTR bstrName);
        [id(0x0000002b), helpstring("Returns the text height of a table's row type.")]
        HRESULT GetTextHeight(
                        [in] AcRowType rowType, 
                        [out, retval] double* pTextHeight);
        [id(0x0000002c), helpstring("Specifies the text height of a table's row type.")]
        HRESULT SetTextHeight(
                        [in] int rowTypes, 
                        [in] double TextHeight);
        [id(0x0000002d), helpstring("Returns the grid lineweight value for a grid linetype and row type.")]
        HRESULT GetGridLineWeight(
                        [in] AcGridLineType gridLineType, 
                        [in] AcRowType rowType, 
                        [out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x0000002e), helpstring("Specifies the grid lineweight value for a grid linetype and row type.")]
        HRESULT SetGridLineWeight(
                        [in] int gridLineTypes, 
                        [in] int rowTypes, 
                        [in] ACAD_LWEIGHT Lineweight);
        [id(0x0000002f), helpstring("Returns the grid color value for a grid linetype and row type.")]
        HRESULT GetGridColor(
                        [in] AcGridLineType gridLineType, 
                        [in] AcRowType rowType, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x00000030), helpstring("Specifies the grid color value for a grid linetype and row type.")]
        HRESULT SetGridColor(
                        [in] int gridLineTypes, 
                        [in] int rowTypes, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000031), helpstring("Returns the grid visibility value for a Returns the grid color value for a grid linetype and row type.")]
        HRESULT GetGridVisibility(
                        [in] AcGridLineType gridLineType, 
                        [in] AcRowType rowType, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x00000032), helpstring("Specifies the grid visibility value for a grid linetype and row type.")]
        HRESULT SetGridVisibility(
                        [in] int gridLineTypes, 
                        [in] int rowTypes, 
                        [in] VARIANT_BOOL bValue);
        [id(0x00000033), propget, helpstring("Returns the overrides of a table style.")]
        HRESULT TableStyleOverrides([out, retval] VARIANT* pIntArray);
        [id(0x00000034), helpstring("Removes the overrides of a table style.")]
        HRESULT ClearTableStyleOverrides([in] int flag);
        [id(0x00000035), helpstring("Returns the cell type of a row and column.")]
        HRESULT GetCellType(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] AcCellType* pCellType);
        [id(0x00000036), helpstring("Specifies the cell type of a row and column.")]
        HRESULT SetCellType(
                        [in] int row, 
                        [in] int col, 
                        [in] AcCellType CellType);
        [id(0x00000037), helpstring("Returns whether a table cell is in the inner part of a table or on the outer edge.")]
        HRESULT GetCellExtents(
                        [in] int row, 
                        [in] int col, 
                        [in] VARIANT_BOOL bOuterCell, 
                        [out, retval] VARIANT* pPts);
        [id(0x00000038), helpstring("Returns the attachment point of a row and column.")]
        HRESULT GetAttachmentPoint(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] VARIANT* pAttachmentPoint);
        [id(0x0000003a), helpstring("Returns the alignment of a row and column.")]
        HRESULT GetCellAlignment(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] AcCellAlignment* pCellAlignment);
        [id(0x0000003b), helpstring("Specifies the cell alignment of a row and column.")]
        HRESULT SetCellAlignment(
                        [in] int row, 
                        [in] int col, 
                        [in] AcCellAlignment cellAlignment);
        [id(0x0000003c), helpstring("Returns whether the background color is set to None for a row and column.")]
        HRESULT GetCellBackgroundColorNone(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x0000003d), helpstring("Specifies whether the background color is set to None for a row and column.")]
        HRESULT SetCellBackgroundColorNone(
                        [in] int row, 
                        [in] int col, 
                        [in] VARIANT_BOOL bValue);
        [id(0x0000003e), helpstring("Returns the background color for a row and column.")]
        HRESULT GetCellBackgroundColor(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x0000003f), helpstring("Specifies the background color for a row and column.")]
        HRESULT SetCellBackgroundColor(
                        [in] int row, 
                        [in] int col, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000040), helpstring("Returns the cell content color for a row and column.")]
        HRESULT GetCellContentColor(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x00000041), helpstring("Specifies the cell content color for a row and column.")]
        HRESULT SetCellContentColor(
                        [in] int row, 
                        [in] int col, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000042), helpstring("Returns the overrides of a cell style.")]
        HRESULT GetCellStyleOverrides(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] VARIANT* pIntArray);
        [id(0x00000043), helpstring("Deletes all cell content for a row and coluumn.")]
        HRESULT DeleteCellContent(
                        [in] int row, 
                        [in] int col);
        [id(0x00000044), helpstring("Returns the row type of a row.")]
        HRESULT GetRowType(
                        [in] int row, 
                        [out, retval] AcRowType* pRowType);
        [id(0x00000045), helpstring("Returns the text of a row and column.")]
        HRESULT GetText(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] BSTR* pStr);
        [id(0x00000046), helpstring("Specifies the text of a row and column.")]
        HRESULT SetText(
                        [in] int row, 
                        [in] int col, 
                        [in] BSTR pStr);
        [id(0x00000047), helpstring("Returns the text style name of a row and column.")]
        HRESULT GetCellTextStyle(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] BSTR* bstrName);
        [id(0x00000048), helpstring("Specifies the text style name of a row and column.")]
        HRESULT SetCellTextStyle(
                        [in] int row, 
                        [in] int col, 
                        [in] BSTR bstrName);
        [id(0x00000049), helpstring("Returns the text height of a row and column.")]
        HRESULT GetCellTextHeight(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] double* pTextHeight);
        [id(0x0000004a), helpstring("Specifies the text height of a row and column.")]
        HRESULT SetCellTextHeight(
                        [in] int row, 
                        [in] int col, 
                        [in] double TextHeight);
        [id(0x0000004b), helpstring("Returns the text rotation of a row and column.")]
        HRESULT GetTextRotation(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] AcRotationAngle* TextRotation);
        [id(0x0000004c), helpstring("Specifies the text rotation of a row and column.")]
        HRESULT SetTextRotation(
                        [in] int row, 
                        [in] int col, 
                        [in] AcRotationAngle TextRotation);
        [id(0x0000004d), helpstring("Returns whether auto scaling is turned on for a row and column.")]
        HRESULT GetAutoScale(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x0000004e), helpstring("Specifies whether auto scaling is turned on for a row nad column.")]
        HRESULT SetAutoScale(
                        [in] int row, 
                        [in] int col, 
                        [in] VARIANT_BOOL bValue);
        [id(0x0000004f), helpstring("Returns the block table record ID associated with the block-type cell.")]
        HRESULT GetBlockTableRecordId(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] LONG_PTR* blkId);
        [id(0x00000050), helpstring("Specifies the block table record ID associated with the block-type cell.")]
        HRESULT SetBlockTableRecordId(
                        [in] int row, 
                        [in] int col, 
                        [in] LONG_PTR blkId, 
                        [in] VARIANT_BOOL bAutoFit);
        [id(0x00000051), helpstring("Returns the block scale value for a row and column.")]
        HRESULT GetBlockScale(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] double* blkScale);
        [id(0x00000052), helpstring("Specifies the block scale value for a row and column.")]
        HRESULT SetBlockScale(
                        [in] int row, 
                        [in] int col, 
                        [in] double blkScale);
        [id(0x00000053), helpstring("Returns the block rotation of a row and column.")]
        HRESULT GetBlockRotation(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] double* blkRotation);
        [id(0x00000054), helpstring("Specifies the block rotation of a row and column.")]
        HRESULT SetBlockRotation(
                        [in] int row, 
                        [in] int col, 
                        [in] double blkRotation);
        [id(0x00000070), helpstring("Returns the attribute value of a block cell.")]
        HRESULT GetBlockAttributeValue(
                        [in] int row, 
                        [in] int col, 
                        [in] LONG_PTR attdefId, 
                        [out, retval] BSTR* bstrValue);
        [id(0x00000071), helpstring("Specifies the attribute value of a block cell.")]
        HRESULT SetBlockAttributeValue(
                        [in] int row, 
                        [in] int col, 
                        [in] LONG_PTR attdefId, 
                        [in] BSTR bstrValue);
        [id(0x00000055), helpstring("Returns the grid lineweight value for the edge of a row and column.")]
        HRESULT GetCellGridLineWeight(
                        [in] int row, 
                        [in] int col, 
                        [in] AcCellEdgeMask edge, 
                        [out, retval] ACAD_LWEIGHT* plineweight);
        [id(0x00000056), helpstring("Specifies the grid lineweight value for the edges of a row and column.")]
        HRESULT SetCellGridLineWeight(
                        [in] int row, 
                        [in] int col, 
                        [in] int edges, 
                        [in] ACAD_LWEIGHT Lineweight);
        [id(0x00000057), helpstring("Returns the grid color value for the edge of a row and column.")]
        HRESULT GetCellGridColor(
                        [in] int row, 
                        [in] int col, 
                        [in] AcCellEdgeMask edge, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x00000058), helpstring("Specifies the grid color value for the edges of a row and column.")]
        HRESULT SetCellGridColor(
                        [in] int row, 
                        [in] int col, 
                        [in] int edges, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000059), helpstring("Returns whether the grid is visible for the edge of a row and column.")]
        HRESULT GetCellGridVisibility(
                        [in] int row, 
                        [in] int col, 
                        [in] AcCellEdgeMask edge, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x0000005a), helpstring("Specifies whether the grid is visible for the edges of a row and column.")]
        HRESULT SetCellGridVisibility(
                        [in] int row, 
                        [in] int col, 
                        [in] int edges, 
                        [in] VARIANT_BOOL bValue);
        [id(0x0000005f), helpstring("Adds columns to a table.")]
        HRESULT InsertColumns(
                        [in] int col, 
                        [in] double Width, 
                        [in] int cols);
        [id(0x00000060), helpstring("Deletes columns from a table.")]
        HRESULT DeleteColumns(
                        [in] int col, 
                        [in] int cols);
        [id(0x00000061), helpstring("Adds rows to a table.")]
        HRESULT InsertRows(
                        [in] int row, 
                        [in] double Height, 
                        [in] int Rows);
        [id(0x00000062), helpstring("Deletes rows from a table.")]
        HRESULT DeleteRows(
                        [in] int row, 
                        [in] int Rows);
        [id(0x00000063), helpstring("Merges cells together into a single cell.")]
        HRESULT MergeCells(
                        [in] int minRow, 
                        [in] int maxRow, 
                        [in] int minCol, 
                        [in] int maxCol);
        [id(0x00000064), helpstring("Unmerges cells.")]
        HRESULT UnmergeCells(
                        [in] int minRow, 
                        [in] int maxRow, 
                        [in] int minCol, 
                        [in] int maxCol);
        [id(0x00000065), helpstring("Returns whether the specified cells are merged.")]
        HRESULT IsMergedCell(
                        [in] int row, 
                        [in] int col, 
                        [out] int* minRow, 
                        [out] int* maxRow, 
                        [out] int* minCol, 
                        [out] int* maxCol, 
                        [out, retval] VARIANT_BOOL* pbValue);
        [id(0x00000072), helpstring("Returns the field object ID that corresponds to a cell.")]
        HRESULT GetFieldId(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] LONG_PTR* fieldId);
        [id(0x00000073), helpstring("Specifies the field object ID for a cell.")]
        HRESULT SetFieldId(
                        [in] int row, 
                        [in] int col, 
                        [in] LONG_PTR fieldId);
        [id(0x00000066), helpstring("Generates the layout and content of a table.")]
        HRESULT GenerateLayout();
        [id(0x00000067), helpstring("Recomputes the referenced table block with changes made to the table.")]
        HRESULT RecomputeTableBlock([in] VARIANT_BOOL bForceUpdate);
        [id(0x00000068), helpstring("Not implemented. Determines whether a vertex is on a table.")]
        HRESULT HitTest(
                        [in] VARIANT wpt, 
                        [in] VARIANT wviewVec, 
                        [out] int* resultRowIndex, 
                        [out] int* resultColumnIndex, 
                        [out, retval] VARIANT_BOOL* bReturn);
        [id(0x00000069), helpstring("Not implemented. Selects a cell in a table.")]
        HRESULT Select(
                        [in] VARIANT wpt, 
                        [in] VARIANT wvwVec, 
                        [in] VARIANT wvwxVec, 
                        [in] double wxaper, 
                        [in] double wyaper, 
                        [in] VARIANT_BOOL allowOutside, 
                        [out] int* resultRowIndex, 
                        [out] int* resultColumnIndex, 
                        [out, retval] VARIANT* pPaths);
        [id(0x0000006a), helpstring("Not implemented. Selects a subregion in a table.")]
        HRESULT SelectSubRegion(
                        [in] VARIANT wpt1, 
                        [in] VARIANT wpt2, 
                        [in] VARIANT wvwVec, 
                        [in] VARIANT wvwxVec, 
                        [in] AcSelectType seltype, 
                        [in] VARIANT_BOOL bIncludeCurrentSelection, 
                        [out] int* rowMin, 
                        [out] int* rowMax, 
                        [out] int* colMin, 
                        [out] int* colMax, 
                        [out, retval] VARIANT* pPaths);
        [id(0x0000006b), helpstring("Not implemented. Reselects a subregion in a table.")]
        HRESULT ReselectSubRegion([out, retval] VARIANT* pPaths);
        [id(0x0000006c), helpstring("Not implemented. Returns a subregion in a table.")]
        HRESULT GetSubSelection(
                        [out] int* rowMin, 
                        [out] int* rowMax, 
                        [out] int* colMin, 
                        [out] int* colMax);
        [id(0x0000006d), helpstring("Not implemented. Specifies a subregion in a table.")]
        HRESULT SetSubSelection(
                        [in] int rowMin, 
                        [in] int rowMax, 
                        [in] int colMin, 
                        [in] int colMax);
        [id(0x0000006e), helpstring("Not implemented. Clears a subregion in a table.")]
        HRESULT ClearSubSelection();
        [id(0x0000006f), propget, helpstring("Not implemented. Determines whether a table has a subselection set.")]
        HRESULT HasSubSelection([out, retval] VARIANT_BOOL* pbValue);
        [id(0x00000074), propget, helpstring("Not implemented. Determines whether a table can be regenerated.")]
        HRESULT RegenerateTableSuppressed([out, retval] VARIANT_BOOL* bValue);
        [id(0x00000074), propput, helpstring("Not implemented. Determines whether a table can be regenerated.")]
        HRESULT RegenerateTableSuppressed([in] VARIANT_BOOL bValue);
        [id(0x00000075), helpstring("Not implemented. Returns the row data type and unit type for the specified row type.")]
        HRESULT GetDataType(
                        [in] AcRowType rowType, 
                        [out] AcValueDataType* pDataType, 
                        [out] AcValueUnitType* pUnitType);
        [id(0x00000076), helpstring("Not implemented. Specifies the row data type and unit type for a row type.")]
        HRESULT SetDataType(
                        [in] int rowTypes, 
                        [in] AcValueDataType dataType, 
                        [in] AcValueUnitType unitType);
        [id(0x00000077), helpstring("Not implemented. Returns the format of a row type.")]
        HRESULT GetFormat(
                        [in] AcRowType rowType, 
                        [out, retval] BSTR* pFormat);
        [id(0x00000078), helpstring("Not implemented. Specifies the format of a row type.")]
        HRESULT SetFormat(
                        [in] int rowTypes, 
                        BSTR pFormat);
        [id(0x00000079), helpstring("Not implemented. Returns the formatted text string of a row and column.")]
        HRESULT FormatValue(
                        [in] int row, 
                        [in] int col, 
                        AcFormatOption nOption, 
                        BSTR* pVal);
        [id(0x0000079a), helpstring("Not implemented. Returns the cell data type and unit type of a row and column.")]
        HRESULT GetCellDataType(
                        [in] int row, 
                        [in] int col, 
                        [out] AcValueDataType* pDataType, 
                        [out] AcValueUnitType* pUnitType);
        [id(0x0000079b), helpstring("Not implemented. Specifies the cell data type and unit type of a row and column.")]
        HRESULT SetCellDataType(
                        [in] int row, 
                        [in] int col, 
                        AcValueDataType dataType, 
                        AcValueUnitType unitType);
        [id(0x0000079c), helpstring("Not implemented. Returns the cell format for the specified row and column.")]
        HRESULT GetCellFormat(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] BSTR* pFormat);
        [id(0x0000079d), helpstring("Not implemented. Specifies the cell format of a row and column.")]
        HRESULT SetCellFormat(
                        [in] int row, 
                        [in] int col, 
                        BSTR pFormat);
        [id(0x0000079e), helpstring("Not implemented. Returns the cell value of a row and column.")]
        HRESULT GetCellValue(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000079f), helpstring("Not implemented. Specifies the cell value of a row and column.")]
        HRESULT SetCellValue(
                        [in] int row, 
                        [in] int col, 
                        VARIANT val);
        [id(0x000008a0), helpstring("Not implemented. Specifies the cell value from existing text in a row and column.")]
        HRESULT SetCellValueFromText(
                        [in] int row, 
                        [in] int col, 
                        [in] BSTR val, 
                        [in] AcParseOption nOption);
        [id(0x000008a1), helpstring("Not implemented. Resets the cell value of a row and column.")]
        HRESULT ResetCellValue(
                        [in] int row, 
                        [in] int col);
        [id(0x000008a2), helpstring("Checks if the content of the specified cell is empty.")]
        HRESULT IsEmpty(
                        [in] int nRow, 
                        [in] int nCol, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x000008a5), helpstring("Creates new content in a cell")]
        HRESULT CreateContent(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nIndex, 
                        [out, retval] int* pInt);
        [id(0x000008a6), helpstring("Moves a content in a cell from one position to another position within the cell")]
        HRESULT MoveContent(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nFromIndex, 
                        [in] int nToIndex);
        [id(0x000008a7), helpstring("Deletes a content from a cell")]
        HRESULT DeleteContent(
                        [in] int nRow, 
                        [in] int nCol);
        [id(0x000008a9), helpstring("Gets the cell value for the specified row and column and nContent.")]
        HRESULT GetValue(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] VARIANT* pAcValue);
        [id(0x000008b0), helpstring("Sets the cell value by parsing the text for the specified row and column and nContent.")]
        HRESULT SetValue(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] VARIANT acValue);
        [id(0x000008b1), helpstring("Sets the value of the content at the specified content index.")]
        HRESULT SetValueFromText(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] BSTR szText, 
                        [in] AcParseOption nOption);
        [id(0x000008b3), helpstring("Gets the cell format for the specified row and column and nContent.")]
        HRESULT GetDataFormat(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] BSTR* pValue);
        [id(0x000008b4), helpstring("Sets the cell format for the specified row and column and nContent.")]
        HRESULT SetDataFormat(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] BSTR szFormat);
        [id(0x000008b5), helpstring("Gets the text value value for the specified row and column  and nContent.")]
        HRESULT GetTextString(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] BSTR* pTextString);
        [id(0x000008b7), helpstring("Sets the text value value for the specified row and column.")]
        HRESULT SetTextString(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] BSTR Text);
        [id(0x000008b8), helpstring("Returns the field object id associated to the specifed cell  and nContent.")]
        HRESULT GetFieldId2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] LONG_PTR* pAcDbObjectId);
        [id(0x000008b9), helpstring("Sets  the field object id associated to the specifed cell  and nContent.")]
        HRESULT SetFieldId2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] LONG_PTR acDbObjectId, 
                        [in] AcCellOption nflag);
        [id(0x000008c1), helpstring("Gets the block table record id associated to the block-type cell  and nContent.")]
        HRESULT GetBlockTableRecordId2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] LONG_PTR* pAcDbObjectId);
        [id(0x000008c2), helpstring("Sets the block table record id associated to the block-type cell  and nContent.")]
        HRESULT SetBlockTableRecordId2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] LONG_PTR blkId, 
                        [in] VARIANT_BOOL autoFit);
        [id(0x000008c3), helpstring("Returns the attribute value from the Specified block cell for the attribute definition object contained in the block  and nContent.")]
        HRESULT GetBlockAttributeValue2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] LONG_PTR blkId, 
                        [out, retval] BSTR* Value);
        [id(0x000008c4), helpstring("Sets the attribute value from the Specified block cell for the attribute definition object contained in the block  and nContent.")]
        HRESULT SetBlockAttributeValue2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] LONG_PTR blkId, 
                        [in] BSTR Value);
        [id(0x000008c7), helpstring("Gets the custom data value set in cell, row, or column.")]
        HRESULT GetCustomData(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] BSTR szKey, 
                        [out] VARIANT* pData);
        [id(0x000008c8), helpstring("Sets the custom data value set in cell, row, or column.")]
        HRESULT SetCustomData(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] BSTR szKey, 
                        [in] VARIANT data);
        [id(0x000008c9), helpstring("Gets the cell style of cell, row, or column.")]
        HRESULT GetCellStyle(
                        [in] int nRow, 
                        [in] int nCol, 
                        [out, retval] BSTR* pCellStyle);
        [id(0x000008d0), helpstring("Sets the the cell style of cell, row, or column.")]
        HRESULT SetCellStyle(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] BSTR szCellStyle);
        [id(0x000008d4), helpstring("Returns the true color value for the specified row type  and nContent.")]
        HRESULT GetContentColor2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x000008d5), helpstring("Sets the true color value for the specified row type  and nContent.")]
        HRESULT SetContentColor2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x000008d6), helpstring("Gets the row data type and unit type for the specified row type  and nContent.")]
        HRESULT GetDataType2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out] AcValueDataType* pDataType, 
                        [out] AcValueUnitType* pUnitType);
        [id(0x000008d7), helpstring("Sets the row data type and unit type for the specified row type  and nContent.")]
        HRESULT SetDataType2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] AcValueDataType dataType, 
                        [in] AcValueUnitType unitType);
        [id(0x000008d8), helpstring("Gets the text style name for the specified row and column  and nContent.")]
        HRESULT GetTextStyle2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] BSTR* pbstrStyleName);
        [id(0x000008d9), helpstring("Sets the text style name for the specified row and column  and nContent.")]
        HRESULT SetTextStyle2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] BSTR bstrStyleName);
        [id(0x000008e0), helpstring("Returns the text height for the specified row and column  and nContent.")]
        HRESULT GetTextHeight2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] double* pHeight);
        [id(0x000008e1), helpstring("Gets the text height for the specified row and column  and nContent.")]
        HRESULT SetTextHeight2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] double Height);
        [id(0x00008de2), helpstring("Gets the rotation angle of the content at the specified content index.")]
        HRESULT GetRotation(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] double* pValue);
        [id(0x000008e3), helpstring("Sets the rotation angle of the content at the specified content index.")]
        HRESULT SetRotation(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] double Value);
        [id(0x000008e4), helpstring("Returns the auto scale flag value for the specified row and column  and nContent.")]
        HRESULT GetAutoScale2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] VARIANT_BOOL* bAutoScale);
        [id(0x00008de5), helpstring("Sets the auto scale flag value for the specified row and column  and nContent.")]
        HRESULT SetAutoScale2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] VARIANT_BOOL bAutoFit);
        [id(0x000008e6), helpstring("Gets the scale of the content at the specified content index.")]
        HRESULT GetScale(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] double* pScale);
        [id(0x000008e7), helpstring("Sets the scale of the content at the specified content index.")]
        HRESULT SetScale(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] double scale);
        [id(0x000008e8), helpstring("Removes all the overrides in cell, row, or column.")]
        HRESULT RemoveAllOverrides(
                        [in] int nRow, 
                        [in] int nCol);
        [id(0x000008e9), helpstring("Gets the gridLineWeight value for the specified gridLineType(s) and row type(s)   and nContent.")]
        HRESULT GetGridLineWeight2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [out, retval] ACAD_LWEIGHT* plineweight);
        [id(0x000008f0), helpstring("Sets the gridLineWeight value for the specified gridLineType(s) and row type(s)   and nContent.")]
        HRESULT SetGridLineWeight2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [in] ACAD_LWEIGHT Lineweight);
        [id(0x000008f1), helpstring("Gets the grid line type of cell, row, or column.")]
        HRESULT GetGridLinetype(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [out, retval] LONG_PTR* pacDbObjId);
        [id(0x000008f2), helpstring("Sets the grid line type of cell, row, or column.")]
        HRESULT SetGridLinetype(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [in] LONG_PTR idLinetype);
        [id(0x000008f3), helpstring("Returns the gridColor value for the specified gridLineType and row type  and nContent.")]
        HRESULT GetGridColor2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x000008f4), helpstring("Sets the gridColor value for the specified gridLineType and row type  and nContent.")]
        HRESULT SetGridColor2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x000008f5), helpstring("Returns the gridVisibility value for the specified gridLineType and row type.")]
        HRESULT GetGridVisibility2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [out, retval] VARIANT_BOOL* bVisible);
        [id(0x000008f6), helpstring("Sets the gridVisibility value for the specified gridLineType and row type.")]
        HRESULT SetGridVisibility2(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [in] VARIANT_BOOL bVisible);
        [id(0x000008f7), helpstring("Gets the grid double line spacing from cell, row, or column")]
        HRESULT GetGridDoubleLineSpacing(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [out, retval] double* pValue);
        [id(0x000008f8), helpstring("Sets the grid double line spacing in cell, row, or column.")]
        HRESULT SetGridDoubleLineSpacing(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [in] double fSpacing);
        [id(0x00000904), propput, helpstring("Enables or disables table breaking")]
        HRESULT EnableBreak([in] VARIANT_BOOL rhs);
        [id(0x00000905), helpstring("Returns the break height of the specified table when table breaking is enabled.")]
        HRESULT GetBreakHeight(
                        [in] int nIndex, 
                        [out, retval] double* pHeight);
        [id(0x00000906), helpstring("Sets the break height of the specified table when table breaking is enabled.")]
        HRESULT SetBreakHeight(
                        [in] int nIndex, 
                        [in] double Height);
        [id(0x00000907), helpstring("Gets the content type of the content at the specified content index.")]
        HRESULT GetContentType(
                        [in] int nRow, 
                        [in] int nCol, 
                        [out, retval] AcCellContentType* pType);
        [id(0x00000914), helpstring("Gets the margin of cell, row, or column.")]
        HRESULT GetMargin(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcCellMargin nMargin, 
                        [out, retval] double* pValue);
        [id(0x00000916), helpstring("Sets the margin of cell, row, or column.")]
        HRESULT SetMargin(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcCellMargin nMargins, 
                        [in] double fMargin);
        [id(0x00000917), helpstring("Gets the content layout of the cell.")]
        HRESULT GetContentLayout(
                        [in] int row, 
                        [in] int col, 
                        [out, retval] AcCellContentLayout* pLayout);
        [id(0x00000918), helpstring("Sets the content layout of the cell.")]
        HRESULT SetContentLayout(
                        [in] int row, 
                        [in] int col, 
                        [in] AcCellContentLayout nLayout);
        [id(0x00000922), helpstring("Gets the override in cell, row, column, or content.")]
        HRESULT GetOverride(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] AcCellProperty* pValue);
        [id(0x00000923), helpstring("Sets the override in cell, row, column, or content.")]
        HRESULT SetOverride(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] AcCellProperty nProp);
        [id(0x00000924), helpstring("Gets the grid line style of cell, row, or column.")]
        HRESULT GetGridLineStyle(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineType, 
                        [out, retval] AcGridLineStyle* pStyle);
        [id(0x00000925), helpstring("Sets the grid line style of cell, row, or column.")]
        HRESULT SetGridLineStyle(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcGridLineType nGridLineTypes, 
                        [in] AcGridLineStyle nLineStyle);
        [id(0x00000929), helpstring("Inserts one or more rows at the specified index and inherits the row properties from specified row.")]
        HRESULT InsertRowsAndInherit(
                        [in] int nIndex, 
                        [in] int nInheritFrom, 
                        [in] int nNumRows);
        [id(0x00000931), helpstring("Inserts one or more columns at the specified index and inherits the column properties from specified column.")]
        HRESULT InsertColumnsAndInherit(
                        [in] int col, 
                        [in] int nInheritFrom, 
                        [in] int nNumCols);
        [id(0x00000932), helpstring("Returns true if the content at the specified index is a formula.")]
        HRESULT GetHasFormula(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x00000933), helpstring("Gets the formula if the content at the specified content index has a formula.")]
        HRESULT GetFormula(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [out, retval] BSTR* pszFormula);
        [id(0x00000934), helpstring("Sets the formula at the specified content index.")]
        HRESULT SetFormula(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] int nContent, 
                        [in] BSTR pszFormula);
        [id(0x00000936), helpstring("Checks if the content of the specified cell can be modified.")]
        HRESULT IsContentEditable(
                        [in] int nRow, 
                        [in] int nCol, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x00000937), helpstring("Checks if the format of the specified cell can be modified.")]
        HRESULT IsFormatEditable(
                        [in] int nRow, 
                        [in] int nCol, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x00000938), helpstring("Gets the cell state.")]
        HRESULT GetCellState(
                        [in] int nRow, 
                        [in] int nCol, 
                        [out, retval] AcCellState* pCellState);
        [id(0x00000939), helpstring("Sets the cell state.")]
        HRESULT SetCellState(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] AcCellState nLock);
        [id(0x00000940), helpstring("Enables or disables the merge all flag in row or column.")]
        HRESULT EnableMergeAll(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] VARIANT_BOOL bEnable);
        [id(0x00000941), helpstring("Returns whether merge all flag is enabled or not in row or column.")]
        HRESULT IsMergeAllEnabled(
                        [in] int nRow, 
                        [in] int nCol, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x0000fff0), propget, helpstring("Determines whether table breaking is in use. When enabled, the table will break automatically at the current specified height.")]
        HRESULT BreaksEnabled([out, retval] VARIANT_BOOL* bEnabled);
        [id(0x0000fff0), propput, helpstring("Determines whether table breaking is in use. When enabled, the table will break automatically at the current specified height.")]
        HRESULT BreaksEnabled([in] VARIANT_BOOL bEnabled);
        [id(0x0000fff1), propget, helpstring("Determines whether the first set of label rows will be repeated at the top of each broken table part.")]
        HRESULT RepeatTopLabels([out, retval] VARIANT_BOOL* bEnabled);
        [id(0x0000fff1), propput, helpstring("Determines whether the first set of label rows will be repeated at the top of each broken table part.")]
        HRESULT RepeatTopLabels([in] VARIANT_BOOL bEnabled);
        [id(0x0000fff2), propget, helpstring("Determines whether the bottom set of label rows is repeated at the bottom of each broken table part.")]
        HRESULT RepeatBottomLabels([out, retval] VARIANT_BOOL* bEnabled);
        [id(0x0000fff2), propput, helpstring("Determines whether the bottom set of label rows is repeated at the bottom of each broken table part.")]
        HRESULT RepeatBottomLabels([in] VARIANT_BOOL bEnabled);
        [id(0x0000fff3), propget, helpstring("Determines the direction that parts of the table flow.")]
        HRESULT TableBreakFlowDirection([out, retval] AcTableFlowDirection* pDir);
        [id(0x0000fff3), propput, helpstring("Determines the direction that parts of the table flow.")]
        HRESULT TableBreakFlowDirection([in] AcTableFlowDirection pDir);
        [id(0x0000fff4), propget, helpstring("When enabled, each table part can be moved outside of the boundary. When not enabled, the table parts are contained within a rectangular boundary.")]
        HRESULT AllowManualPositions([out, retval] VARIANT_BOOL* bEnabled);
        [id(0x0000fff4), propput, helpstring("When enabled, each table part can be moved outside of the boundary. When not enabled, the table parts are contained within a rectangular boundary.")]
        HRESULT AllowManualPositions([in] VARIANT_BOOL bEnabled);
        [id(0x0000fff5), propget, helpstring("Allows the heights of broken table parts to have their own breaking height. When set to No, all table parts will break at the height of the initial table part.")]
        HRESULT AllowManualHeights([out, retval] VARIANT_BOOL* bEnabled);
        [id(0x0000fff5), propput, helpstring("Allows the heights of broken table parts to have their own breaking height. When set to No, all table parts will break at the height of the initial table part.")]
        HRESULT AllowManualHeights([in] VARIANT_BOOL bEnabled);
        [id(0x0000fff6), propget, helpstring("Sets the breaking height for the initial table part and any other table parts that do not have manual heights set.")]
        HRESULT TableBreakHeight([out, retval] double* pHeight);
        [id(0x0000fff6), propput, helpstring("Sets the breaking height for the initial table part and any other table parts that do not have manual heights set.")]
        HRESULT TableBreakHeight([in] double pHeight);
        [id(0x0000fff7), propget, helpstring("Controls the spacing between the broken table parts. Depending on the break direction this will be a horizontal or vertical spacing.")]
        HRESULT BreakSpacing([out, retval] double* pSpacing);
        [id(0x0000fff7), propput, helpstring("Controls the spacing between the broken table parts. Depending on the break direction this will be a horizontal or vertical spacing.")]
        HRESULT BreakSpacing([in] double pSpacing);
        [id(0x0000fff8), helpstring("Gets the columns name.")]
        HRESULT GetColumnName(
                        [in] int nIndex, 
                        [out, retval] BSTR* Name);
        [id(0x0000fff9), helpstring("Sets the columns name.")]
        HRESULT SetColumnName(
                        [in] int nIndex, 
                        [in] BSTR Name);
        [id(0x0000fffa), helpstring("Sets the tooltip string for cell, row, or column.")]
        HRESULT SetToolTip(
                        [in] int nRow, 
                        [in] int nCol, 
                        [in] BSTR tip);
    };

    
    
        
        
    

    
    
        
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
    

    
    
        
        
        
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
        
        
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
    

    
    
        
        
        
        
    

    
    
        
        
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    
    
        
        
    

    [
      odl,
      uuid(43708155-8D0F-45E7-8432-1AFAB5A0CE92),
      helpstring("TeighaX Interface of a dimension measuring the length of an arc"),
      dual,
      oleautomation
    ]
    interface IAcadDimArcLength : IAcadDimension {
        [id(0x00000003), propget, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([out, retval] VARIANT_BOOL* bAlternate);
        [id(0x00000003), propput, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([in] VARIANT_BOOL bAlternate);
        [id(0x00000004), propget, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000004), propput, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([in] AcDimPrecision precision);
        [id(0x00000005), propget, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([out, retval] ACAD_NOUNITS* scale);
        [id(0x00000005), propput, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([in] ACAD_NOUNITS scale);
        [id(0x00000006), propget, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([out, retval] double* Distance);
        [id(0x00000006), propput, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([in] double Distance);
        [id(0x00000007), propget, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([out, retval] AcDimPrecision* Distance);
        [id(0x00000007), propput, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([in] AcDimPrecision Distance);
        [id(0x00000009), propget, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([out, retval] AcDimUnits* Units);
        [id(0x00000009), propput, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([in] AcDimUnits Units);
        [id(0x0000000b), propget, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([out, retval] BSTR* prefix);
        [id(0x0000000b), propput, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([in] BSTR prefix);
        [id(0x0000000c), propget, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([out, retval] BSTR* prefix);
        [id(0x0000000c), propput, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([in] BSTR prefix);
        [id(0x0000000d), propget, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000e), propget, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000e), propput, helpstring("Specifies or returns the color of extension lines.")]
        HRESULT ExtensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000f), propget, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([out, retval] AcDimPrecision* Prec);
        [id(0x0000000f), propput, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([in] AcDimPrecision Prec);
        [id(0x00000010), propget, helpstring("Specifies or returns how far dimension lines extend beyond extension lines when using dimension lines with oblique strokes.")]
        HRESULT DimensionLineExtend([out, retval] double* extend);
        [id(0x00000010), propput, helpstring("Specifies or returns how far dimension lines extend beyond extension lines when using dimension lines with oblique strokes.")]
        HRESULT DimensionLineExtend([in] double extend);
        [id(0x00000011), propget, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([out, retval] double* extend);
        [id(0x00000011), propput, helpstring("Specifies or returns how far extension lines extend beyond dimension lines.")]
        HRESULT ExtensionLineExtend([in] double extend);
        [id(0x00000012), propget, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([out, retval] AcDimFit* fittype);
        [id(0x00000012), propput, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([in] AcDimFit fittype);
        [id(0x00000013), propget, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([out, retval] AcDimFractionType* Type);
        [id(0x00000013), propput, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([in] AcDimFractionType Type);
        [id(0x00000014), propget, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([out, retval] AcDimHorizontalJustification* Type);
        [id(0x00000014), propput, helpstring("Specifies or returns the horizontal position of dimension text.")]
        HRESULT HorizontalTextPosition([in] AcDimHorizontalJustification Type);
        [id(0x00000015), propget, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([out, retval] ACAD_NOUNITS* Type);
        [id(0x00000015), propput, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([in] ACAD_NOUNITS Type);
        [id(0x00000016), propget, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([out, retval] AcDimLUnits* format);
        [id(0x00000016), propput, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([in] AcDimLUnits format);
        [id(0x00000017), propget, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([out, retval] ACAD_LWEIGHT* lweight);
        [id(0x00000017), propput, helpstring("Specifies or returns the lineweight of extension lines.")]
        HRESULT ExtensionLineWeight([in] ACAD_LWEIGHT lweight);
        [id(0x00000018), propget, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([out, retval] double* Distance);
        [id(0x00000018), propput, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([in] double Distance);
        [id(0x00000019), propget, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x00000019), propput, helpstring("Specifies or returns whether the first dimension line displays.")]
        HRESULT DimLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001a), propget, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001a), propput, helpstring("Specifies or returns whether the second dimension line displays.")]
        HRESULT DimLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001b), propget, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001b), propput, helpstring("Specifies or returns whether the first extension line displays.")]
        HRESULT ExtLine1Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001c), propget, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001c), propput, helpstring("Specifies or returns whether the second extension line displays.")]
        HRESULT ExtLine2Suppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001d), propget, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001d), propput, helpstring("Specifies or returns whether dimension lines are drawn outside of extension lines.")]
        HRESULT DimLineInside([in] VARIANT_BOOL bInside);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([in] VARIANT_BOOL bInside);
        [id(0x00000020), propget, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000020), propput, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([in] VARIANT_BOOL bInside);
        [id(0x00000021), propget, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000021), propput, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([in] VARIANT_BOOL bInside);
        [id(0x00000023), propget, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([out, retval] double* Offset);
        [id(0x00000023), propput, helpstring("Specifies or returns the distance between extension lines and the object being dimensioned.")]
        HRESULT ExtensionLineOffset([in] double Offset);
        [id(0x00000030), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000030), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000031), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000031), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000032), propget, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000032), propput, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000033), propget, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000033), propput, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000034), propget, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000034), propput, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000035), propget, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000035), propput, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000036), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000036), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000037), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000037), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000038), propget, helpstring("SSpecifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000038), propput, helpstring("SSpecifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000039), propget, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000039), propput, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003a), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003a), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x0000003b), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003b), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003c), propget, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000003c), propput, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x0000003e), propget, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003e), propput, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Type([in] AcDimArrowheadType Type);
        [id(0x0000003f), propget, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003f), propput, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Type([in] AcDimArrowheadType Type);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] double* bVal);
        [id(0x00000041), propget, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([out, retval] BSTR* BlockName);
        [id(0x00000041), propput, helpstring("Specifies or returns the arrowhead of the first dimension line.")]
        HRESULT Arrowhead1Block([in] BSTR BlockName);
        [id(0x00000042), propget, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([out, retval] BSTR* BlockName);
        [id(0x00000042), propput, helpstring("Specifies or returns the arrowhead of the second dimension line.")]
        HRESULT Arrowhead2Block([in] BSTR BlockName);
        [id(0x00000044), propget, helpstring("Specifies or returns a point on the arc.")]
        HRESULT ArcPoint([out, retval] VARIANT* pVal);
        [id(0x00000044), propput, helpstring("Specifies or returns a point on the arc.")]
        HRESULT ArcPoint([in] VARIANT pVal);
        [id(0x00000045), propget, helpstring("Specifies or returns the start point of the first extension line.")]
        HRESULT ExtLine1Point([out, retval] VARIANT* pVal);
        [id(0x00000045), propput, helpstring("Specifies or returns the start point of the first extension line.")]
        HRESULT ExtLine1Point([in] VARIANT pVal);
        [id(0x00000046), propget, helpstring("Specifies or returns the start point of the second extension line.")]
        HRESULT ExtLine2Point([out, retval] VARIANT* pVal);
        [id(0x00000046), propput, helpstring("Specifies or returns the start point of the second extension line.")]
        HRESULT ExtLine2Point([in] VARIANT pVal);
        [id(0x00000047), propget, helpstring("Specifies or returns the center point of the arc.")]
        HRESULT CenterPoint([out, retval] VARIANT* pVal);
        [id(0x00000047), propput, helpstring("Specifies or returns the center point of the arc.")]
        HRESULT CenterPoint([in] VARIANT pVal);
        [id(0x00000048), propget, helpstring("Specifies or returns the start point of the first leader.")]
        HRESULT Leader1Point([out, retval] VARIANT* pVal);
        [id(0x00000048), propput, helpstring("Specifies or returns the start point of the first leader.")]
        HRESULT Leader1Point([in] VARIANT pVal);
        [id(0x00000049), propget, helpstring("Specifies or returns the start point of the second leader.")]
        HRESULT Leader2Point([out, retval] VARIANT* pVal);
        [id(0x00000049), propput, helpstring("Specifies or returns the start point of the second leader.")]
        HRESULT Leader2Point([in] VARIANT pVal);
        [id(0x0000004a), propget, helpstring("Specifies or returns whether the dimension is for a partial arc.")]
        HRESULT IsPartial([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000004a), propput, helpstring("Specifies or returns whether the dimension is for a partial arc.")]
        HRESULT IsPartial([in] VARIANT_BOOL pVal);
        [id(0x0000004b), propget, helpstring("Specifies or returns the start parameter of the arc.")]
        HRESULT ArcStartParam([out, retval] double* pVal);
        [id(0x0000004b), propput, helpstring("Specifies or returns the start parameter of the arc.")]
        HRESULT ArcStartParam([in] double pVal);
        [id(0x0000004c), propget, helpstring("Specifies or returns the end parameter of the arc.")]
        HRESULT ArcEndParam([out, retval] double* pVal);
        [id(0x0000004c), propput, helpstring("Specifies or returns the end parameter of the arc.")]
        HRESULT ArcEndParam([in] double pVal);
        [id(0x0000004d), propget, helpstring("Specifies or returns whether the dimension has a leader.")]
        HRESULT HasLeader([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000004d), propput, helpstring("Specifies or returns whether the dimension has a leader.")]
        HRESULT HasLeader([in] VARIANT_BOOL pVal);
        [id(0x00000043), propget, helpstring("Specifies or returns the location of the arc length dimension symbol.")]
        HRESULT SymbolPosition([out, retval] AcDimArcLengthSymbol* Position);
        [id(0x00000043), propput, helpstring("Specifies or returns the location of the arc length dimension symbol.")]
        HRESULT SymbolPosition([in] AcDimArcLengthSymbol Position);
        [id(0x00000050), propget, helpstring("Not implemented. Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([out, retval] BSTR* Linetype);
        [id(0x00000050), propput, helpstring("Not implemented. Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([in] BSTR Linetype);
        [id(0x00000051), propget, helpstring("Not implemented. Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([out, retval] BSTR* Linetype);
        [id(0x00000051), propput, helpstring("Not implemented. Specifies or returns the linetype of the first extension line.")]
        HRESULT ExtLine1Linetype([in] BSTR Linetype);
        [id(0x00000052), propget, helpstring("Not implemented. Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([out, retval] BSTR* Linetype);
        [id(0x00000052), propput, helpstring("Not implemented. Specifies or returns the linetype of the second extension line.")]
        HRESULT ExtLine2Linetype([in] BSTR Linetype);
        [id(0x00000053), propget, helpstring("Not implemented. Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([out, retval] VARIANT_BOOL* bFixedLen);
        [id(0x00000053), propput, helpstring("Not implemented. Specifies or returns whether fixed-length extension lines display.")]
        HRESULT ExtLineFixedLenSuppress([in] VARIANT_BOOL bFixedLen);
        [id(0x00000054), propget, helpstring("Not implemented. Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([out, retval] double* FixedLen);
        [id(0x00000054), propput, helpstring("Not implemented. Specifies or returns whether extension lines are a fixed length.")]
        HRESULT ExtLineFixedLen([in] double FixedLen);
        [id(0x00000626), propput, helpstring("Specifies the text suffix for all applicable linear dimension when change to sub-units")]
        HRESULT SubUnitsSuffix([in] BSTR rhs);
        [id(0x00000627), propget, helpstring("Specifies the sub-units scale factor for all applicable linear dimension")]
        HRESULT SubUnitsFactor([out, retval] double* factor);
        [id(0x00000627), propput, helpstring("Specifies the sub-units scale factor for all applicable linear dimension")]
        HRESULT SubUnitsFactor([in] double factor);
        [id(0x00000628), propget, helpstring("Specifies the text suffix for the alternate dimension when change to alternate sub-units")]
        HRESULT AltSubUnitsSuffix([out, retval] BSTR* suffix);
        [id(0x00000628), propput, helpstring("Specifies the text suffix for the alternate dimension when change to alternate sub-units")]
        HRESULT AltSubUnitsSuffix([in] BSTR suffix);
        [id(0x00000629), propget, helpstring("Specifies the alternate sub-units scale factor for all applicable linear dimension")]
        HRESULT AltSubUnitsFactor([out, retval] double* factor);
        [id(0x00000629), propput, helpstring("Specifies the alternate sub-units scale factor for all applicable linear dimension")]
        HRESULT AltSubUnitsFactor([in] double factor);
    };

    
    
        
        
        
    

    [
      odl,
      uuid(04AA7D6D-3F77-467D-A152-E268569E0AF0),
      helpstring("TeighaX Interface of a dimension measuring a large radius, also known as a jogged radius dimension"),
      dual,
      oleautomation
    ]
    interface IAcadDimRadialLarge : IAcadDimension {
        [id(0x00000003), propget, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([out, retval] VARIANT_BOOL* bAlternate);
        [id(0x00000003), propput, helpstring("Specifies or returns whether alternate units are used for dimensions.")]
        HRESULT AltUnits([in] VARIANT_BOOL bAlternate);
        [id(0x00000004), propget, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([out, retval] AcDimPrecision* precision);
        [id(0x00000004), propput, helpstring("Specifies or returns the number of decimal places for alternate unit dimension.")]
        HRESULT AltUnitsPrecision([in] AcDimPrecision precision);
        [id(0x00000005), propget, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([out, retval] ACAD_NOUNITS* scale);
        [id(0x00000005), propput, helpstring("Specifies or returns the scale factor for alternate unit dimensions.")]
        HRESULT AltUnitsScale([in] ACAD_NOUNITS scale);
        [id(0x00000006), propget, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([out, retval] double* Distance);
        [id(0x00000006), propput, helpstring("Specifies or returns the rounding value for alternate unit dimensions.")]
        HRESULT AltRoundDistance([in] double Distance);
        [id(0x00000007), propget, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([out, retval] AcDimPrecision* Distance);
        [id(0x00000007), propput, helpstring("Specifies or returns the number of decimal places for tolerance values of alternate unit dimensions.")]
        HRESULT AltTolerancePrecision([in] AcDimPrecision Distance);
        [id(0x00000009), propget, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([out, retval] AcDimUnits* Units);
        [id(0x00000009), propput, helpstring("Specifies or returns the unit measurement for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltUnitsFormat([in] AcDimUnits Units);
        [id(0x0000000b), propget, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([out, retval] BSTR* prefix);
        [id(0x0000000b), propput, helpstring("Specifies or returns the prefix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextPrefix([in] BSTR prefix);
        [id(0x0000000c), propget, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([out, retval] BSTR* prefix);
        [id(0x0000000c), propput, helpstring("Specifies or returns the suffix for alternate unit dimensions (not including angular dimensions).")]
        HRESULT AltTextSuffix([in] BSTR prefix);
        [id(0x0000002b), propget, helpstring("Specifies or returns the type of center mark used for radial dimensions.")]
        HRESULT CenterType([out, retval] AcDimCenterType* Type);
        [id(0x0000002b), propput, helpstring("Specifies or returns the type of center mark used for radial dimensions.")]
        HRESULT CenterType([in] AcDimCenterType Type);
        [id(0x0000002c), propget, helpstring("Specifies or returns the size of the center mark used for radial dimensions.")]
        HRESULT CenterMarkSize([out, retval] double* Type);
        [id(0x0000002c), propput, helpstring("Specifies or returns the size of the center mark used for radial dimensions.")]
        HRESULT CenterMarkSize([in] double Type);
        [id(0x0000000d), propget, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([out, retval] ACAD_COLOR* Type);
        [id(0x0000000d), propput, helpstring("Specifies or returns the color of dimension lines.")]
        HRESULT DimensionLineColor([in] ACAD_COLOR Type);
        [id(0x0000000f), propget, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([out, retval] AcDimPrecision* Prec);
        [id(0x0000000f), propput, helpstring("Specifies or returns the number of decimal places for the primary units of dimensions.")]
        HRESULT PrimaryUnitsPrecision([in] AcDimPrecision Prec);
        [id(0x00000013), propget, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([out, retval] AcDimFractionType* Type);
        [id(0x00000013), propput, helpstring("Specifies or returns how fractions display for dimensions.")]
        HRESULT FractionFormat([in] AcDimFractionType Type);
        [id(0x00000012), propget, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([out, retval] AcDimFit* fittype);
        [id(0x00000012), propput, helpstring("Specifies or returns how text and arrowheads are positioned when they do not fit in the space between extension lines.")]
        HRESULT Fit([in] AcDimFit fittype);
        [id(0x00000015), propget, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([out, retval] ACAD_NOUNITS* Type);
        [id(0x00000015), propput, helpstring("Specifies or returns the scale factor for linear dimensions.")]
        HRESULT LinearScaleFactor([in] ACAD_NOUNITS Type);
        [id(0x00000016), propget, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([out, retval] AcDimLUnits* format);
        [id(0x00000016), propput, helpstring("Specifies or returns the unit of measurement for linear dimensions.")]
        HRESULT UnitsFormat([in] AcDimLUnits format);
        [id(0x00000018), propget, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([out, retval] double* Distance);
        [id(0x00000018), propput, helpstring("Specifies or returns how measurements are rounded for all dimensions except angular dimensions.")]
        HRESULT RoundDistance([in] double Distance);
        [id(0x0000001a), propget, helpstring("Specifies or returns whether the dimension line displays for radial dimensions.")]
        HRESULT DimLineSuppress([out, retval] VARIANT_BOOL* bSuppress);
        [id(0x0000001a), propput, helpstring("Specifies or returns whether the dimension line displays for radial dimensions.")]
        HRESULT DimLineSuppress([in] VARIANT_BOOL bSuppress);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether dimension text displays between extension lines.")]
        HRESULT TextInsideAlign([in] VARIANT_BOOL bInside);
        [id(0x0000001f), propget, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x0000001f), propput, helpstring("Specifies or returns whether dimension text between extension lines is aligned horizontally or with the dimension line.")]
        HRESULT TextInside([in] VARIANT_BOOL bInside);
        [id(0x00000020), propget, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000020), propput, helpstring("Specifies or returns whether dimension lines display between extension lines when text is positioned outside of the extension lines.")]
        HRESULT ForceLineInside([in] VARIANT_BOOL bInside);
        [id(0x00000021), propget, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([out, retval] VARIANT_BOOL* bInside);
        [id(0x00000021), propput, helpstring("Specifies or returns whether dimension text displays outside of extension lines.")]
        HRESULT TextOutsideAlign([in] VARIANT_BOOL bInside);
        [id(0x00000030), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000030), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000031), propget, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000031), propput, helpstring("Specifies or returns whether leading zeros display for alternate unit dimensions.")]
        HRESULT AltSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000032), propget, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000032), propput, helpstring("Specifies or returns whether zero feet measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000033), propget, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000033), propput, helpstring("Specifies or returns whether zero inch measurements display for alternate unit dimensions.")]
        HRESULT AltSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000034), propget, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000034), propput, helpstring("Specifies or returns whether leading zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressLeadingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000035), propget, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000035), propput, helpstring("Specifies or returns whether trailing zeros display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressTrailingZeros([in] VARIANT_BOOL bVal);
        [id(0x00000036), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000036), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000037), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000037), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of alternate unit dimensions.")]
        HRESULT AltToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x00000038), propget, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000038), propput, helpstring("Specifies or returns whether zero feet measurements display for dimensions.")]
        HRESULT SuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x00000039), propget, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x00000039), propput, helpstring("Specifies or returns whether zero inch measurements display for dimensions.")]
        HRESULT SuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003a), propget, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003a), propput, helpstring("Specifies or returns whether zero feet measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroFeet([in] VARIANT_BOOL bVal);
        [id(0x0000003b), propget, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([out, retval] VARIANT_BOOL* bVal);
        [id(0x0000003b), propput, helpstring("Specifies or returns whether zero inch measurements display for tolerance values of dimensions.")]
        HRESULT ToleranceSuppressZeroInches([in] VARIANT_BOOL bVal);
        [id(0x0000003c), propget, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([out, retval] ACAD_LWEIGHT* weight);
        [id(0x0000003c), propput, helpstring("Specifies or returns the lineweight of dimension lines.")]
        HRESULT DimensionLineWeight([in] ACAD_LWEIGHT weight);
        [id(0x0000003d), propget, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x0000003d), propput, helpstring("Specifies or returns the size of dimension arrowheads.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x0000003f), propget, helpstring("Specifies or returns the arrowhead of the dimension line for radial dimensions.")]
        HRESULT ArrowheadType([out, retval] AcDimArrowheadType* Type);
        [id(0x0000003f), propput, helpstring("Specifies or returns the arrowhead of the dimension line for radial dimensions.")]
        HRESULT ArrowheadType([in] AcDimArrowheadType Type);
        [id(0x00000040), propget, helpstring("Returns the length measurement of linear dimensions or the angle measurement for angular dimensions.")]
        HRESULT Measurement([out, retval] double* bVal);
        [id(0x00000042), propget, helpstring("Specifies or returns a custom block to replace the arrowhead of the dimension line for radial dimensions.")]
        HRESULT ArrowheadBlock([out, retval] BSTR* BlockName);
        [id(0x00000042), propput, helpstring("Specifies or returns a custom block to replace the arrowhead of the dimension line for radial dimensions.")]
        HRESULT ArrowheadBlock([in] BSTR BlockName);
        [id(0x00000044), propget, helpstring("Not implemented. Specifies or returns the override center point.")]
        HRESULT OverrideCenter([out, retval] VARIANT* overrideCenterPos);
        [id(0x00000044), propput, helpstring("Not implemented. Specifies or returns the override center point.")]
        HRESULT OverrideCenter([in] VARIANT overrideCenterPos);
        [id(0x00000045), propget, helpstring("Not implemented. Specifies or returns the jog location.")]
        HRESULT JogLocation([out, retval] VARIANT* jogPos);
        [id(0x00000045), propput, helpstring("Not implemented. Specifies or returns the jog location.")]
        HRESULT JogLocation([in] VARIANT jogPos);
        [id(0x00000046), propget, helpstring("Not implemented. Specifies or returns the jog angle.")]
        HRESULT JogAngle([out, retval] ACAD_ANGLE* JogAngle);
        [id(0x00000046), propput, helpstring("Not implemented. Specifies or returns the jog angle.")]
        HRESULT JogAngle([in] ACAD_ANGLE JogAngle);
        [id(0x00000047), propget, helpstring("Not implemented. Specifies or returns the center point of the circle or arc.")]
        HRESULT Center([out, retval] VARIANT* pVar);
        [id(0x00000047), propput, helpstring("Not implemented. Specifies or returns the center point of the circle or arc.")]
        HRESULT Center([in] VARIANT pVar);
        [id(0x00000048), propget, helpstring("Not implemented. Specifies or returns the chord point of the circle or arc.")]
        HRESULT ChordPoint([out, retval] VARIANT* pVal);
        [id(0x00000048), propput, helpstring("Not implemented. Specifies or returns the chord point of the circle or arc.")]
        HRESULT ChordPoint([in] VARIANT pVal);
        [id(0x00000050), propget, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([out, retval] BSTR* Linetype);
        [id(0x00000050), propput, helpstring("Specifies the linetype of a dimension line.")]
        HRESULT DimensionLinetype([in] BSTR Linetype);
    };

    [
      odl,
      uuid(E652F8FB-5CB9-462C-8345-BB40E4E31D2D),
      helpstring("TeighaX Interface of a section plane entity created at the intersection of a plane and a solid"),
      dual,
      oleautomation
    ]
    interface IAcadSection : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the name of a section.")]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x00000001), propput, helpstring("Specifies or returns the name of a section.")]
        HRESULT Name([in] BSTR pbstrName);
        [id(0x00000002), propget, helpstring("Specifies or returns the type of a section.")]
        HRESULT State([out, retval] AcSectionState* pVal);
        [id(0x00000002), propput, helpstring("Specifies or returns the type of a section.")]
        HRESULT State([in] AcSectionState pVal);
        [id(0x00000003), propget, helpstring("Specifies or returns the direction in which a section is viewed.")]
        HRESULT ViewingDirection([out, retval] VARIANT* pVal);
        [id(0x00000003), propput, helpstring("Specifies or returns the direction in which a section is viewed.")]
        HRESULT ViewingDirection([in] VARIANT pVal);
        [id(0x00000004), propget, helpstring("Specifies or returns the vertical direction for a section.")]
        HRESULT VerticalDirection([out, retval] VARIANT* pVal);
        [id(0x00000004), propput, helpstring("Specifies or returns the vertical direction for a section.")]
        HRESULT VerticalDirection([in] VARIANT pVal);
        [id(0x00000005), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction.")]
        HRESULT Normal([out, retval] VARIANT* pVal);
        [id(0x00000006), propget, helpstring("Specifies or returns whether live section is turned on for a section.")]
        HRESULT LiveSectionEnabled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000006), propput, helpstring("Specifies or returns whether live section is turned on for a section.")]
        HRESULT LiveSectionEnabled([in] VARIANT_BOOL pVal);
        [id(0x00000007), propget, helpstring("Specifies or returns whether a section is transparent when shading is used.")]
        HRESULT IndicatorTransparency([out, retval] int* pVal);
        [id(0x00000007), propput, helpstring("Specifies or returns whether a section is transparent when shading is used.")]
        HRESULT IndicatorTransparency([in] int pVal);
        [id(0x00000008), propget, helpstring("Specifies or returns the color of a section when shading is used.")]
        HRESULT IndicatorFillColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x00000008), propput, helpstring("Specifies or returns the color of a section when shading is used.")]
        HRESULT IndicatorFillColor([in] IAcadAcCmColor* pColor);
        [id(0x00000009), propget, helpstring("Specifies or returns the elevation of a section relative to the z-axis of the object's coordinate system.")]
        HRESULT Elevation([out, retval] double* pVal);
        [id(0x00000009), propput, helpstring("Specifies or returns the elevation of a section relative to the z-axis of the object's coordinate system.")]
        HRESULT Elevation([in] double pVal);
        [id(0x0000000a), propget, helpstring("Specifies or returns top extents relative to the section’s elevation.")]
        HRESULT TopHeight([out, retval] double* pVal);
        [id(0x0000000a), propput, helpstring("Specifies or returns top extents relative to the section’s elevation.")]
        HRESULT TopHeight([in] double pVal);
        [id(0x0000000b), propget, helpstring("Specifies or returns bottom extents relative to the section’s elevation.")]
        HRESULT BottomHeight([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("Specifies or returns bottom extents relative to the section’s elevation.")]
        HRESULT BottomHeight([in] double pVal);
        [id(0x0000000c), propget, helpstring("Returns the number of vertices in the section line.")]
        HRESULT NumVertices([out, retval] int* pVal);
        [id(0x0000000d), propget, helpstring("Specifies or returns the vertices in the section line.")]
        HRESULT Vertices([out, retval] VARIANT* pVal);
        [id(0x0000000d), propput, helpstring("Specifies or returns the vertices in the section line.")]
        HRESULT Vertices([in] VARIANT pVal);
        [id(0x0000000e), propget, helpstring("Specifies or returns the coordinates of a single vertex in a section.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x0000000e), propput, helpstring("Specifies or returns the coordinates of a single vertex in a section.")]
        HRESULT Coordinate(
                        [in] int Index, 
                        [in] VARIANT pVal);
        [id(0x0000000f), helpstring("Adds a new vertex to a section line.")]
        HRESULT AddVertex(
                        [in] int nIndex, 
                        [in] VARIANT val);
        [id(0x00000010), helpstring("Removes a vertex from a section line.")]
        HRESULT RemoveVertex([in] int nIndex);
        [id(0x00000011), helpstring("Not implemented. Determines whether a vertex is on a section.")]
        HRESULT HitTest(
                        [in] VARIANT varPtHit, 
                        [out] VARIANT_BOOL* pHit, 
                        [out] int* pSegmentIndex, 
                        [out] VARIANT* pPtOnSegment, 
                        [out] AcSectionSubItem* pSubItem);
        [id(0x00000012), helpstring("Creates a jog in a section.")]
        HRESULT CreateJog([in] VARIANT varPt);
        [id(0x00000013), propget, helpstring("Gets the Section Settings object for a section.")]
        HRESULT Settings([out, retval] IAcadSectionSettings** pUnk);
        [id(0x00000014), helpstring("Not implemented. Generates two- or three-dimensional geometry for a section.")]
        HRESULT GenerateSectionGeometry(
                        [in] IAcadEntity* pEntity, 
                        [out] VARIANT* pIntersectionBoundaryObjs, 
                        [out] VARIANT* pIntersectionFillObjs, 
                        [out] VARIANT* pBackgroudnObjs, 
                        [out] VARIANT* pForegroudObjs, 
                        [out] VARIANT* pCurveTangencyObjs);
    };

    
    
        
        
        
    

    
    
        
        
        
        
        
        
        
        
        
    

    [
      odl,
      uuid(4DA42B6F-001B-46A8-B475-B9B7E46282F5),
      helpstring("TeighaX Interface of a container for section geometry settings"),
      dual,
      oleautomation
    ]
    interface IAcadSectionSettings : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies or returns the type for a section.")]
        HRESULT CurrentSectionType([out, retval] AcSectionType* pVal);
        [id(0x00000001), propput, helpstring("Specifies or returns the type for a section.")]
        HRESULT CurrentSectionType([in] AcSectionType pVal);
        [id(0x00000002), helpstring("Returns the type for a Section Settings object.")]
        HRESULT GetSectionTypeSettings(
                        [in] AcSectionType secType, 
                        [out, retval] IAcadSectionTypeSettings** pUnk);
    };

    
    
        
        
        
    

    [
      odl,
      uuid(AFA4A7BF-2ECA-4D53-B490-11342ACD58D7),
      helpstring("TeighaX Interface of the settings that apply to the various types of sections"),
      dual,
      oleautomation
    ]
    interface IAcadSectionTypeSettings : IDispatch {
        [id(0x00000001), propget, helpstring("Specifies or returns the options used to generate a section.")]
        HRESULT GenerationOptions([out, retval] AcSectionGeneration* pVal);
        [id(0x00000001), propput, helpstring("Specifies or returns the options used to generate a section.")]
        HRESULT GenerationOptions([in] AcSectionGeneration pVal);
        [id(0x00000002), propget, helpstring("Specifies or returns the objects used to generate a section.")]
        HRESULT SourceObjects([out, retval] VARIANT* pVal);
        [id(0x00000002), propput, helpstring("Specifies or returns the objects used to generate a section.")]
        HRESULT SourceObjects([in] VARIANT pVal);
        [id(0x00000003), propget, helpstring("Specifies or returns the block used for the output of section generation.")]
        HRESULT DestinationBlock([out, retval] VARIANT* pVal);
        [id(0x00000003), propput, helpstring("Specifies or returns the block used for the output of section generation.")]
        HRESULT DestinationBlock([in] VARIANT pVal);
        [id(0x00000004), propget, helpstring("Specifies or returns the file used for the output of section generation.")]
        HRESULT DestinationFile([out, retval] BSTR* pVal);
        [id(0x00000004), propput, helpstring("Specifies or returns the file used for the output of section generation.")]
        HRESULT DestinationFile([in] BSTR pVal);
        [id(0x00000033), propget, helpstring("Specifies or returns the color of an intersection boundary section.")]
        HRESULT IntersectionBoundaryColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x00000033), propput, helpstring("Specifies or returns the color of an intersection boundary section.")]
        HRESULT IntersectionBoundaryColor([in] IAcadAcCmColor* pColor);
        [id(0x00000034), propget, helpstring("Specifies or returns the layer of an intersection boundary section.")]
        HRESULT IntersectionBoundaryLayer([out, retval] BSTR* Layer);
        [id(0x00000034), propput, helpstring("Specifies or returns the layer of an intersection boundary section.")]
        HRESULT IntersectionBoundaryLayer([in] BSTR Layer);
        [id(0x00000035), propget, helpstring("Specifies or returns the linetype of an intersection boundary section.")]
        HRESULT IntersectionBoundaryLinetype([out, retval] BSTR* Linetype);
        [id(0x00000035), propput, helpstring("Specifies or returns the linetype of an intersection boundary section.")]
        HRESULT IntersectionBoundaryLinetype([in] BSTR Linetype);
        [id(0x00000036), propget, helpstring("Specifies or returns the linetype scale of an intersection boundary section.")]
        HRESULT IntersectionBoundaryLinetypeScale([out, retval] ACAD_NOUNITS* ltScale);
        [id(0x00000036), propput, helpstring("Specifies or returns the linetype scale of an intersection boundary section.")]
        HRESULT IntersectionBoundaryLinetypeScale([in] ACAD_NOUNITS ltScale);
        [id(0x00000037), propget, helpstring("Specifies or returns the plot style name of an intersection boundary section.")]
        HRESULT IntersectionBoundaryPlotStyleName([out, retval] BSTR* plotStyle);
        [id(0x00000037), propput, helpstring("Specifies or returns the plot style name of an intersection boundary section.")]
        HRESULT IntersectionBoundaryPlotStyleName([in] BSTR plotStyle);
        [id(0x00000038), propget, helpstring("Specifies or returns the lineweight of an intersection boundary section.")]
        HRESULT IntersectionBoundaryLineweight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000038), propput, helpstring("Specifies or returns the lineweight of an intersection boundary section.")]
        HRESULT IntersectionBoundaryLineweight([in] ACAD_LWEIGHT Lineweight);
        [id(0x00000039), propget, helpstring("Specifies or returns whether division lines are shown for an intersection boundary section.")]
        HRESULT IntersectionBoundaryDivisionLines([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000039), propput, helpstring("Specifies or returns whether division lines are shown for an intersection boundary section.")]
        HRESULT IntersectionBoundaryDivisionLines([in] VARIANT_BOOL pVal);
        [id(0x00000047), propget, helpstring("Specifies or returns whether an intersection fill section is visible.")]
        HRESULT IntersectionFillVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000047), propput, helpstring("Specifies or returns whether an intersection fill section is visible.")]
        HRESULT IntersectionFillVisible([in] VARIANT_BOOL pVal);
        [id(0x00000048), propget, helpstring("Specifies or returns the hatch pattern type of an intersection fill section.")]
        HRESULT IntersectionFillHatchPatternType([out, retval] AcPatternType* pVal);
        [id(0x00000048), propput, helpstring("Specifies or returns the hatch pattern type of an intersection fill section.")]
        HRESULT IntersectionFillHatchPatternType([in] AcPatternType pVal);
        [id(0x00000049), propget, helpstring("Specifies or returns the hatch pattern name of an intersection fill section.")]
        HRESULT IntersectionFillHatchPatternName([out, retval] BSTR* pVal);
        [id(0x00000049), propput, helpstring("Specifies or returns the hatch pattern name of an intersection fill section.")]
        HRESULT IntersectionFillHatchPatternName([in] BSTR pVal);
        [id(0x0000004a), propget, helpstring("Specifies or returns the hatch angle of an intersection fill section.")]
        HRESULT IntersectionFillHatchAngle([out, retval] ACAD_ANGLE* pVal);
        [id(0x0000004a), propput, helpstring("Specifies or returns the hatch angle of an intersection fill section.")]
        HRESULT IntersectionFillHatchAngle([in] ACAD_ANGLE pVal);
        [id(0x0000004b), propget, helpstring("Specifies or returns the hatch scale of an intersection fill section.")]
        HRESULT IntersectionFillHatchScale([out, retval] ACAD_NOUNITS* pVal);
        [id(0x0000004b), propput, helpstring("Specifies or returns the hatch scale of an intersection fill section.")]
        HRESULT IntersectionFillHatchScale([in] ACAD_NOUNITS pVal);
        [id(0x0000004c), propget, helpstring("Specifies or returns the hatch spacing of an intersection fill section.")]
        HRESULT IntersectionFillHatchSpacing([out, retval] double* pVal);
        [id(0x0000004c), propput, helpstring("Specifies or returns the hatch spacing of an intersection fill section.")]
        HRESULT IntersectionFillHatchSpacing([in] double pVal);
        [id(0x0000004d), propget, helpstring("Specifies or returns the color of an intersection fill section.")]
        HRESULT IntersectionFillColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x0000004d), propput, helpstring("Specifies or returns the color of an intersection fill section.")]
        HRESULT IntersectionFillColor([in] IAcadAcCmColor* pColor);
        [id(0x0000004e), propget, helpstring("Specifies or returns the layer of an intersection fill section.")]
        HRESULT IntersectionFillLayer([out, retval] BSTR* Layer);
        [id(0x0000004e), propput, helpstring("Specifies or returns the layer of an intersection fill section.")]
        HRESULT IntersectionFillLayer([in] BSTR Layer);
        [id(0x0000004f), propget, helpstring("Specifies or returns the linetype of an intersection fill section.")]
        HRESULT IntersectionFillLinetype([out, retval] BSTR* Linetype);
        [id(0x0000004f), propput, helpstring("Specifies or returns the linetype of an intersection fill section.")]
        HRESULT IntersectionFillLinetype([in] BSTR Linetype);
        [id(0x00000050), propget, helpstring("Specifies or returns the linetype scale of an intersection fill section.")]
        HRESULT IntersectionFillLinetypeScale([out, retval] ACAD_NOUNITS* ltScale);
        [id(0x00000050), propput, helpstring("Specifies or returns the linetype scale of an intersection fill section.")]
        HRESULT IntersectionFillLinetypeScale([in] ACAD_NOUNITS ltScale);
        [id(0x00000051), propget, helpstring("Specifies or returns the plot style name of an intersection fill section.")]
        HRESULT IntersectionFillPlotStyleName([out, retval] BSTR* plotStyle);
        [id(0x00000051), propput, helpstring("Specifies or returns the plot style name of an intersection fill section.")]
        HRESULT IntersectionFillPlotStyleName([in] BSTR plotStyle);
        [id(0x00000052), propget, helpstring("Specifies or returns the lineweight of an intersection fill section.")]
        HRESULT IntersectionFillLineweight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000052), propput, helpstring("Specifies or returns the lineweight of an intersection fill section.")]
        HRESULT IntersectionFillLineweight([in] ACAD_LWEIGHT Lineweight);
        [id(0x00000053), propget, helpstring("Specifies or returns the face transparency value of an intersection fill section.")]
        HRESULT IntersectionFillFaceTransparency([out, retval] long* pVal);
        [id(0x00000053), propput, helpstring("Specifies or returns the face transparency value of an intersection fill section.")]
        HRESULT IntersectionFillFaceTransparency([in] long pVal);
        [id(0x0000005b), propget, helpstring("Specifies or returns whether a background geometry section is visible.")]
        HRESULT BackgroundLinesVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000005b), propput, helpstring("Specifies or returns whether a background geometry section is visible.")]
        HRESULT BackgroundLinesVisible([in] VARIANT_BOOL pVal);
        [id(0x0000005c), propget, helpstring("Specifies or returns whether hidden lines are visble for a background geometry section.")]
        HRESULT BackgroundLinesHiddenLine([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000005c), propput, helpstring("Specifies or returns whether hidden lines are visble for a background geometry section.")]
        HRESULT BackgroundLinesHiddenLine([in] VARIANT_BOOL pVal);
        [id(0x0000005d), propget, helpstring("Specifies or returns the color of a background geometry section.")]
        HRESULT BackgroundLinesColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x0000005d), propput, helpstring("Specifies or returns the color of a background geometry section.")]
        HRESULT BackgroundLinesColor([in] IAcadAcCmColor* pColor);
        [id(0x0000005e), propget, helpstring("Specifies or returns the layer of a background geometry section.")]
        HRESULT BackgroundLinesLayer([out, retval] BSTR* Layer);
        [id(0x0000005e), propput, helpstring("Specifies or returns the layer of a background geometry section.")]
        HRESULT BackgroundLinesLayer([in] BSTR Layer);
        [id(0x0000005f), propget, helpstring("Specifies or returns the linetype of a background geometry section.")]
        HRESULT BackgroundLinesLinetype([out, retval] BSTR* Linetype);
        [id(0x0000005f), propput, helpstring("Specifies or returns the linetype of a background geometry section.")]
        HRESULT BackgroundLinesLinetype([in] BSTR Linetype);
        [id(0x00000060), propget, helpstring("Specifies or returns the linetype scale of a background geometry section.")]
        HRESULT BackgroundLinesLinetypeScale([out, retval] ACAD_NOUNITS* ltScale);
        [id(0x00000060), propput, helpstring("Specifies or returns the linetype scale of a background geometry section.")]
        HRESULT BackgroundLinesLinetypeScale([in] ACAD_NOUNITS ltScale);
        [id(0x00000061), propget, helpstring("Specifies or returns the plot style name of a background geometry section.")]
        HRESULT BackgroundLinesPlotStyleName([out, retval] BSTR* plotStyle);
        [id(0x00000061), propput, helpstring("Specifies or returns the plot style name of a background geometry section.")]
        HRESULT BackgroundLinesPlotStyleName([in] BSTR plotStyle);
        [id(0x00000062), propget, helpstring("Specifies or returns the lineweight of a background geometry section.")]
        HRESULT BackgroundLinesLineweight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000062), propput, helpstring("Specifies or returns the lineweight of a background geometry section.")]
        HRESULT BackgroundLinesLineweight([in] ACAD_LWEIGHT Lineweight);
        [id(0x0000006f), propget, helpstring("Specifies or returns whether a foreground geometry section is visible.")]
        HRESULT ForegroundLinesVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000006f), propput, helpstring("Specifies or returns whether a foreground geometry section is visible.")]
        HRESULT ForegroundLinesVisible([in] VARIANT_BOOL pVal);
        [id(0x00000070), propget, helpstring("Specifies or returns whether hidden lines are visble for a foreground geometry section.")]
        HRESULT ForegroundLinesHiddenLine([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000070), propput, helpstring("Specifies or returns whether hidden lines are visble for a foreground geometry section.")]
        HRESULT ForegroundLinesHiddenLine([in] VARIANT_BOOL pVal);
        [id(0x00000071), propget, helpstring("Specifies or returns the color of a foreground geometry section.")]
        HRESULT ForegroundLinesColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x00000071), propput, helpstring("Specifies or returns the color of a foreground geometry section.")]
        HRESULT ForegroundLinesColor([in] IAcadAcCmColor* pColor);
        [id(0x00000072), propget, helpstring("Specifies or returns the layer of a foreground geometry section.")]
        HRESULT ForegroundLinesLayer([out, retval] BSTR* Layer);
        [id(0x00000072), propput, helpstring("Specifies or returns the layer of a foreground geometry section.")]
        HRESULT ForegroundLinesLayer([in] BSTR Layer);
        [id(0x00000073), propget, helpstring("Specifies or returns the linetype of a foreground geometry section.")]
        HRESULT ForegroundLinesLinetype([out, retval] BSTR* Linetype);
        [id(0x00000073), propput, helpstring("Specifies or returns the linetype of a foreground geometry section.")]
        HRESULT ForegroundLinesLinetype([in] BSTR Linetype);
        [id(0x00000074), propget, helpstring("Specifies or returns the linetype scale of a foreground geometry section.")]
        HRESULT ForegroundLinesLinetypeScale([out, retval] ACAD_NOUNITS* ltScale);
        [id(0x00000074), propput, helpstring("Specifies or returns the linetype scale of a foreground geometry section.")]
        HRESULT ForegroundLinesLinetypeScale([in] ACAD_NOUNITS ltScale);
        [id(0x00000075), propget, helpstring("Specifies or returns the plot style name of a foreground geometry section.")]
        HRESULT ForegroundLinesPlotStyleName([out, retval] BSTR* plotStyle);
        [id(0x00000075), propput, helpstring("Specifies or returns the plot style name of a foreground geometry section.")]
        HRESULT ForegroundLinesPlotStyleName([in] BSTR plotStyle);
        [id(0x00000076), propget, helpstring("Specifies or returns the lineweight of a foreground geometry section.")]
        HRESULT ForegroundLinesLineweight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000076), propput, helpstring("Specifies or returns the lineweight of a foreground geometry section.")]
        HRESULT ForegroundLinesLineweight([in] ACAD_LWEIGHT Lineweight);
        [id(0x00000077), propget, helpstring("Specifies or returns the face transparency value of a foreground geometry section.")]
        HRESULT ForegroundLinesFaceTransparency([out, retval] long* pVal);
        [id(0x00000077), propput, helpstring("Specifies or returns the face transparency value of a foreground geometry section.")]
        HRESULT ForegroundLinesFaceTransparency([in] long pVal);
        [id(0x00000078), propget, helpstring("Specifies or returns the edge transparency value of a foreground geometry section.")]
        HRESULT ForegroundLinesEdgeTransparency([out, retval] long* pVal);
        [id(0x00000078), propput, helpstring("Specifies or returns the edge transparency value of a foreground geometry section.")]
        HRESULT ForegroundLinesEdgeTransparency([in] long pVal);
        [id(0x00000083), propget, helpstring("Specifies or returns whether a curve tangency line section is visible.")]
        HRESULT CurveTangencyLinesVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000083), propput, helpstring("Specifies or returns whether a curve tangency line section is visible.")]
        HRESULT CurveTangencyLinesVisible([in] VARIANT_BOOL pVal);
        [id(0x00000084), propget, helpstring("Specifies or returns the color of a curve tangency line section.")]
        HRESULT CurveTangencyLinesColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x00000084), propput, helpstring("Specifies or returns the color of a curve tangency line section.")]
        HRESULT CurveTangencyLinesColor([in] IAcadAcCmColor* pColor);
        [id(0x00000085), propget, helpstring("Specifies or returns the layer of a curve tangency line section.")]
        HRESULT CurveTangencyLinesLayer([out, retval] BSTR* Layer);
        [id(0x00000085), propput, helpstring("Specifies or returns the layer of a curve tangency line section.")]
        HRESULT CurveTangencyLinesLayer([in] BSTR Layer);
        [id(0x00000086), propget, helpstring("Specifies or returns the linetype of a curve tangency line section.")]
        HRESULT CurveTangencyLinesLinetype([out, retval] BSTR* Linetype);
        [id(0x00000086), propput, helpstring("Specifies or returns the linetype of a curve tangency line section.")]
        HRESULT CurveTangencyLinesLinetype([in] BSTR Linetype);
        [id(0x00000087), propget, helpstring("Specifies or returns the linetype scale of a curve tangency line section.")]
        HRESULT CurveTangencyLinesLinetypeScale([out, retval] ACAD_NOUNITS* ltScale);
        [id(0x00000087), propput, helpstring("Specifies or returns the linetype scale of a curve tangency line section.")]
        HRESULT CurveTangencyLinesLinetypeScale([in] ACAD_NOUNITS ltScale);
        [id(0x00000088), propget, helpstring("Specifies the plot style name of a curve tangency line section.")]
        HRESULT CurveTangencyLinesPlotStyleName([out, retval] BSTR* plotStyle);
        [id(0x00000088), propput, helpstring("Specifies the plot style name of a curve tangency line section.")]
        HRESULT CurveTangencyLinesPlotStyleName([in] BSTR plotStyle);
        [id(0x00000089), propget, helpstring("Specifies or returns the lineweight of a curve tangency line section.")]
        HRESULT CurveTangencyLinesLineweight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000089), propput, helpstring("Specifies or returns the lineweight of a curve tangency line section.")]
        HRESULT CurveTangencyLinesLineweight([in] ACAD_LWEIGHT Lineweight);
    };

    
    
        
        
        
        
        
    

    [
      odl,
      uuid(6CDDB924-55C3-4DA7-A535-A23E85AB517E),
      helpstring("TeighaX Multi-Leader Interface"),
      dual,
      oleautomation
    ]
    interface IAcadMLeader : IAcadEntity {
        [id(0x00000026), propget, helpstring("Specifies or returns the scale factor of a multileader.")]
        HRESULT ScaleFactor([out, retval] double* scale);
        [id(0x00000026), propput, helpstring("Specifies or returns the scale factor of a multileader.")]
        HRESULT ScaleFactor([in] double scale);
        [id(0x00000001), propget, helpstring("Specifies or returns the type of multileader.")]
        HRESULT LeaderType([out, retval] AcMLeaderType* Type);
        [id(0x00000001), propput, helpstring("Specifies or returns the type of multileader.")]
        HRESULT LeaderType([in] AcMLeaderType Type);
        [id(0x00000002), propget, helpstring("Specifies or returns the color of a multileader.")]
        HRESULT LeaderLineColor([out, retval] IAcadAcCmColor** Type);
        [id(0x00000002), propput, helpstring("Specifies or returns the color of a multileader.")]
        HRESULT LeaderLineColor([in] IAcadAcCmColor* Type);
        [id(0x00000003), propget, helpstring("Specifies or returns the linetype of a multileader.")]
        HRESULT LeaderLineType([out, retval] ACAD_LTYPE* Linetype);
        [id(0x00000003), propput, helpstring("Specifies or returns the linetype of a multileader.")]
        HRESULT LeaderLineType([in] ACAD_LTYPE Linetype);
        [id(0x00000004), propget, helpstring("Specifies or returns the lineweight of a multileader.")]
        HRESULT LeaderLineWeight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000004), propput, helpstring("Specifies or returns the lineweight of a multileader.")]
        HRESULT LeaderLineWeight([in] ACAD_LWEIGHT Lineweight);
        [id(0x00000005), propget, helpstring("Specifies or returns the arrowhead type of a multileader.")]
        HRESULT ArrowheadType([out, retval] AcDimArrowheadType* BlockName);
        [id(0x00000005), propput, helpstring("Specifies or returns the arrowhead type of a multileader.")]
        HRESULT ArrowheadType([in] AcDimArrowheadType BlockName);
        [id(0x00000006), propget, helpstring("Specifies or returns the arrowhead size of a multileader.")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x00000006), propput, helpstring("Specifies or returns the arrowhead size of a multileader.")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x00000007), propget, helpstring("Specifies or returns whether a dog leg is used for a multileader.")]
        HRESULT DogLegged([out, retval] VARIANT_BOOL* val);
        [id(0x00000007), propput, helpstring("Specifies or returns whether a dog leg is used for a multileader.")]
        HRESULT DogLegged([in] VARIANT_BOOL val);
        [id(0x00000008), propget, helpstring("Specifies or returns the dog leg length of a multileader.")]
        HRESULT DoglegLength([out, retval] double* DoglegLength);
        [id(0x00000008), propput, helpstring("Specifies or returns the dog leg length of a multileader.")]
        HRESULT DoglegLength([in] double DoglegLength);
        [id(0x00000009), propget, helpstring("Specifies or returns the block name of a multileader.")]
        HRESULT ContentBlockName([out, retval] BSTR* BlockName);
        [id(0x00000009), propput, helpstring("Specifies or returns the block name of a multileader.")]
        HRESULT ContentBlockName([in] BSTR BlockName);
        [id(0x0000000a), propget, helpstring("Specifies or returns how a block connects with lines of a multileader.")]
        HRESULT BlockConnectionType([out, retval] AcBlockConnectionType* Type);
        [id(0x0000000a), propput, helpstring("Specifies or returns how a block connects with lines of a multileader.")]
        HRESULT BlockConnectionType([in] AcBlockConnectionType Type);
        [id(0x00000033), propget, helpstring("Specify how leaders connect with content block")]
        HRESULT BlockScale([out, retval] ACAD_NOUNITS* factor);
        [id(0x00000033), propput, helpstring("Specify how leaders connect with content block")]
        HRESULT BlockScale([in] ACAD_NOUNITS factor);
        [id(0x0000000b), propget, helpstring("Specifies or returns the text string of a multileader.")]
        HRESULT TextString([out, retval] BSTR* bstrText);
        [id(0x0000000b), propput, helpstring("Specifies or returns the text string of a multileader.")]
        HRESULT TextString([in] BSTR bstrText);
        [id(0x0000000c), propget, helpstring("Specifies or returns the style for text of a multileader.")]
        HRESULT TextStyleName([out, retval] BSTR* bstrName);
        [id(0x0000000c), propput, helpstring("Specifies or returns the style for text of a multileader.")]
        HRESULT TextStyleName([in] BSTR bstrName);
        [id(0x0000000d), propget, helpstring("Specifies or returns the attachment point for text of a multileader.")]
        HRESULT TextJustify([out, retval] AcAttachmentPoint* attPoint);
        [id(0x0000000d), propput, helpstring("Specifies or returns the attachment point for text of a multileader.")]
        HRESULT TextJustify([in] AcAttachmentPoint attPoint);
        [id(0x0000000e), propget, helpstring("Specifies or returns the text direction for text of a multileader.")]
        HRESULT TextDirection([out, retval] AcDrawingDirection* drawDir);
        [id(0x0000000e), propput, helpstring("Specifies or returns the text direction for text of a multileader.")]
        HRESULT TextDirection([in] AcDrawingDirection drawDir);
        [id(0x0000000f), propget, helpstring("Specifies or returns text width for text of a multileader.")]
        HRESULT TextWidth([out, retval] double* Width);
        [id(0x0000000f), propput, helpstring("Specifies or returns text width for text of a multileader.")]
        HRESULT TextWidth([in] double Width);
        [id(0x00000010), propget, helpstring("Specifies or returns text height for text of a multileader.")]
        HRESULT TextHeight([out, retval] double* Height);
        [id(0x00000010), propput, helpstring("Specifies or returns text height for text of a multileader.")]
        HRESULT TextHeight([in] double Height);
        [id(0x00000011), propget, helpstring("Specifies or returns the rotation for text of a multileader.")]
        HRESULT TextRotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000011), propput, helpstring("Specifies or returns the rotation for text of a multileader.")]
        HRESULT TextRotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000012), propget, helpstring("Specifies or returns the line spacing factor for text of a multileader.")]
        HRESULT TextLineSpacingFactor([out, retval] double* factor);
        [id(0x00000012), propput, helpstring("Specifies or returns the line spacing factor for text of a multileader.")]
        HRESULT TextLineSpacingFactor([in] double factor);
        [id(0x00000013), propget, helpstring("Specifies or returns the line spacing distance for text of a multileader.")]
        HRESULT TextLineSpacingDistance([out, retval] double* Value);
        [id(0x00000013), propput, helpstring("Specifies or returns the line spacing distance for text of a multileader.")]
        HRESULT TextLineSpacingDistance([in] double Value);
        [id(0x00000014), propget, helpstring("Specifies or returns the line spacing style for text of a multileader.")]
        HRESULT TextLineSpacingStyle([out, retval] AcLineSpacingStyle* style);
        [id(0x00000014), propput, helpstring("Specifies or returns the line spacing style for text of a multileader.")]
        HRESULT TextLineSpacingStyle([in] AcLineSpacingStyle style);
        [id(0x00000015), propget, helpstring("Specifies or returns whether a background is used used for text of a multileader.")]
        HRESULT TextBackgroundFill([out, retval] VARIANT_BOOL* bUseBackgroundFill);
        [id(0x00000015), propput, helpstring("Specifies or returns whether a background is used used for text of a multileader.")]
        HRESULT TextBackgroundFill([in] VARIANT_BOOL bUseBackgroundFill);
        [id(0x00000030), propget, helpstring("Specifies if leaders connect with the text horizontally or vertically")]
        HRESULT TextAttachmentDirection([out, retval] AcTextAttachmentDirection* dir);
        [id(0x00000030), propput, helpstring("Specifies if leaders connect with the text horizontally or vertically")]
        HRESULT TextAttachmentDirection([in] AcTextAttachmentDirection dir);
        [id(0x00000016), propget, helpstring("Specifies or returns how leaders on the left connect with text of a multileader.")]
        HRESULT TextLeftAttachmentType([out, retval] AcTextAttachmentType* Type);
        [id(0x00000016), propput, helpstring("Specifies or returns how leaders on the left connect with text of a multileader.")]
        HRESULT TextLeftAttachmentType([in] AcTextAttachmentType Type);
        [id(0x0000002b), propget, helpstring("Specifies or returns how leaders on the right connect with text of a multileader.")]
        HRESULT TextRightAttachmentType([out, retval] AcTextAttachmentType* Type);
        [id(0x0000002b), propput, helpstring("Specifies or returns how leaders on the right connect with text of a multileader.")]
        HRESULT TextRightAttachmentType([in] AcTextAttachmentType Type);
        [id(0x00000031), propget, helpstring("Specifies how leaders on the top connect with the text")]
        HRESULT TextTopAttachmentType([out, retval] AcVerticalTextAttachmentType* Type);
        [id(0x00000031), propput, helpstring("Specifies how leaders on the top connect with the text")]
        HRESULT TextTopAttachmentType([in] AcVerticalTextAttachmentType Type);
        [id(0x00000032), propget, helpstring("Specifies how leaders on the bottom connect with the text")]
        HRESULT TextBottomAttachmentType([out, retval] AcVerticalTextAttachmentType* Type);
        [id(0x00000032), propput, helpstring("Specifies how leaders on the bottom connect with the text")]
        HRESULT TextBottomAttachmentType([in] AcVerticalTextAttachmentType Type);
        [id(0x00000017), propget, helpstring("Specify or returns the landing gap for text of a multileader.")]
        HRESULT LandingGap([out, retval] double* gap);
        [id(0x00000017), propput, helpstring("Specify or returns the landing gap for text of a multileader.")]
        HRESULT LandingGap([in] double gap);
        [id(0x00000018), propget, helpstring("Specifies or returns the block to use as the custom arrowhead of a multileader.")]
        HRESULT ArrowheadBlock([out, retval] BSTR* BlockName);
        [id(0x00000018), propput, helpstring("Specifies or returns the block to use as the custom arrowhead of a multileader.")]
        HRESULT ArrowheadBlock([in] BSTR BlockName);
        [id(0x00000019), propget, helpstring("Specifies or returns the type of block used as the custom arrowhead of a multileader.")]
        HRESULT ContentBlockType([out, retval] AcPredefBlockType* Type);
        [id(0x00000019), propput, helpstring("Specifies or returns the type of block used as the custom arrowhead of a multileader.")]
        HRESULT ContentBlockType([in] AcPredefBlockType Type);
        [id(0x0000001a), propget, helpstring("Returns the number of leader lines for a multileader.")]
        HRESULT LeaderCount([out, retval] int* number);
        [id(0x0000001b), helpstring("Adds a new cluster of leader lines to a multileader.")]
        HRESULT AddLeader([out, retval] int* leaderIndex);
        [id(0x0000001c), helpstring("Deletes a cluster of leader lines from a multileader.")]
        HRESULT RemoveLeader([in] int leaderIndex);
        [id(0x0000001d), helpstring("Adds a leader line to the leader cluster of a multileader.")]
        HRESULT AddLeaderLine(
                        [in] int leaderIndex, 
                        [in] VARIANT pointArray, 
                        [out, retval] int* leaderLineIndex);
        [id(0x0000001e), helpstring("Adds a new leader line to a multileader using a start vertex for the leader line.")]
        HRESULT AddLeaderLineEx(
                        [in] VARIANT pointArray, 
                        [out, retval] int* leaderLineIndex);
        [id(0x0000001f), helpstring("Deletes a leader line from a multileader.")]
        HRESULT RemoveLeaderLine([in] int leaderLineIndex);
        [id(0x00000020), helpstring("Specifies the vertices for a leader line.")]
        HRESULT SetLeaderLineVertices(
                        [in] int leaderLineIndex, 
                        [in] VARIANT pointArray);
        [id(0x00000021), helpstring("Specifies the vertices for a leader line.")]
        HRESULT GetLeaderLineVertices(
                        [in] int leaderLineIndex, 
                        [out, retval] VARIANT* pointArray);
        [id(0x00000022), propput, helpstring("Specifies or returns the content type of a multileader.")]
        HRESULT ContentType([in] AcMLeaderContentType Type);
        [id(0x00000022), propget, helpstring("Specifies or returns the content type of a multileader.")]
        HRESULT ContentType([out, retval] AcMLeaderContentType* Type);
        [id(0x00000023), helpstring("Returns the index of the leader cluster to which a specified leader line belongs.")]
        HRESULT GetLeaderIndex(
                        [in] int leaderLineIndex, 
                        [out, retval] int* leaderIndex);
        [id(0x00000024), helpstring("Returns the index of a leader line.")]
        HRESULT GetLeaderLineIndexes(
                        [in] int leaderIndex, 
                        [out, retval] VARIANT* leaderLineIndexes);
        [id(0x00000025), helpstring("Returns the number of vertices in a leader line of a multileader.")]
        HRESULT GetVertexCount(
                        [in] int leaderLineIndex, 
                        [out, retval] int* number);
        [id(0x00000027), propget, helpstring("Specifies or returns whether a text frame displays for a multileader.")]
        HRESULT TextFrameDisplay([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000027), propput, helpstring("Specifies or returns whether a text frame displays for a multileader.")]
        HRESULT TextFrameDisplay([in] VARIANT_BOOL pVal);
        [id(0x00000028), propget, helpstring("Specifies or returns the style name of a multileader.")]
        HRESULT StyleName([out, retval] BSTR* Name);
        [id(0x00000028), propput, helpstring("Specifies or returns the style name of a multileader.")]
        HRESULT StyleName([in] BSTR Name);
        [id(0x00000029), helpstring("Returns the dog leg direction of a multileader.")]
        HRESULT GetDoglegDirection(
                        [in] int leaderIndex, 
                        [out, retval] VARIANT* dirVec);
        [id(0x0000002a), helpstring("Specifies the dog leg direction of a multileader.")]
        HRESULT SetDoglegDirection(
                        [in] int leaderIndex, 
                        [in] VARIANT dirVec);
        [id(0x0000002c), helpstring("Returns the attribute value of a block.")]
        HRESULT GetBlockAttributeValue(
                        [in] LONG_PTR* attdefId, 
                        [out, retval] BSTR* Value);
        [id(0x0000002d), helpstring("Specifies the attribute value of a block.")]
        HRESULT SetBlockAttributeValue(
                        [in] LONG_PTR* attdefId, 
                        [in] BSTR Value);
    };

    
    
        
        
        
    

    typedef [uuid(018ABD84-1513-43E0-989B-32FAF389F3E9), public]
    BSTR ACAD_LTYPE;

    
    
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
        
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
        
    

    
    
        
        
        
    

    [
      odl,
      uuid(DE52B9C4-D819-497D-95BA-2E7A3DB072B3),
      helpstring("TeighaX Interface of Ole object"),
      dual,
      oleautomation
    ]
    interface IAcadOle : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies the origin coordinates (upper left corner) of the OLE object")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x00000001), propput, helpstring("Specifies the origin coordinates (upper left corner) of the OLE object")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x00000002), propget, helpstring("Specifies the rotation angle of the OLE object")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rot);
        [id(0x00000002), propput, helpstring("Specifies the rotation angle of the OLE object")]
        HRESULT Rotation([in] ACAD_ANGLE rot);
        [id(0x00000003), propget, helpstring("Specifies the width of the OLE object box")]
        HRESULT Width([out, retval] double* Width);
        [id(0x00000003), propput, helpstring("Specifies the width of the OLE object box")]
        HRESULT Width([in] double Width);
        [id(0x00000004), propget, helpstring("Specifies the height of the OLE object box")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000004), propput, helpstring("Specifies the height of the OLE object box")]
        HRESULT Height([in] double Height);
        [id(0x00000005), propget, helpstring("Specifies the width of the object as a percentage of original width")]
        HRESULT ScaleWidth([out, retval] double* swidth);
        [id(0x00000005), propput, helpstring("Specifies the width of the object as a percentage of original width")]
        HRESULT ScaleWidth([in] double swidth);
        [id(0x00000006), propget, helpstring("Specifies the height of the object as a percentage of original height")]
        HRESULT ScaleHeight([out, retval] double* sheight);
        [id(0x00000006), propput, helpstring("Specifies the height of the object as a percentage of original height")]
        HRESULT ScaleHeight([in] double sheight);
        [id(0x00000007), propget, helpstring("Ensures the width and height of the object stay in proportion")]
        HRESULT LockAspectRatio([out, retval] VARIANT_BOOL* aspect);
        [id(0x00000007), propput, helpstring("Ensures the width and height of the object stay in proportion")]
        HRESULT LockAspectRatio([in] VARIANT_BOOL aspect);
        [id(0x00000008), propget, helpstring("Specifies whether the OLE object is linked to the original pasted file when opening object for editing")]
        HRESULT OleItemType([out, retval] AcOleType* pType);
        [id(0x00000008), propput, helpstring("Specifies whether the OLE object is linked to the original pasted file when opening object for editing")]
        HRESULT OleItemType([in] AcOleType pType);
        [id(0x00000009), propget, helpstring("Controls plot quality of OLE object based on file type selected from list")]
        HRESULT OlePlotQuality([out, retval] AcOlePlotQuality* pPQuality);
        [id(0x00000009), propput, helpstring("Controls plot quality of OLE object based on file type selected from list")]
        HRESULT OlePlotQuality([in] AcOlePlotQuality pPQuality);
        [id(0x0000000a), propget, helpstring("Application for editing OLE object")]
        HRESULT OleSourceApp([out, retval] BSTR* srcApp);
        [id(0x0000000a), propput, helpstring("Application for editing OLE object")]
        HRESULT OleSourceApp([in] BSTR srcApp);
    };

    
    
        
        
        
    

    
    
        
        
        
    

    [
      odl,
      uuid(0DBE1041-C992-4D5D-A339-66D1721B1B97),
      helpstring("TeighaX Interface of a special Block object containing all the entities in the active paper space layout"),
      dual,
      oleautomation
    ]
    interface IAcadPaperSpace : IAcadBlock {
        [id(0x00000001), helpstring("Adds a paperspace viewport to paperspace.")]
        HRESULT AddPViewport(
                        [in] VARIANT Center, 
                        [in] double Width, 
                        [in] double Height, 
                        [out, retval] IAcadPViewport** pPViewport);
    };

    [
      odl,
      uuid(B46D86CE-8224-494E-ABE7-ED25572C2B76),
      helpstring("TeighaX Interface of rectangular object created in paper space that display view"),
      dual,
      oleautomation
    ]
    interface IAcadPViewport : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the x, y, and z coordinates of a paperspace viewports's center point.")]
        HRESULT Center([out, retval] VARIANT* CenterPoint);
        [id(0x00000001), propput, helpstring("Specifies or returns the x, y, and z coordinates of a paperspace viewports's center point.")]
        HRESULT Center([in] VARIANT CenterPoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the viewing direction fof a paperspace viewport.")]
        HRESULT Direction([out, retval] VARIANT* dirVector);
        [id(0x00000002), propput, helpstring("Specifies or returns the viewing direction fof a paperspace viewport.")]
        HRESULT Direction([in] VARIANT dirVector);
        [id(0x00000003), propget, helpstring("Specifies or returns whether the grid is on for a paperspace viewport.")]
        HRESULT GridOn([out, retval] VARIANT_BOOL* bGridOn);
        [id(0x00000003), propput, helpstring("Specifies or returns whether the grid is on for a paperspace viewport.")]
        HRESULT GridOn([in] VARIANT_BOOL bGridOn);
        [id(0x00000004), propget, helpstring("Specifies or returns the height of a paperspace viewport.")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000004), propput, helpstring("Specifies or returns the height of a paperspace viewport.")]
        HRESULT Height([in] double Height);
        [id(0x00000005), propget, helpstring("Specifies or returns the width of a paperspace viewport.")]
        HRESULT Width([out, retval] double* Width);
        [id(0x00000005), propput, helpstring("Specifies or returns the width of a paperspace viewport.")]
        HRESULT Width([in] double Width);
        [id(0x00000006), propget, helpstring("Specifies or returns whether a paperspace viewport is on.")]
        HRESULT ViewportOn([out, retval] VARIANT_BOOL* bOn);
        [id(0x00000006), propput, helpstring("Specifies or returns whether a paperspace viewport is on.")]
        HRESULT ViewportOn([in] VARIANT_BOOL bOn);
        [id(0x00000007), propget, helpstring("Returns whether a paperspace viewport is clipped.")]
        HRESULT Clipped([out, retval] VARIANT_BOOL* bClipped);
        [id(0x00000008), propget, helpstring("Specifies or returns whether a paperspace viewport is locked.")]
        HRESULT DisplayLocked([out, retval] VARIANT_BOOL* bLocked);
        [id(0x00000008), propput, helpstring("Specifies or returns whether a paperspace viewport is locked.")]
        HRESULT DisplayLocked([in] VARIANT_BOOL bLocked);
        [id(0x00000009), propget, helpstring("Specifies or returns the standard scale of a paperspace viewport.")]
        HRESULT StandardScale([out, retval] AcViewportScale* scale);
        [id(0x00000009), propput, helpstring("Specifies or returns the standard scale of a paperspace viewport.")]
        HRESULT StandardScale([in] AcViewportScale scale);
        [id(0x0000000a), propget, helpstring("Specifies or returns a custom scale for a paperspace viewport.")]
        HRESULT CustomScale([out, retval] double* scale);
        [id(0x0000000a), propput, helpstring("Specifies or returns a custom scale for a paperspace viewport.")]
        HRESULT CustomScale([in] double scale);
        [id(0x0000000b), propget, hidden, helpstring("Specifies or returns the style sheet to use for a paperspace viewport.")]
        HRESULT StyleSheet([out, retval] BSTR* pName);
        [id(0x0000000b), propput, hidden, helpstring("Specifies or returns the style sheet to use for a paperspace viewport.")]
        HRESULT StyleSheet([in] BSTR pName);
        [id(0x0000000c), propget, helpstring("Specifies or returns whether the UCS is saved with a paperspace viewport.")]
        HRESULT UCSPerViewport([out, retval] VARIANT_BOOL* UCSSaved);
        [id(0x0000000c), propput, helpstring("Specifies or returns whether the UCS is saved with a paperspace viewport.")]
        HRESULT UCSPerViewport([in] VARIANT_BOOL UCSSaved);
        [id(0x0000000d), propget, helpstring("Specifies or returns the snap base point for a paperspace viewport.")]
        HRESULT SnapBasePoint([out, retval] VARIANT* lowLeft);
        [id(0x0000000d), propput, helpstring("Specifies or returns the snap base point for a paperspace viewport.")]
        HRESULT SnapBasePoint([in] VARIANT lowLeft);
        [id(0x0000000e), propget, helpstring("Specifies or returns whether the snap is turned on for a paperspace viewport.")]
        HRESULT SnapOn([out, retval] VARIANT_BOOL* bSnapOn);
        [id(0x0000000e), propput, helpstring("Specifies or returns whether the snap is turned on for a paperspace viewport.")]
        HRESULT SnapOn([in] VARIANT_BOOL bSnapOn);
        [id(0x0000000f), propget, helpstring("Specifies or returns the snap rotation angle of a paperspace viewport relative to the current UCS.")]
        HRESULT SnapRotationAngle([out, retval] double* Angle);
        [id(0x0000000f), propput, helpstring("Specifies or returns the snap rotation angle of a paperspace viewport relative to the current UCS.")]
        HRESULT SnapRotationAngle([in] double Angle);
        [id(0x00000010), propget, helpstring("Specifies or returns whether the UCS icon is turned on for a paperspace viewport.")]
        HRESULT UCSIconOn([out, retval] VARIANT_BOOL* bIconOn);
        [id(0x00000010), propput, helpstring("Specifies or returns whether the UCS icon is turned on for a paperspace viewport.")]
        HRESULT UCSIconOn([in] VARIANT_BOOL bIconOn);
        [id(0x00000011), propget, helpstring("Specifies or returns whether the UCS icon displays at the origin for a paperspace viewport.")]
        HRESULT UCSIconAtOrigin([out, retval] VARIANT_BOOL* bIconAtOrigin);
        [id(0x00000011), propput, helpstring("Specifies or returns whether the UCS icon displays at the origin for a paperspace viewport.")]
        HRESULT UCSIconAtOrigin([in] VARIANT_BOOL bIconAtOrigin);
        [id(0x00000012), helpstring("Specifies or returns the grid spacing for a paperspace viewport.")]
        HRESULT GetGridSpacing(
                        [out] double* XSpacing, 
                        [out] double* YSpacing);
        [id(0x00000013), helpstring("Specifies or returns the grid spacing for a paperspace viewport.")]
        HRESULT SetGridSpacing(
                        [in] double XSpacing, 
                        [in] double YSpacing);
        [id(0x00000014), helpstring("Specifies or returns the snap spacing for a paperspace viewport.")]
        HRESULT GetSnapSpacing(
                        [out] double* XSpacing, 
                        [out] double* YSpacing);
        [id(0x00000015), helpstring("Specifies or returns the snap spacing for a paperspace viewport.")]
        HRESULT SetSnapSpacing(
                        [in] double XSpacing, 
                        [in] double YSpacing);
        [id(0x00000016), helpstring("Turns the display of a paperspace viewport on or off.")]
        HRESULT Display([in] VARIANT_BOOL bStatus);
        [id(0x00000017), propget, helpstring("Specifies or returns the twist angle, in radians, for a paperspace viewport.")]
        HRESULT TwistAngle([out, retval] ACAD_ANGLE* Angle);
        [id(0x00000017), propput, helpstring("Specifies or returns the twist angle, in radians, for a paperspace viewport.")]
        HRESULT TwistAngle([in] ACAD_ANGLE Angle);
        [id(0x00000018), propget, helpstring("Specifies or returns the lens length used in perspective viewing for a paperspace viewport.")]
        HRESULT LensLength([out, retval] double* Length);
        [id(0x00000018), propput, helpstring("Specifies or returns the lens length used in perspective viewing for a paperspace viewport.")]
        HRESULT LensLength([in] double Length);
        [id(0x00000019), propget, hidden, helpstring("Specifies or returns whether hidden line removal is turned on for a paperspace viewport.")]
        HRESULT RemoveHiddenLines([out, retval] VARIANT_BOOL* bRemoval);
        [id(0x00000019), propput, hidden, helpstring("Specifies or returns whether hidden line removal is turned on for a paperspace viewport.")]
        HRESULT RemoveHiddenLines([in] VARIANT_BOOL bRemoval);
        [id(0x0000001a), propget, helpstring("Specifies or returns the target point for a paperspace viewport.")]
        HRESULT Target([out, retval] VARIANT* targetPoint);
        [id(0x0000001a), propput, helpstring("Specifies or returns the target point for a paperspace viewport.")]
        HRESULT Target([in] VARIANT targetPoint);
        [id(0x0000001b), propget, helpstring("Specifies or returns the smoothness of circles, arcs, and ellipses that display in a paperspace viewport.")]
        HRESULT ArcSmoothness([out, retval] long* arcSmooth);
        [id(0x0000001b), propput, helpstring("Specifies or returns the smoothness of circles, arcs, and ellipses that display in a paperspace viewport.")]
        HRESULT ArcSmoothness([in] long arcSmooth);
        [id(0x0000001c), propget, helpstring("Not implemented. Specifies or returns the visual style of a paperspace viewport.")]
        HRESULT VisualStyle([out, retval] int* pVisualStyleIndex);
        [id(0x0000001c), propput, helpstring("Not implemented. Specifies or returns the visual style of a paperspace viewport.")]
        HRESULT VisualStyle([in] int pVisualStyleIndex);
        [id(0x0000001d), propget, helpstring("Specifies or returns the shade plot mode of a paperspace viewport.")]
        HRESULT ShadePlot([out, retval] int* pShadePlotIndex);
        [id(0x0000001d), propput, helpstring("Specifies or returns the shade plot mode of a paperspace viewport.")]
        HRESULT ShadePlot([in] int pShadePlotIndex);
        [id(0x00000020), propget, helpstring("Not implemented. Specifies or returns the model view associated with the paperspace viewport.")]
        HRESULT ModelView([out, retval] IAcadView** View);
        [id(0x00000020), propput, helpstring("Not implemented. Specifies or returns the model view associated with the paperspace viewport.")]
        HRESULT ModelView([in] IAcadView* View);
        [id(0x00000021), propget, helpstring("Not implemented. Specifies or returns the sheet view associated with the paperspace viewport.")]
        HRESULT SheetView([out, retval] IAcadView** View);
        [id(0x00000021), propput, helpstring("Not implemented. Specifies or returns the sheet view associated with the paperspace viewport.")]
        HRESULT SheetView([in] IAcadView* View);
        [id(0x00000022), propget, helpstring("Not implemented. Specifies or returns the label block ID associated with the paperspace viewport.")]
        HRESULT LabelBlockId([out, retval] LONG_PTR* ObjectID);
        [id(0x00000022), propput, helpstring("Not implemented. Specifies or returns the label block ID associated with the paperspace viewport.")]
        HRESULT LabelBlockId([in] LONG_PTR* ObjectID);
        [id(0x00000023), propget, helpstring("Not implemented. Specifies whether the paperspace viewport is linked to a corresponding sheet view.")]
        HRESULT HasSheetView([out, retval] VARIANT_BOOL* bSheetView);
        [id(0x00000024), helpstring("Not implemented. Updates the paperspace viewport parameters with the parameters in the associated model view.")]
        HRESULT SyncModelView();
        [id(0x00000027), propget, helpstring("Specifies the standard scale for the viewport")]
        HRESULT StandardScale2([out, retval] int* scale);
        [id(0x00000027), propput, helpstring("Specifies the standard scale for the viewport")]
        HRESULT StandardScale2([in] int scale);
        [id(0x00000025), propget, helpstring("Specifies whether the viewport has layer property overrides.")]
        HRESULT LayerPropertyOverrides([out, retval] VARIANT_BOOL* bOverrides);
    };

    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    

    [
      odl,
      uuid(B88459E4-6437-4FE0-A32F-CFB6ED2AF0D5),
      helpstring("TeighaX Interface of a graphical representation of a 2D drawing or 3D model from a specific location (viewpoint) in space"),
      dual,
      oleautomation
    ]
    interface IAcadView : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies the center of an arc, circle, ellipse, view, or viewport")]
        HRESULT Center([out, retval] VARIANT* Center);
        [id(0x00000001), propput, helpstring("Specifies the center of an arc, circle, ellipse, view, or viewport")]
        HRESULT Center([in] VARIANT Center);
        [id(0x00000002), propget, helpstring("Height of the object")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000002), propput, helpstring("Height of the object")]
        HRESULT Height([in] double Height);
        [id(0x00000003), propget, helpstring("Specifies the width of the object")]
        HRESULT Width([out, retval] double* Width);
        [id(0x00000003), propput, helpstring("Specifies the width of the object")]
        HRESULT Width([in] double Width);
        [id(0x00000004), propget, helpstring("Specifies the target point for the view or viewport")]
        HRESULT Target([out, retval] VARIANT* targetPoint);
        [id(0x00000004), propput, helpstring("Specifies the target point for the view or viewport")]
        HRESULT Target([in] VARIANT targetPoint);
        [id(0x00000005), propget, helpstring("Specifies the viewing direction for a 3D visualization of the drawing")]
        HRESULT Direction([out, retval] VARIANT* dirVec);
        [id(0x00000005), propput, helpstring("Specifies the viewing direction for a 3D visualization of the drawing")]
        HRESULT Direction([in] VARIANT dirVec);
        [id(0x00000006), propget, helpstring("Specifies the name of the object")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000006), propput, helpstring("Specifies the name of the object")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000007), propget, helpstring("Returns and sets the name of the category of the view.")]
        HRESULT CategoryName([out, retval] BSTR* category);
        [id(0x00000007), propput, helpstring("Returns and sets the name of the category of the view.")]
        HRESULT CategoryName([in] BSTR category);
        [id(0x00000008), propget, helpstring("Returns and sets the layout of the view.")]
        HRESULT LayoutId([out, retval] LONG_PTR* ObjectID);
        [id(0x00000008), propput, helpstring("Returns and sets the layout of the view.")]
        HRESULT LayoutId([in] LONG_PTR ObjectID);
        [id(0x00000009), propget, helpstring("Returns and sets the name of the layer state of the view.")]
        HRESULT LayerState([out, retval] BSTR* LayerState);
        [id(0x00000009), propput, helpstring("Returns and sets the name of the layer state of the view.")]
        HRESULT LayerState([in] BSTR LayerState);
        [id(0x0000000a), propget, helpstring("Specifies whether the view is associated with a paperspace viewport.")]
        HRESULT HasVpAssociation([out, retval] VARIANT_BOOL* bVpAssoc);
        [id(0x0000000a), propput, helpstring("Specifies whether the view is associated with a paperspace viewport.")]
        HRESULT HasVpAssociation([in] VARIANT_BOOL bVpAssoc);
    };

    [
      odl,
      uuid(03BC8462-69D7-42DD-AD90-13E08B326471),
      helpstring("TeighaX Interface of the collection of all blocks in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadBlocks : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in a collection, block, group, or selection set.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadBlock** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection, block, dictionary, group, or selection set.")]
        HRESULT Count([out, retval] long* pVal);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the collection, block, dictionary, group, or selection set.")]
        HRESULT Add(
                        [in] VARIANT InsertionPoint, 
                        [in] BSTR Name, 
                        [out, retval] IAcadBlock** pBlock);
    };

    [
      odl,
      uuid(595FBCE6-0025-4A57-ABC7-B39CAA04DBEC),
      helpstring("TeighaX Interface of the collection of all groups in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadGroups : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in the collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadGroup** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadGroup** pGroup);
    };

    [
      odl,
      uuid(368E39D6-9FE2-4F0E-916B-0DC0F66EF24A),
      helpstring("TeighaX Interface of a named SelectionSet object"),
      dual,
      oleautomation
    ]
    interface IAcadGroup : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in the group.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadEntity** ppEntity);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000001), propget, helpstring("Returns the number of items in the group.")]
        HRESULT Count([out, retval] long* pVal);
        [id(0x0000000f), propput, helpstring("Specifies the true color of all entities in the group.")]
        HRESULT TrueColor([in] IAcadAcCmColor* rhs);
        [id(0x00000003), propput, helpstring("Specifies the layer of all entites in the group.")]
        HRESULT Layer([in] BSTR rhs);
        [id(0x00000004), propput, helpstring("Specifies the linetype of all entites in the group.")]
        HRESULT Linetype([in] BSTR rhs);
        [id(0x00000005), propput, helpstring("Specifies the linetype scale of all entites in the group.")]
        HRESULT LinetypeScale([in] ACAD_NOUNITS rhs);
        [id(0x00000006), propput, helpstring("Specifies the visibility of all entites in the group.")]
        HRESULT Visible([in] VARIANT_BOOL rhs);
        [id(0x00000007), helpstring("Not implemented. Sets the highlight status of all entites in the group.")]
        HRESULT Highlight([in] VARIANT_BOOL HighlightFlag);
        [id(0x00000008), propput, helpstring("Specifies the plot style of all entites in the group.")]
        HRESULT PlotStyleName([in] BSTR rhs);
        [id(0x00000009), propput, helpstring("Specifies the lineweight of all entites in the group.")]
        HRESULT Lineweight([in] ACAD_LWEIGHT rhs);
        [id(0x0000000a), propget, helpstring("Specifies or returns the name of the group.")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x0000000a), propput, helpstring("Specifies or returns the name of the group.")]
        HRESULT Name([in] BSTR pVal);
        [id(0x0000000b), helpstring("Adds one or more objects to the group.")]
        HRESULT AppendItems([in] VARIANT Objects);
        [id(0x0000000c), helpstring("Removes objects from the group.")]
        HRESULT RemoveItems([in] VARIANT Objects);
        [id(0x0000000e), helpstring("Updates the group on the screen.")]
        HRESULT Update();
        [id(0x00000010), propput, helpstring("Specifies the material assigned to all entities in the group.")]
        HRESULT Material([in] BSTR rhs);
        [id(0x00000002), propput, hidden, helpstring("Specifies the color of all entities in the group.")]
        HRESULT color([in] AcColor rhs);
    };

    [
      odl,
      uuid(C8F61399-9BCC-4BC1-9BA7-CA56D009EDE7),
      helpstring("TeighaX Interface of the collection of all dimension styles in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadDimStyles : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in the dimension style collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadDimStyle** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the dimension style collection.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the dimension style collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadDimStyle** pDimStyle);
    };

    [
      odl,
      uuid(0DDD9695-15B6-4393-916D-5CA602C80D94),
      helpstring("TeighaX Interface of a group of dimension settings that determines the appearance of a dimension"),
      dual,
      oleautomation
    ]
    interface IAcadDimStyle : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies or returns the name of a dimension style.")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000001), propput, helpstring("Specifies or returns the name of a dimension style.")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000002), helpstring("Copies dimension style data to an existing dimension style.")]
        HRESULT CopyFrom([in] IDispatch* StyleSource);
    };

    [
      odl,
      uuid(AABF8D2D-1689-4D89-AF8A-7878AD6375BC),
      helpstring("TeighaX Interface of the collection of all layers in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadLayers : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in a collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadLayer** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadLayer** pLayer);
        [id(0x00000003), helpstring("Generates data about whether a layer is in use.")]
        HRESULT GenerateUsageData();
    };

    [
      odl,
      uuid(1341D6C6-5D39-45C5-93F5-6D836BC208C4),
      helpstring("TeighaX Interface of a logical grouping of data, similar to overlays."),
      dual,
      oleautomation
    ]
    interface IAcadLayer : IAcadObject {
        [id(0x00000001), propget, hidden, helpstring("Specifies or returns the color of a layer.")]
        HRESULT color([out, retval] AcColor* color);
        [id(0x00000001), propput, hidden, helpstring("Specifies or returns the color of a layer.")]
        HRESULT color([in] AcColor color);
        [id(0x0000000b), propget, helpstring("Specifies or returns the true color of a layer.")]
        HRESULT TrueColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x0000000b), propput, helpstring("Specifies or returns the true color of a layer.")]
        HRESULT TrueColor([in] IAcadAcCmColor* pColor);
        [id(0x00000002), propget, helpstring("Specifies or returns whether objects on a layer are visible, editable, and printable.")]
        HRESULT Freeze([out, retval] VARIANT_BOOL* bFreeze);
        [id(0x00000002), propput, helpstring("Specifies or returns whether objects on a layer are visible, editable, and printable.")]
        HRESULT Freeze([in] VARIANT_BOOL bFreeze);
        [id(0x00000003), propget, helpstring("Specifies or returns whether objects on a layer are visible and printable.")]
        HRESULT LayerOn([out, retval] VARIANT_BOOL* bOn);
        [id(0x00000003), propput, helpstring("Specifies or returns whether objects on a layer are visible and printable.")]
        HRESULT LayerOn([in] VARIANT_BOOL bOn);
        [id(0x00000004), propget, helpstring("Specifies or returns the linetype of a layer.")]
        HRESULT Linetype([out, retval] BSTR* Linetype);
        [id(0x00000004), propput, helpstring("Specifies or returns the linetype of a layer.")]
        HRESULT Linetype([in] BSTR Linetype);
        [id(0x00000005), propget, helpstring("Specifies or returns whether objects on a layer are editable.")]
        HRESULT Lock([out, retval] VARIANT_BOOL* Block);
        [id(0x00000005), propput, helpstring("Specifies or returns whether objects on a layer are editable.")]
        HRESULT Lock([in] VARIANT_BOOL Block);
        [id(0x00000006), propget, helpstring("Specifies or returns the name of a layer.")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000006), propput, helpstring("Specifies or returns the name of a layer.")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000007), propget, helpstring("Specifies or returns whether objects of a layer can be printed.")]
        HRESULT Plottable([out, retval] VARIANT_BOOL* bPlottable);
        [id(0x00000007), propput, helpstring("Specifies or returns whether objects of a layer can be printed.")]
        HRESULT Plottable([in] VARIANT_BOOL bPlottable);
        [id(0x00000008), propget, helpstring("Specifies or returns whether the layer is frozen in new viewports.")]
        HRESULT ViewportDefault([out, retval] VARIANT_BOOL* bDefault);
        [id(0x00000008), propput, helpstring("Specifies or returns whether the layer is frozen in new viewports.")]
        HRESULT ViewportDefault([in] VARIANT_BOOL bDefault);
        [id(0x00000009), propget, helpstring("Specifies or returns the plot style name of a layer.")]
        HRESULT PlotStyleName([out, retval] BSTR* plotStyle);
        [id(0x00000009), propput, helpstring("Specifies or returns the plot style name of a layer.")]
        HRESULT PlotStyleName([in] BSTR plotStyle);
        [id(0x0000000a), propget, helpstring("Specifies or returns the lineweight of a layer.")]
        HRESULT Lineweight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x0000000a), propput, helpstring("Specifies or returns the lineweight of a layer.")]
        HRESULT Lineweight([in] ACAD_LWEIGHT Lineweight);
        [id(0x0000000c), propget, helpstring("Specifies or returns the description of a layer.")]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x0000000c), propput, helpstring("Specifies or returns the description of a layer.")]
        HRESULT Description([in] BSTR Description);
        [id(0x0000000d), propget, helpstring("Returns whether the layer is in use.")]
        HRESULT Used([out, retval] VARIANT_BOOL* bUsed);
        [id(0x0000000e), propget, helpstring("Specifies or returns the material of a layer.")]
        HRESULT Material([out, retval] BSTR* Material);
        [id(0x0000000e), propput, helpstring("Specifies or returns the material of a layer.")]
        HRESULT Material([in] BSTR Material);
    };

    [
      odl,
      uuid(6E850466-A36D-44B0-88DB-B7DA7C751541),
      helpstring("TeighaX Interface of the collection of all linetypes in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadLineTypes : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in a collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadLineType** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadLineType** pLinetype);
        [id(0x00000003), helpstring("Loads and makes available a linetype from an LIN file.")]
        HRESULT Load(
                        [in] BSTR Name, 
                        [in] BSTR FileName);
    };

    [
      odl,
      uuid(BCCF460D-2B79-44FE-BA93-94D8599EB48B),
      helpstring("TeighaX Interface of the line characteristics consisting of combinations of dashes, dots, and spaces"),
      dual,
      oleautomation
    ]
    interface IAcadLineType : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies or returns the description of a linetype.")]
        HRESULT Description([out, retval] BSTR* bstrDes);
        [id(0x00000001), propput, helpstring("Specifies or returns the description of a linetype.")]
        HRESULT Description([in] BSTR bstrDes);
        [id(0x00000002), propget, helpstring("Specifies or returns the name of a linetype.")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000002), propput, helpstring("Specifies or returns the name of a linetype.")]
        HRESULT Name([in] BSTR bstrName);
    };

    [
      odl,
      uuid(F5E53EAC-852F-47EE-B0A6-FD4FC39F01D9),
      helpstring("TeighaX Interface of the collection of all dictionaries in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadDictionaries : IAcadObject {
        [id(00000000), helpstring("Returns an object in a dictionary using the index associated with the object.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadObject** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of objects in a dictionary.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the appropriate collection, block, dictionary, group, or selection set.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadDictionary** pDictionary);
    };

    [
      odl,
      uuid(36F5131D-70F6-43B7-88A3-DEA5464484AF),
      helpstring("TeighaX Interface of a container object for storing and retrieving objects"),
      dual,
      oleautomation
    ]
    interface IAcadDictionary : IAcadObject {
        [id(0x00000002), propget, helpstring("Specifies or returns the name of a dictionary.")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000002), propput, helpstring("Specifies or returns the name of a dictionary.")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000003), helpstring("Adds an object to a dictionary.")]
        HRESULT AddObject(
                        [in] BSTR Keyword, 
                        [in] BSTR ObjectName, 
                        [out, retval] IAcadObject** pNewObj);
        [id(0x00000004), helpstring("Returns the keyword string of an object in a dictionary.")]
        HRESULT GetName(
                        [in] IAcadObject* Object, 
                        [out, retval] BSTR* bstrName);
        [id(0x00000005), helpstring("Returns an object in a dictionary using the keyword string associated with the object.")]
        HRESULT GetObject(
                        [in] BSTR Name, 
                        [out, retval] IAcadObject** pObj);
        [id(0x00000006), helpstring("Deletes an object from a dictionary.")]
        HRESULT Remove(
                        [in] BSTR Name, 
                        [out, retval] IAcadObject** pObj);
        [id(0x00000007), helpstring("Renames an object in a dictionary.")]
        HRESULT Rename(
                        [in] BSTR OldName, 
                        [in] BSTR NewName);
        [id(0x00000008), helpstring("Replaces an object in a dictionary with another object.")]
        HRESULT Replace(
                        [in] BSTR OldName, 
                        [in] IAcadObject* pObj);
        [id(00000000), helpstring("Returns an object in a dictionary using the index associated with the object.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadObject** pItem);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000001), propget, helpstring("Returns the number of objects in a dictionary.")]
        HRESULT Count([out, retval] long* pVal);
        [id(0x00000009), helpstring("Adds an XRecord object to a dictionary.")]
        HRESULT AddXRecord(
                        [in] BSTR Keyword, 
                        [out, retval] IAcadXRecord** pNewXRecord);
    };

    [
      odl,
      uuid(71AFB135-F0F2-4BA4-B1AD-521EC33C054D),
      helpstring("TeighaX Interface of XRecord objects are used to store and manage arbitrary data"),
      dual,
      oleautomation
    ]
    interface IAcadXRecord : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies the name of the object")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000001), propput, helpstring("Specifies the name of the object")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000002), helpstring("Gets the extended record data (XRecordData) associated with a dictionary")]
        HRESULT GetXRecordData(
                        [out] VARIANT* XRecordDataType, 
                        [out] VARIANT* XRecordDataValue);
        [id(0x00000003), helpstring("Specifies the extended record data (XRecordData) associated with a dictionary")]
        HRESULT SetXRecordData(
                        [in] VARIANT XRecordDataType, 
                        [in] VARIANT XRecordDataValue);
        [id(0x00000004), propget, helpstring("Specifies the translation of any contained object IDs during deepClone or wblockClone operations")]
        HRESULT TranslateIDs([out, retval] VARIANT_BOOL* xlateIds);
        [id(0x00000004), propput, helpstring("Specifies the translation of any contained object IDs during deepClone or wblockClone operations")]
        HRESULT TranslateIDs([in] VARIANT_BOOL xlateIds);
    };

    [
      odl,
      uuid(4DBEDA5B-77E2-49AE-9CEC-B354A4066B4B),
      helpstring("TeighaX Interface of the collection of all registered applications in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadRegisteredApplications : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in the collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadRegisteredApplication** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of objects in the collection.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadRegisteredApplication** pRegApp);
    };

    [
      odl,
      uuid(E148AC0B-623E-4296-B806-0388F1A82D88),
      helpstring("TeighaX Interface of an external application that has been added to the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadRegisteredApplication : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies or returns the name of the registered application.")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000001), propput, helpstring("Specifies or returns the name of the registered application.")]
        HRESULT Name([in] BSTR bstrName);
    };

    [
      odl,
      uuid(6E699097-19C6-4454-B1FA-743CAFC76BB5),
      helpstring("TeighaX Interface of the collection of all text styles in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadTextStyles : IAcadObject {
        [id(00000000), helpstring("Gets the member object at a given index in a collection, group, or selection set")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadTextStyle** pItem);
        [id(0x00000001), propget, helpstring("Gets the number of items in the collection, dictionary, group, or selection set")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates a member object and adds it to the appropriate collection")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadTextStyle** pTextStyle);
    };

    [
      odl,
      uuid(F014474C-BF82-482F-A748-8C7FF9735188),
      helpstring("TeighaX Interface of a named, saved collection of settings that determines the appearance of text characters"),
      dual,
      oleautomation
    ]
    interface IAcadTextStyle : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies the name of the big font file associated with the text or attribute")]
        HRESULT BigFontFile([out, retval] BSTR* fontFile);
        [id(0x00000001), propput, helpstring("Specifies the name of the big font file associated with the text or attribute")]
        HRESULT BigFontFile([in] BSTR fontFile);
        [id(0x00000002), propget, helpstring("Specifies the primary font file path and name")]
        HRESULT fontFile([out, retval] BSTR* fontFile);
        [id(0x00000002), propput, helpstring("Specifies the primary font file path and name")]
        HRESULT fontFile([in] BSTR fontFile);
        [id(0x00000003), propget, helpstring("Height of the attribute, shape, text, or view toolbar or the main application window")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000003), propput, helpstring("Height of the attribute, shape, text, or view toolbar or the main application window")]
        HRESULT Height([in] double Height);
        [id(0x00000004), propget, helpstring("Specifies the last text height used")]
        HRESULT LastHeight([out, retval] double* Height);
        [id(0x00000004), propput, helpstring("Specifies the last text height used")]
        HRESULT LastHeight([in] double Height);
        [id(0x00000005), propget, helpstring("Specifies the name of the object")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000006), propget, helpstring("Specifies the oblique angle of the object")]
        HRESULT ObliqueAngle([out, retval] ACAD_ANGLE* obliAngle);
        [id(0x00000006), propput, helpstring("Specifies the oblique angle of the object")]
        HRESULT ObliqueAngle([in] ACAD_ANGLE obliAngle);
        [id(0x00000007), propget, helpstring("Specifies the attribute text generation flag")]
        HRESULT TextGenerationFlag([out, retval] long* textGenFlag);
        [id(0x00000007), propput, helpstring("Specifies the attribute text generation flag")]
        HRESULT TextGenerationFlag([in] long textGenFlag);
        [id(0x00000008), propget, helpstring("Specifies or returns the spacing of characters.")]
        HRESULT Width([out, retval] double* Width);
        [id(0x00000008), propput, helpstring("Specifies or returns the spacing of characters.")]
        HRESULT Width([in] double Width);
        [id(0x00000009), helpstring("Gets the definition data of the font for the TextStyle")]
        HRESULT GetFont(
                        [out] BSTR* TypeFace, 
                        [out] VARIANT_BOOL* Bold, 
                        [out] VARIANT_BOOL* Italic, 
                        [out] long* Charset, 
                        [out] long* PitchAndFamily);
        [id(0x00000010), helpstring("Sets the definition data of the font for the TextStyle")]
        HRESULT SetFont(
                        [in] BSTR TypeFace, 
                        [in] VARIANT_BOOL Bold, 
                        [in] VARIANT_BOOL Italic, 
                        [in] long Charset, 
                        [in] long PitchAndFamily);
    };

    [
      odl,
      uuid(D72F9AC7-66A8-48F0-932C-A348121A2E4A),
      helpstring("TeighaX Interface of the collection of all user coordinate systems (UCSs) in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadUCSs : IAcadObject {
        [id(00000000), helpstring("Gets the member object at a given index in a collection, group, or selection set")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadUCS** pItem);
        [id(0x00000001), propget, helpstring("Gets the number of items in the collection, dictionary, group, or selection set")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates a member object and adds it to the appropriate collection")]
        HRESULT Add(
                        [in] VARIANT Origin, 
                        [in] VARIANT XAxisPoint, 
                        [in] VARIANT YAxisPoint, 
                        [in] BSTR Name, 
                        [out, retval] IAcadUCS** pUCS);
    };

    [
      odl,
      uuid(FB8B1814-A240-45B5-A50D-EB19A62BF3BF),
      helpstring("TeighaX Interface of a user-defined coordinate system that determines the orientation of the X, Y, and Z axes in 3D space"),
      dual,
      oleautomation
    ]
    interface IAcadUCS : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies the name of the object")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000001), propput, helpstring("Specifies the name of the object")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000002), propget, helpstring("Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates")]
        HRESULT Origin([out, retval] VARIANT* Origin);
        [id(0x00000002), propput, helpstring("Specifies the origin of the UCS, block, layout, or raster image in WCS coordinates")]
        HRESULT Origin([in] VARIANT Origin);
        [id(0x00000003), propget, helpstring("Specifies the X direction of the given UCS")]
        HRESULT XVector([out, retval] VARIANT* XVector);
        [id(0x00000003), propput, helpstring("Specifies the X direction of the given UCS")]
        HRESULT XVector([in] VARIANT XVector);
        [id(0x00000004), propget, helpstring("Specifies the Y direction of the given UCS")]
        HRESULT YVector([out, retval] VARIANT* YVector);
        [id(0x00000004), propput, helpstring("Specifies the Y direction of the given UCS")]
        HRESULT YVector([in] VARIANT YVector);
        [id(0x00000005), helpstring("Gets the transformation matrix consisting of UCS coordinate system data")]
        HRESULT GetUCSMatrix([out, retval] VARIANT* transMatrix);
    };

    [
      odl,
      uuid(497A6BDD-32D1-4E16-BA2A-CA1FC37940AB),
      helpstring("TeighaX Interface of the collection of all views in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadViews : IAcadObject {
        [id(00000000), helpstring("Gets the member object at a given index in a collection, group, or selection set")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadView** pItem);
        [id(0x00000001), propget, helpstring("Gets the number of items in the collection, dictionary, group, or selection set")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates a member object and adds it to the appropriate collection")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadView** pRegApp);
    };

    [
      odl,
      uuid(6D3AA8F1-CF3F-4141-9407-8376E8811334),
      helpstring("TeighaX Interface of the collection of all viewports in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadViewports : IAcadObject {
        [id(00000000), helpstring("Gets the member object at a given index in a collection, group, or selection set")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadViewport** pItem);
        [id(0x00000001), propget, helpstring("Gets the number of items in the collection, dictionary, group, or selection set")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates a member object and adds it to the appropriate collection")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadViewport** pRegApp);
        [id(0x00000003), helpstring("Deletes a viewport configuration")]
        HRESULT DeleteConfiguration([in] BSTR Name);
    };

    [
      odl,
      uuid(8C3312F2-FFF4-4CB3-BDEB-1D3B84770F0D),
      helpstring("TeighaX Interface of a bounded area that displays some portion of a drawing's model space"),
      dual,
      oleautomation
    ]
    interface IAcadViewport : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies the center of an arc, circle, ellipse, view, or viewport")]
        HRESULT Center([out, retval] VARIANT* Center);
        [id(0x00000001), propput, helpstring("Specifies the center of an arc, circle, ellipse, view, or viewport")]
        HRESULT Center([in] VARIANT Center);
        [id(0x00000002), propget, helpstring("Height of the attribute, shape, text, or view toolbar or the main application window")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000002), propput, helpstring("Height of the attribute, shape, text, or view toolbar or the main application window")]
        HRESULT Height([in] double Height);
        [id(0x00000003), propget, helpstring("Specifies the width of the text boundary, view, image, toolbar, or main application window")]
        HRESULT Width([out, retval] double* Width);
        [id(0x00000003), propput, helpstring("Specifies the width of the text boundary, view, image, toolbar, or main application window")]
        HRESULT Width([in] double Width);
        [id(0x00000004), propget, helpstring("Specifies the target point for the view or viewport")]
        HRESULT Target([out, retval] VARIANT* targetPoint);
        [id(0x00000004), propput, helpstring("Specifies the target point for the view or viewport")]
        HRESULT Target([in] VARIANT targetPoint);
        [id(0x00000005), propget, helpstring("Specifies the viewing direction for a 3D visualization of the drawing")]
        HRESULT Direction([out, retval] VARIANT* dirVec);
        [id(0x00000005), propput, helpstring("Specifies the viewing direction for a 3D visualization of the drawing")]
        HRESULT Direction([in] VARIANT dirVec);
        [id(0x00000006), propget, helpstring("Specifies the name of the object")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000006), propput, helpstring("Specifies the name of the object")]
        HRESULT Name([in] BSTR bstrName);
        [id(0x00000007), propget, helpstring("Specifies the status of the viewport grid")]
        HRESULT GridOn([out, retval] VARIANT_BOOL* bGridOn);
        [id(0x00000007), propput, helpstring("Specifies the status of the viewport grid")]
        HRESULT GridOn([in] VARIANT_BOOL bGridOn);
        [id(0x00000008), propget, helpstring("Specifies the status of the Ortho mode for the viewport")]
        HRESULT OrthoOn([out, retval] VARIANT_BOOL* bOrthoOn);
        [id(0x00000008), propput, helpstring("Specifies the status of the Ortho mode for the viewport")]
        HRESULT OrthoOn([in] VARIANT_BOOL bOrthoOn);
        [id(0x00000009), propget, helpstring("Specifies the snap base point for the viewport")]
        HRESULT SnapBasePoint([out, retval] VARIANT* lowLeft);
        [id(0x00000009), propput, helpstring("Specifies the snap base point for the viewport")]
        HRESULT SnapBasePoint([in] VARIANT lowLeft);
        [id(0x0000000a), propget, helpstring("Specifies the status of snap")]
        HRESULT SnapOn([out, retval] VARIANT_BOOL* bSnapOn);
        [id(0x0000000a), propput, helpstring("Specifies the status of snap")]
        HRESULT SnapOn([in] VARIANT_BOOL bSnapOn);
        [id(0x0000000b), propget, helpstring("Specifies the snap rotation angle of the viewport relative to the current UCS")]
        HRESULT SnapRotationAngle([out, retval] ACAD_ANGLE* Angle);
        [id(0x0000000b), propput, helpstring("Specifies the snap rotation angle of the viewport relative to the current UCS")]
        HRESULT SnapRotationAngle([in] ACAD_ANGLE Angle);
        [id(0x0000000d), propget, helpstring("Specifies if the UCS icon is on")]
        HRESULT UCSIconOn([out, retval] VARIANT_BOOL* bIconOn);
        [id(0x0000000d), propput, helpstring("Specifies if the UCS icon is on")]
        HRESULT UCSIconOn([in] VARIANT_BOOL bIconOn);
        [id(0x0000000e), propget, helpstring("Specifies if the UCS icon is displayed at the origin")]
        HRESULT UCSIconAtOrigin([out, retval] VARIANT_BOOL* bIconAtOrigin);
        [id(0x0000000e), propput, helpstring("Specifies if the UCS icon is displayed at the origin")]
        HRESULT UCSIconAtOrigin([in] VARIANT_BOOL bIconAtOrigin);
        [id(0x0000000f), propget, helpstring("Gets the lower-left corner of the current active viewport")]
        HRESULT LowerLeftCorner([out, retval] VARIANT* lowLeft);
        [id(0x00000010), propget, helpstring("Gets the upper-right corner of the current active viewport")]
        HRESULT UpperRightCorner([out, retval] VARIANT* UpperRight);
        [id(0x00000011), helpstring("Splits a viewport into the given number of views")]
        HRESULT Split([in] AcViewportSplitType NumWins);
        [id(0x00000012), helpstring("Gets the grid spacing for the viewport")]
        HRESULT GetGridSpacing(
                        [out] double* XSpacing, 
                        [out] double* YSpacing);
        [id(0x00000013), helpstring("Sets the grid spacing for the viewport")]
        HRESULT SetGridSpacing(
                        [in] double XSpacing, 
                        [in] double YSpacing);
        [id(0x00000014), helpstring("Gets the snap spacing for the viewport")]
        HRESULT GetSnapSpacing(
                        [out] double* XSpacing, 
                        [out] double* YSpacing);
        [id(0x00000015), helpstring("Sets the snap spacing for the viewport")]
        HRESULT SetSnapSpacing(
                        [in] double XSpacing, 
                        [in] double YSpacing);
        [id(0x00000016), helpstring("Sets the view in a viewport to a saved view in the Views Collection object")]
        HRESULT SetView([in] IAcadView* View);
        [id(0x00000017), propget, helpstring("Specifies the smoothness of circles, arcs, and ellipses")]
        HRESULT ArcSmoothness([out, retval] long* arcSmooth);
        [id(0x00000017), propput, helpstring("Specifies the smoothness of circles, arcs, and ellipses")]
        HRESULT ArcSmoothness([in] long arcSmooth);
    };

    
    
        
        
        
        
        
        
        
        
        
    

    [
      odl,
      uuid(AC0BC096-262A-4FDB-996B-D6FC79DB44F6),
      helpstring("TeighaX Interface of the collection of all layouts in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadLayouts : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in the collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadLayout** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadLayout** pLayout);
    };

    [
      odl,
      uuid(1DF10112-27B0-4388-B561-74BE5E67FA10),
      helpstring("TeighaX Interface of a collection of named plot settings"),
      dual,
      oleautomation
    ]
    interface IAcadPlotConfigurations : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in the collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadPlotConfiguration** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT ModelType, 
                        [out, retval] IAcadPlotConfiguration** pPlotConfig);
    };

    [
      odl,
      uuid(CEF7B55C-378B-4CBC-A523-9B72344F6048),
      helpstring("TeighaX Interface of an object that specifies the settings for the current TeighaX drawing"),
      dual,
      oleautomation
    ]
    interface IAcadDatabasePreferences : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the Application object.")]
        HRESULT Application([out, retval] IDispatch** pAppObj);
        [id(0x00000002), propget, helpstring("Specifies or returns whether certain objects in a document are filled in.")]
        HRESULT SolidFill([out, retval] VARIANT_BOOL* Fill);
        [id(0x00000002), propput, helpstring("Specifies or returns whether certain objects in a document are filled in.")]
        HRESULT SolidFill([in] VARIANT_BOOL Fill);
        [id(0x00000004), propget, helpstring("Specifies or returns whether a document can be edited when it is used as an external reference.")]
        HRESULT XRefEdit([out, retval] VARIANT_BOOL* Edit);
        [id(0x00000004), propput, helpstring("Specifies or returns whether a document can be edited when it is used as an external reference.")]
        HRESULT XRefEdit([in] VARIANT_BOOL Edit);
        [id(0x00000005), propget, helpstring("Specifies or returns whether changes to layers and paths of an external reference are saved with the document.")]
        HRESULT XRefLayerVisibility([out, retval] VARIANT_BOOL* XRefLayerVis);
        [id(0x00000005), propput, helpstring("Specifies or returns whether changes to layers and paths of an external reference are saved with the document.")]
        HRESULT XRefLayerVisibility([in] VARIANT_BOOL XRefLayerVis);
        [id(0x00000008), propget, helpstring("Specifies or returns whether to open an OLE object's corresponding application when printing the OLE object.")]
        HRESULT OLELaunch([out, retval] VARIANT_BOOL* Launch);
        [id(0x00000008), propput, helpstring("Specifies or returns whether to open an OLE object's corresponding application when printing the OLE object.")]
        HRESULT OLELaunch([in] VARIANT_BOOL Launch);
        [id(0x00000009), propget, helpstring("Specifies or returns whether symbol names can include extended characters.")]
        HRESULT AllowLongSymbolNames([out, retval] VARIANT_BOOL* LongNames);
        [id(0x00000009), propput, helpstring("Specifies or returns whether symbol names can include extended characters.")]
        HRESULT AllowLongSymbolNames([in] VARIANT_BOOL LongNames);
        [id(0x0000000a), propget, helpstring("Specifies or returns whether objects are sorted by entity selection.")]
        HRESULT ObjectSortBySelection([out, retval] VARIANT_BOOL* Sort);
        [id(0x0000000a), propput, helpstring("Specifies or returns whether objects are sorted by entity selection.")]
        HRESULT ObjectSortBySelection([in] VARIANT_BOOL Sort);
        [id(0x0000000b), propget, helpstring("Specifies or returns whether objects are sorted by object snap.")]
        HRESULT ObjectSortBySnap([out, retval] VARIANT_BOOL* Sort);
        [id(0x0000000b), propput, helpstring("Specifies or returns whether objects are sorted by object snap.")]
        HRESULT ObjectSortBySnap([in] VARIANT_BOOL Sort);
        [id(0x0000000c), propget, helpstring("Specifies or returns whether objects are sorted by redraw order.")]
        HRESULT ObjectSortByRedraws([out, retval] VARIANT_BOOL* Sort);
        [id(0x0000000c), propput, helpstring("Specifies or returns whether objects are sorted by redraw order.")]
        HRESULT ObjectSortByRedraws([in] VARIANT_BOOL Sort);
        [id(0x0000000d), propget, helpstring("Specifies or returns whether objects are sorted by regeneration order.")]
        HRESULT ObjectSortByRegens([out, retval] VARIANT_BOOL* Sort);
        [id(0x0000000d), propput, helpstring("Specifies or returns whether objects are sorted by regeneration order.")]
        HRESULT ObjectSortByRegens([in] VARIANT_BOOL Sort);
        [id(0x0000000e), propget, helpstring("Specifies or returns whether objects are sorted by printing order.")]
        HRESULT ObjectSortByPlotting([out, retval] VARIANT_BOOL* Sort);
        [id(0x0000000e), propput, helpstring("Specifies or returns whether objects are sorted by printing order.")]
        HRESULT ObjectSortByPlotting([in] VARIANT_BOOL Sort);
        [id(0x00000010), propget, helpstring("Specifies or returns whether objects are sorted by PostScript output order.")]
        HRESULT ObjectSortByPSOutput([out, retval] VARIANT_BOOL* Sort);
        [id(0x00000010), propput, helpstring("Specifies or returns whether objects are sorted by PostScript output order.")]
        HRESULT ObjectSortByPSOutput([in] VARIANT_BOOL Sort);
        [id(0x00000013), propput, helpstring("Specifies or returns the number of isolines per surface for objects.")]
        HRESULT ContourLinesPerSurface([in] long Path);
        [id(0x00000013), propget, helpstring("Specifies or returns the number of isolines per surface for objects.")]
        HRESULT ContourLinesPerSurface([out, retval] long* Path);
        [id(0x00000015), propput, helpstring("Specifies or returns whether silhouette curves of 3D solids display in wireframe view.")]
        HRESULT DisplaySilhouette([in] VARIANT_BOOL Path);
        [id(0x00000015), propget, helpstring("Specifies or returns whether silhouette curves of 3D solids display in wireframe view.")]
        HRESULT DisplaySilhouette([out, retval] VARIANT_BOOL* Path);
        [id(0x00000016), propput, helpstring("Specifies or returns the maximum number of active viewports allowed in a document.")]
        HRESULT MaxActiveViewports([in] long Path);
        [id(0x00000016), propget, helpstring("Specifies or returns the maximum number of active viewports allowed in a document.")]
        HRESULT MaxActiveViewports([out, retval] long* Path);
        [id(0x00000017), propput, helpstring("Specifies or returns the quality of hidden, shaded, and rendered objects.")]
        HRESULT RenderSmoothness([in] double Path);
        [id(0x00000017), propget, helpstring("Specifies or returns the quality of hidden, shaded, and rendered objects.")]
        HRESULT RenderSmoothness([out, retval] double* Path);
        [id(0x00000018), propput, helpstring("Specifies or returns the number of line segments generated for polylines.")]
        HRESULT SegmentPerPolyline([in] long Path);
        [id(0x00000018), propget, helpstring("Specifies or returns the number of line segments generated for polylines.")]
        HRESULT SegmentPerPolyline([out, retval] long* Path);
        [id(0x00000019), propput, helpstring("Specifies or returns whether text frames display instead of text.")]
        HRESULT TextFrameDisplay([in] VARIANT_BOOL Path);
        [id(0x00000019), propget, helpstring("Specifies or returns whether text frames display instead of text.")]
        HRESULT TextFrameDisplay([out, retval] VARIANT_BOOL* Path);
        [id(0x0000001a), propput, helpstring("Not implemented. Specifies or returns the default lineweight for a document.")]
        HRESULT Lineweight([in] AcLineWeight Path);
        [id(0x0000001a), propget, helpstring("Not implemented. Specifies or returns the default lineweight for a document.")]
        HRESULT Lineweight([out, retval] AcLineWeight* Path);
        [id(0x0000001b), propput, helpstring("Specifies or returns whether lineweights display in a document.")]
        HRESULT LineWeightDisplay([in] VARIANT_BOOL Path);
        [id(0x0000001b), propget, helpstring("Specifies or returns whether lineweights display in a document.")]
        HRESULT LineWeightDisplay([out, retval] VARIANT_BOOL* Path);
    };

    [
      odl,
      uuid(54177F79-71B2-40B0-959F-9B9CBA2906DF),
      helpstring("TeighaX Interface for creating, updating, retrieving and removing items in the File Dependency List"),
      dual,
      oleautomation
    ]
    interface IAcadFileDependencies : IDispatch {
        [id(00000000), helpstring("Returns an object at a given index in the collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadFileDependency** pItem);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000001), propget, helpstring("Returns the Application object.")]
        HRESULT Application([out, retval] IDispatch** pAppObj);
        [id(0x00000002), propget, helpstring("Returns the number of items in the collection.")]
        HRESULT Count([out, retval] long* pVal);
        [id(0x00000003), helpstring("Creates an entry in the File Dependencis list.")]
        HRESULT CreateEntry(
                        [in] BSTR Feature, 
                        [in] BSTR FullFileName, 
                        [in] VARIANT_BOOL AffectsGraphics, 
                        [in] VARIANT_BOOL noIncrement, 
                        [out, retval] long* Index);
        [id(0x00000004), helpstring("Returns the index in the collection of a specified entry.")]
        HRESULT IndexOf(
                        [in] BSTR Feature, 
                        [in] BSTR FullFileName, 
                        [out, retval] long* Index);
        [id(0x00000005), helpstring("Removes an entry from the File Dependencies list.")]
        HRESULT RemoveEntry(
                        [in] long Index, 
                        [in] VARIANT_BOOL forceRemove);
        [id(0x00000006), helpstring("Updates an entry in the File Dependencies list.")]
        HRESULT UpdateEntry([in] long Index);
    };

    [
      odl,
      uuid(547F4881-8B0E-47EE-A4DF-1B4264D5844E),
      helpstring("TeighaX Interface to provide information about entries in the File Dependency List of a drawing file"),
      dual,
      oleautomation
    ]
    interface IAcadFileDependency : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the path and file name of an entry in the File Dependencies list.")]
        HRESULT FullFileName([out, retval] BSTR* FullFileName);
        [id(0x00000002), propget, helpstring("Returns the file name of an entry in the File Dependencies list.")]
        HRESULT FileName([out, retval] BSTR* FileName);
        [id(0x00000003), propget, helpstring("Returns the alternative path for an entry in the File Dependencies list.")]
        HRESULT FoundPath([out, retval] BSTR* FoundPath);
        [id(0x00000004), propget, helpstring("Returns the fingerprint GUID for an entry in the File Dependencies list.")]
        HRESULT FingerprintGuid([out, retval] BSTR* FingerprintGuid);
        [id(0x00000005), propget, helpstring("Returns the version GUID for an entry in the File Dependencies list.")]
        HRESULT VersionGuid([out, retval] BSTR* VersionGuid);
        [id(0x00000006), propget, helpstring("Returns the feature, such as XRef, for an entry in the File Dependencies list.")]
        HRESULT Feature([out, retval] BSTR* Feature);
        [id(0x00000007), propget, helpstring("Returns whether the entry in the File Dependencies list has been changed.")]
        HRESULT IsModified([out, retval] VARIANT_BOOL* IsModified);
        [id(0x00000008), propget, helpstring("Returns whether an entry in the File Dependencies list affects graphics.")]
        HRESULT AffectsGraphics([out, retval] VARIANT_BOOL* AffectsGraphics);
        [id(0x00000009), propget, helpstring("Returns the index of an entry in the File Dependencies list.")]
        HRESULT Index([out, retval] long* Index);
        [id(0x00000010), propget, helpstring("Returns the timestamp of an entry in the File Dependencies list.")]
        HRESULT TimeStamp([out, retval] long* TimeStamp);
        [id(0x00000011), propget, helpstring("Returns the file size of an entry in the File Dependencies list.")]
        HRESULT FileSize([out, retval] long* FileSize);
        [id(0x00000012), propget, helpstring("Returns the reference count of an entry in the File Dependencies list.")]
        HRESULT ReferenceCount([out, retval] long* refCount);
    };

    [
      odl,
      uuid(85708FA7-37F7-49AD-B01A-D06F87BB1C53),
      helpstring("TeighaX Interface to provide an access to drawing properties such as the Title, Subject, Author, and Keywords properties"),
      dual,
      oleautomation
    ]
    interface IAcadSummaryInfo : IDispatch {
        [id(0x00000001), propget, helpstring("Specifies or returns the author value of the summary information.")]
        HRESULT Author([out, retval] BSTR* pAuthor);
        [id(0x00000001), propput, helpstring("Specifies or returns the author value of the summary information.")]
        HRESULT Author([in] BSTR pAuthor);
        [id(0x00000002), propget, helpstring("Specifies or returns the comments value of the summary information.")]
        HRESULT Comments([out, retval] BSTR* pComments);
        [id(0x00000002), propput, helpstring("Specifies or returns the comments value of the summary information.")]
        HRESULT Comments([in] BSTR pComments);
        [id(0x00000003), propget, helpstring("Specifies or returns the hyperlink base value of the summary information.")]
        HRESULT HyperlinkBase([out, retval] BSTR* pHyperlinkBase);
        [id(0x00000003), propput, helpstring("Specifies or returns the hyperlink base value of the summary information.")]
        HRESULT HyperlinkBase([in] BSTR pHyperlinkBase);
        [id(0x00000004), propget, helpstring("Specifies or returns the keywords value of the summary information.")]
        HRESULT Keywords([out, retval] BSTR* pKeywords);
        [id(0x00000004), propput, helpstring("Specifies or returns the keywords value of the summary information.")]
        HRESULT Keywords([in] BSTR pKeywords);
        [id(0x00000005), propget, helpstring("Specifies or returns the login name of the user who last saved the drawing.")]
        HRESULT LastSavedBy([out, retval] BSTR* pLastSavedBy);
        [id(0x00000005), propput, helpstring("Specifies or returns the login name of the user who last saved the drawing.")]
        HRESULT LastSavedBy([in] BSTR pLastSavedBy);
        [id(0x00000006), propget, helpstring("Specifies or returns the revision number value of the summary information.")]
        HRESULT RevisionNumber([out, retval] BSTR* pRevisionNumber);
        [id(0x00000006), propput, helpstring("Specifies or returns the revision number value of the summary information.")]
        HRESULT RevisionNumber([in] BSTR pRevisionNumber);
        [id(0x00000007), propget, helpstring("Specifies or returns the subject value of the summary information.")]
        HRESULT Subject([out, retval] BSTR* pSubject);
        [id(0x00000007), propput, helpstring("Specifies or returns the subject value of the summary information.")]
        HRESULT Subject([in] BSTR pSubject);
        [id(0x00000008), propget, helpstring("Specifies or returns the title value of the summary information.")]
        HRESULT Title([out, retval] BSTR* pTitle);
        [id(0x00000008), propput, helpstring("Specifies or returns the title value of the summary information.")]
        HRESULT Title([in] BSTR pTitle);
        [id(0x00000009), helpstring("Returns the number of custom information items that have been defined for the summary information.")]
        HRESULT NumCustomInfo([out, retval] int* Index);
        [id(0x0000000a), helpstring("Using an index, returns the key and value of custom information that is defined for the summary information.")]
        HRESULT GetCustomByIndex(
                        [in] int Index, 
                        [out] BSTR* pKey, 
                        [out] BSTR* pValue);
        [id(0x0000000b), helpstring("Using a key, returns the key and value of custom information that is defined for the summary information.")]
        HRESULT GetCustomByKey(
                        [in] BSTR key, 
                        [out] BSTR* pValue);
        [id(0x0000000c), helpstring("Using an index, specifies the key and value of custom information defined for the summary information.")]
        HRESULT SetCustomByIndex(
                        [in] int Index, 
                        [in] BSTR key, 
                        [in] BSTR Value);
        [id(0x0000000d), helpstring("Using a key, specifies the key and value of custom information defined for the summary information.")]
        HRESULT SetCustomByKey(
                        [in] BSTR key, 
                        [in] BSTR Value);
        [id(0x0000000e), helpstring("Adds new custom information with a key (name) and value to the summary information.")]
        HRESULT AddCustomInfo(
                        [in] BSTR key, 
                        [in] BSTR Value);
        [id(0x0000000f), helpstring("Removes custom information using its index.")]
        HRESULT RemoveCustomByIndex([in] int Index);
        [id(0x00000010), helpstring("Removes custom information using its key.")]
        HRESULT RemoveCustomByKey([in] BSTR key);
    };

    [
      odl,
      uuid(1DB06549-B06B-4B72-A58C-10A3D78B0BC7),
      helpstring("TeighaX Interface for controls which property is constrained when editing other property values"),
      dual,
      oleautomation
    ]
    interface IAcadSectionManager : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in the collection of sections.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadSection** pSection);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection of sections.")]
        HRESULT Count([out, retval] long* pVal);
        [id(0x00000002), helpstring("Returns the current live section.")]
        HRESULT GetLiveSection([out, retval] IAcadSection** pSection);
        [id(0x00000003), helpstring("Returns a unique section name.")]
        HRESULT GetUniqueSectionName(
                        [in] BSTR pBaseName, 
                        [out, retval] BSTR* ppUniqueName);
    };

    [
      odl,
      uuid(940E4B3D-7757-4BCD-BD72-18CFF6634969),
      helpstring("TeighaX Interface for the collection of all materials in the drawing"),
      dual,
      oleautomation
    ]
    interface IAcadMaterials : IAcadObject {
        [id(00000000), helpstring("Returns an object at a given index in the collection.")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IAcadMaterial** pItem);
        [id(0x00000001), propget, helpstring("Returns the number of items in the collection.")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates an object and adds it to the collection.")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IAcadMaterial** pMaterial);
    };

    [
      odl,
      uuid(957AB896-43CD-4BD8-95FC-57532F3C2548),
      helpstring("TeighaX Interface of the render material characteristics"),
      dual,
      oleautomation
    ]
    interface IAcadMaterial : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies or returns the description of a material.")]
        HRESULT Description([out, retval] BSTR* bstrDes);
        [id(0x00000001), propput, helpstring("Specifies or returns the description of a material.")]
        HRESULT Description([in] BSTR bstrDes);
        [id(0x00000002), propget, helpstring("Specifies or returns the name of a material.")]
        HRESULT Name([out, retval] BSTR* bstrName);
        [id(0x00000002), propput, helpstring("Specifies or returns the name of a material.")]
        HRESULT Name([in] BSTR bstrName);
    };

    [
      odl,
      uuid(33C70868-FCC7-4E56-A5C5-F763030C3085),
      helpstring("TeighaX Interface for an additional Ole functionality"),
      dual,
      oleautomation
    ]
    interface IOdaOle : IAcadOle {
        [id(0x0000000b), propget, helpstring("Filename and item to which this OLE object is linked")]
        HRESULT LinkName([out, retval] BSTR* srcApp);
        [id(0x0000000c), propget, helpstring("Filename to which this OLE object is linked")]
        HRESULT LinkPath([out, retval] BSTR* srcApp);
    };

    [
      odl,
      uuid(52865E74-6DA0-426E-83CD-CCEA68A980C1),
      helpstring("TeighaX Interface of an object containing the properties of a dynamic block"),
      dual,
      oleautomation
    ]
    interface IAcadDynamicBlockReferenceProperty : IDispatch {
        [id(0x00000001), propget, helpstring("Returns the name of the property.")]
        HRESULT PropertyName([out, retval] BSTR* PropertyName);
        [id(0x00000002), propget, helpstring("Returns whether a property is read-only.")]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* ReadOnly);
        [id(0x00000003), propget, helpstring("Returns whether a property is available in the application user interface.")]
        HRESULT Show([out, retval] VARIANT_BOOL* Show);
        [id(0x00000004), propget, helpstring("Returns the description of the property.")]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000005), propget, helpstring("Returns the values that are valid for a property.")]
        HRESULT AllowedValues([out, retval] VARIANT* AllowedValues);
        [id(0x00000006), propget, helpstring("Specifies or returns the value of a property.")]
        HRESULT Value([out, retval] VARIANT* Value);
        [id(0x00000006), propput, helpstring("Specifies or returns the value of a property.")]
        HRESULT Value([in] VARIANT Value);
        [id(0x00000007), propget, helpstring("Returns the current units type for the display of a property.")]
        HRESULT UnitsType([out, retval] AcDynamicBlockReferencePropertyUnitsType* Units);
    };

    
    
        
        
        
        
    

    [
      odl,
      uuid(D70484E9-1FD7-46EB-AAAD-93042D0588EE),
      helpstring("TeighaX Interface for the collection of all mline styles in the drawing"),
      dual,
      oleautomation
    ]
    interface IOdaMLineStyles : IAcadObject {
        [id(00000000), helpstring("Gets the member object at a given index in a collection, group, or selection set")]
        HRESULT Item(
                        [in] VARIANT Index, 
                        [out, retval] IOdaMLineStyle** pItem);
        [id(0x00000001), propget, helpstring("Gets the number of items in the collection, dictionary, group, or selection set")]
        HRESULT Count([out, retval] long* pCount);
        [id(0xfffffffc), propget, restricted, hidden]
        HRESULT _NewEnum([out, retval] IUnknown** pVal);
        [id(0x00000002), helpstring("Creates a member object and adds it to the appropriate collection")]
        HRESULT Add(
                        [in] BSTR Name, 
                        [out, retval] IOdaMLineStyle** pLayout);
    };

    [
      odl,
      uuid(BA89E6C4-5CFE-4A12-BD43-E74BF8923520),
      helpstring("TeighaX Interface to define a style for multiple parallel lines"),
      dual,
      oleautomation
    ]
    interface IOdaMLineStyle : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies the name of the object")]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x00000001), propput, helpstring("Specifies the name of the object")]
        HRESULT Name([in] BSTR pName);
        [id(0x00000002), propget, helpstring("Specifies the style description")]
        HRESULT Description([out, retval] BSTR* bstrDes);
        [id(0x00000002), propput, helpstring("Specifies the style description")]
        HRESULT Description([in] BSTR bstrDes);
        [id(0x00000003), propget, helpstring("property StartAngle")]
        HRESULT StartAngle([out, retval] ACAD_ANGLE* pVal);
        [id(0x00000003), propput, helpstring("property StartAngle")]
        HRESULT StartAngle([in] ACAD_ANGLE pVal);
        [id(0x00000004), propget, helpstring("property EndAngle")]
        HRESULT EndAngle([out, retval] ACAD_ANGLE* pVal);
        [id(0x00000004), propput, helpstring("property EndAngle")]
        HRESULT EndAngle([in] ACAD_ANGLE pVal);
        [id(0x00000005), propget, helpstring("property FillColor")]
        HRESULT FillColor([out, retval] IAcadAcCmColor** pVal);
        [id(0x00000005), propput, helpstring("property FillColor")]
        HRESULT FillColor([in] IAcadAcCmColor* pVal);
        [id(0x00000006), propget, helpstring("returns the number of elements in style")]
        HRESULT ElementsCount([out, retval] long* pVal);
        [id(0x00000007), propget, helpstring("property Filled (DXF 70, bit 0x01)")]
        HRESULT Filled([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000007), propput, helpstring("property Filled (DXF 70, bit 0x01)")]
        HRESULT Filled([in] VARIANT_BOOL pVal);
        [id(0x00000008), propget, helpstring("property ShowMiters (DXF 70, bit 0x02)")]
        HRESULT ShowMiters([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000008), propput, helpstring("property ShowMiters (DXF 70, bit 0x02)")]
        HRESULT ShowMiters([in] VARIANT_BOOL pVal);
        [id(0x00000009), propget, helpstring("property StartSquareCap (DXF 70, bit 0x10)")]
        HRESULT StartSquareCap([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000009), propput, helpstring("property StartSquareCap (DXF 70, bit 0x10)")]
        HRESULT StartSquareCap([in] VARIANT_BOOL pVal);
        [id(0x0000000a), propget, helpstring("property StartRoundCap (DXF 70, bit 0x40)")]
        HRESULT StartRoundCap([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000a), propput, helpstring("property StartRoundCap (DXF 70, bit 0x40)")]
        HRESULT StartRoundCap([in] VARIANT_BOOL pVal);
        [id(0x0000000b), propget, helpstring("property StartInnerArcs (DXF 70, bit 0x20)")]
        HRESULT StartInnerArcs([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000b), propput, helpstring("property StartInnerArcs (DXF 70, bit 0x20)")]
        HRESULT StartInnerArcs([in] VARIANT_BOOL pVal);
        [id(0x0000000c), propget, helpstring("property EndSquareCap (DXF 70, bit 0x80)")]
        HRESULT EndSquareCap([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000c), propput, helpstring("property EndSquareCap (DXF 70, bit 0x80)")]
        HRESULT EndSquareCap([in] VARIANT_BOOL pVal);
        [id(0x0000000d), propget, helpstring("property EndRoundCap (DXF 70, bit 0x200)")]
        HRESULT EndRoundCap([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000d), propput, helpstring("property EndRoundCap (DXF 70, bit 0x200)")]
        HRESULT EndRoundCap([in] VARIANT_BOOL pVal);
        [id(0x0000000e), propget, helpstring("property EndInnerArcs (DXF 70, bit 0x100)")]
        HRESULT EndInnerArcs([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000e), propput, helpstring("property EndInnerArcs (DXF 70, bit 0x100)")]
        HRESULT EndInnerArcs([in] VARIANT_BOOL pVal);
        [id(0x0000000f), helpstring("Adds an element to this MLine Style")]
        HRESULT AddElement(
                        [in] double Offset, 
                        [in] IAcadAcCmColor* color, 
                        [in] IAcadLineType* pLinetype);
        [id(0x00000010), propget, helpstring("Returns the offset values for an existing element in this MLine Style")]
        HRESULT OffsetAt(
                        [in] int Index, 
                        [out, retval] double* Value);
        [id(0x00000010), propput, helpstring("Returns the offset values for an existing element in this MLine Style")]
        HRESULT OffsetAt(
                        [in] int Index, 
                        [in] double Value);
        [id(0x00000011), propget, helpstring("Returns the Color object for an existing element in this MLine Style")]
        HRESULT ColorAt(
                        [in] int Index, 
                        [out, retval] IAcadAcCmColor** color);
        [id(0x00000011), propput, helpstring("Returns the Color object for an existing element in this MLine Style")]
        HRESULT ColorAt(
                        [in] int Index, 
                        [in] IAcadAcCmColor* color);
        [id(0x00000012), propget, helpstring("Returns the Line Type object for an existing element in this MLine Style")]
        HRESULT LineTypeAt(
                        [in] int Index, 
                        [out, retval] IAcadLineType** Linetype);
        [id(0x00000012), propput, helpstring("Returns the Line Type object for an existing element in this MLine Style")]
        HRESULT LineTypeAt(
                        [in] int Index, 
                        [in] IAcadLineType* Linetype);
    };

    [
      odl,
      uuid(8ED31D2F-650B-4F34-B838-0BB63F88E015),
      helpstring("TeighaX Interface of Surface entity"),
      dual,
      oleautomation
    ]
    interface IAcadSurface : IAcadEntity {
        [id(0x00000001), propget, helpstring("Returns the type of a surface.")]
        HRESULT SurfaceType([out, retval] BSTR* SurfaceType);
        [id(0x0000000a), propget, helpstring("Specifies or returns the number of U isolines per surface that display.")]
        HRESULT UIsolineDensity([out, retval] long* density);
        [id(0x0000000a), propput, helpstring("Specifies or returns the number of U isolines per surface that display.")]
        HRESULT UIsolineDensity([in] long density);
        [id(0x0000000b), propget, helpstring("Specifies or returns the number of V isolines per surface that display.")]
        HRESULT VIsolineDensity([out, retval] long* density);
        [id(0x0000000b), propput, helpstring("Specifies or returns the number of V isolines per surface that display.")]
        HRESULT VIsolineDensity([in] long density);
    };

    [
      odl,
      uuid(A5E98827-C619-4E52-9DA6-3FE93E0FD289),
      helpstring("TeighaX Interface of a planar surface entity"),
      dual,
      oleautomation
    ]
    interface IAcadPlaneSurface : IAcadSurface {
    };

    [
      odl,
      uuid(6C6837B0-2BC0-47BD-B84F-AB50D0567942),
      helpstring("TeighaX Interface of a surface created by extruding an object or a planar face a specified distance and direction"),
      dual,
      oleautomation
    ]
    interface IAcadExtrudedSurface : IAcadSurface {
        [id(0x00000002), propget, helpstring("Specifies or returns the height of the extruded surface.")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000002), propput, helpstring("Specifies or returns the height of the extruded surface.")]
        HRESULT Height([in] double Height);
        [id(0x00000003), propget, helpstring("Specifies or returns the taper angle of the extruded surface.")]
        HRESULT TaperAngle([out, retval] ACAD_ANGLE* TaperAngle);
        [id(0x00000003), propput, helpstring("Specifies or returns the taper angle of the extruded surface.")]
        HRESULT TaperAngle([in] ACAD_ANGLE TaperAngle);
        [id(0x00000004), propget, helpstring("Returns the direction of the extruded surface.")]
        HRESULT Direction([out, retval] VARIANT* Direction);
    };

    [
      odl,
      uuid(8B45DE51-EC85-49E7-BF3E-3243CCDABA0F),
      helpstring("TeighaX Interface of a surface created by revolving one or more 2D objects about an axis"),
      dual,
      oleautomation
    ]
    interface IAcadRevolvedSurface : IAcadSurface {
        [id(0x00000002), propget, helpstring("Specifies or returns the angle of revolution for a revolved surface.")]
        HRESULT RevolutionAngle([out, retval] ACAD_ANGLE* revAngle);
        [id(0x00000002), propput, helpstring("Specifies or returns the angle of revolution for a revolved surface.")]
        HRESULT RevolutionAngle([in] ACAD_ANGLE revAngle);
        [id(0x00000003), propget, helpstring("Specifies or returns the start point of the revolution axis for a revolved surface.")]
        HRESULT AxisPosition([out, retval] VARIANT* AxisPosition);
        [id(0x00000003), propput, helpstring("Specifies or returns the start point of the revolution axis for a revolved surface.")]
        HRESULT AxisPosition([in] VARIANT AxisPosition);
        [id(0x00000004), propget, helpstring("Returns the direction of the revolution axis for a revolved surface.")]
        HRESULT AxisDirection([out, retval] VARIANT* AxisDirection);
    };

    [
      odl,
      uuid(FE66931A-5171-4021-B249-E0EEFC35ABD4),
      helpstring("TeighaX Interface of a surface created by sweeping a 2D curve along a path"),
      dual,
      oleautomation
    ]
    interface IAcadSweptSurface : IAcadSurface {
        [id(0x00000002), propget, helpstring("Specifies or returns the rotation of the profile used for a swept surface.")]
        HRESULT ProfileRotation([out, retval] ACAD_ANGLE* profileRotationAngle);
        [id(0x00000002), propput, helpstring("Specifies or returns the rotation of the profile used for a swept surface.")]
        HRESULT ProfileRotation([in] ACAD_ANGLE profileRotationAngle);
        [id(0x00000003), propget, helpstring("Specifies or returns whether the profile of a swept surface is banked along the path.")]
        HRESULT Bank([out, retval] VARIANT_BOOL* bBank);
        [id(0x00000003), propput, helpstring("Specifies or returns whether the profile of a swept surface is banked along the path.")]
        HRESULT Bank([in] VARIANT_BOOL bBank);
        [id(0x00000004), propget, helpstring("Specifies or returns the rotation value applied along the path of a swept surface.")]
        HRESULT Twist([out, retval] ACAD_ANGLE* TwistAngle);
        [id(0x00000004), propput, helpstring("Specifies or returns the rotation value applied along the path of a swept surface.")]
        HRESULT Twist([in] ACAD_ANGLE TwistAngle);
        [id(0x00000005), propget, helpstring("Specifies or returns the scale factor of a swept surface.")]
        HRESULT scale([out, retval] double* scale);
        [id(0x00000005), propput, helpstring("Specifies or returns the scale factor of a swept surface.")]
        HRESULT scale([in] double scale);
        [id(0x00000006), propget, helpstring("Not implemented. Returns the length of the path for a swept surface.")]
        HRESULT Length([out, retval] double* Length);
    };

    [
      odl,
      uuid(0A8F6B45-0E5F-4595-AD6D-85C1D785E73C),
      helpstring("TeighaX Interface of a surface created by lofting through a set of two or more curves"),
      dual,
      oleautomation
    ]
    interface IAcadLoftedSurface : IAcadSurface {
        [id(0x00000002), propget, helpstring("Returns the number of cross-sections used to create a lofted surface.")]
        HRESULT NumCrossSections([out, retval] long* NumCrossSections);
        [id(0x00000003), propget, helpstring("Returns the number of guide paths used to create a lofted surface.")]
        HRESULT NumGuidePaths([out, retval] long* NumGuidePaths);
        [id(0x00000004), propget, helpstring("Specifies or returns which curves are normal to the cross-sections.")]
        HRESULT SurfaceNormals([out, retval] AcLoftedSurfaceNormalType* surfaceNormal);
        [id(0x00000004), propput, helpstring("Specifies or returns which curves are normal to the cross-sections.")]
        HRESULT SurfaceNormals([in] AcLoftedSurfaceNormalType surfaceNormal);
        [id(0x00000005), propget, helpstring("Specifies or returns the angle of the first cross-section surface.")]
        HRESULT StartDraftAngle([out, retval] ACAD_ANGLE* StartDraftAngle);
        [id(0x00000005), propput, helpstring("Specifies or returns the angle of the first cross-section surface.")]
        HRESULT StartDraftAngle([in] ACAD_ANGLE StartDraftAngle);
        [id(0x00000006), propget, helpstring("Specifies or returns the magnitude of the first cross-section surface.")]
        HRESULT StartDraftMagnitude([out, retval] double* startDraftMag);
        [id(0x00000006), propput, helpstring("Specifies or returns the magnitude of the first cross-section surface.")]
        HRESULT StartDraftMagnitude([in] double startDraftMag);
        [id(0x00000007), propget, helpstring("Specifies or returns the angle of the last cross-section surface.")]
        HRESULT EndDraftAngle([out, retval] ACAD_ANGLE* EndDraftAngle);
        [id(0x00000007), propput, helpstring("Specifies or returns the angle of the last cross-section surface.")]
        HRESULT EndDraftAngle([in] ACAD_ANGLE EndDraftAngle);
        [id(0x00000008), propget, helpstring("Specifies or returns the magnitude of the last cross-section surface.")]
        HRESULT EndDraftMagnitude([out, retval] double* endDraftMag);
        [id(0x00000008), propput, helpstring("Specifies or returns the magnitude of the last cross-section surface.")]
        HRESULT EndDraftMagnitude([in] double endDraftMag);
        [id(0x00000009), propget, helpstring("Specfies or returns whether the lofted surface is open or closed.")]
        HRESULT Closed([out, retval] VARIANT_BOOL* bClosed);
        [id(0x00000009), propput, helpstring("Specfies or returns whether the lofted surface is open or closed.")]
        HRESULT Closed([in] VARIANT_BOOL bClosed);
    };

    
    
        
        
        
        
        
        
        
    

    [
      odl,
      uuid(9FDCF618-6E1D-431D-AA8A-3714B6665A13),
      helpstring("TeighaX Interface of Helix entity"),
      dual,
      oleautomation
    ]
    interface IAcadHelix : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the x, y, and z coordinates for the base center point of a helix.")]
        HRESULT Position([out, retval] VARIANT* StartPoint);
        [id(0x00000001), propput, helpstring("Specifies or returns the x, y, and z coordinates for the base center point of a helix.")]
        HRESULT Position([in] VARIANT StartPoint);
        [id(0x00000002), propget, helpstring("Specifies or returns the property that is contrained to remain constant when changing other properties of a helix.")]
        HRESULT Constrain([out, retval] AcHelixConstrainType* constrainType);
        [id(0x00000002), propput, helpstring("Specifies or returns the property that is contrained to remain constant when changing other properties of a helix.")]
        HRESULT Constrain([in] AcHelixConstrainType constrainType);
        [id(0x00000003), propget, helpstring("Specifies or returns the height of a helix.")]
        HRESULT Height([out, retval] double* Length);
        [id(0x00000003), propput, helpstring("Specifies or returns the height of a helix.")]
        HRESULT Height([in] double Length);
        [id(0x00000004), propget, helpstring("Specifies or returns the number of turns for a helix.")]
        HRESULT Turns([out, retval] ACAD_NOUNITS* Turns);
        [id(0x00000004), propput, helpstring("Specifies or returns the number of turns for a helix.")]
        HRESULT Turns([in] ACAD_NOUNITS Turns);
        [id(0x00000005), propget, helpstring("Specifies or returns the height of a single turn for a helix.")]
        HRESULT TurnHeight([out, retval] double* Distance);
        [id(0x00000005), propput, helpstring("Specifies or returns the height of a single turn for a helix.")]
        HRESULT TurnHeight([in] double Distance);
        [id(0x00000006), propget, helpstring("Specifies or returns the radius of the base of a helix.")]
        HRESULT BaseRadius([out, retval] double* Radius);
        [id(0x00000006), propput, helpstring("Specifies or returns the radius of the base of a helix.")]
        HRESULT BaseRadius([in] double Radius);
        [id(0x00000007), propget, helpstring("Specifies or returns the radius of the top of a helix.")]
        HRESULT TopRadius([out, retval] double* Radius);
        [id(0x00000007), propput, helpstring("Specifies or returns the radius of the top of a helix.")]
        HRESULT TopRadius([in] double Radius);
        [id(0x00000008), propget, helpstring("Specifies or returns the direction in which a helix turns.")]
        HRESULT Twist([out, retval] AcHelixTwistType* twistType);
        [id(0x00000008), propput, helpstring("Specifies or returns the direction in which a helix turns.")]
        HRESULT Twist([in] AcHelixTwistType twistType);
        [id(0x00000009), propget, helpstring("Returns the slope angle in which a helix turns along a path.")]
        HRESULT TurnSlope([out, retval] ACAD_ANGLE* slopeAngle);
        [id(0x0000000a), propget, helpstring("Specifies the length of a helix.")]
        HRESULT TotalLength([out, retval] double* TotalLength);
    };

    
    
        
        
        
    

    
    
        
        
    

    [
      odl,
      uuid(96B803C9-2375-4885-918C-F3B269CAA620),
      dual,
      oleautomation
    ]
    interface IAcadUnderlay : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the contrast of the underlay.")]
        HRESULT Contrast([out, retval] long* Contrast);
        [id(0x00000001), propput, helpstring("Specifies or returns the contrast of the underlay.")]
        HRESULT Contrast([in] long Contrast);
        [id(0x00000002), propget, helpstring("Specifies or returns the fade of the underlay.")]
        HRESULT Fade([out, retval] long* Fade);
        [id(0x00000002), propput, helpstring("Specifies or returns the fade of the underlay.")]
        HRESULT Fade([in] long Fade);
        [id(0x00000003), propget, helpstring("Specifies or returns the lower left point of the underlay position.")]
        HRESULT Position([out, retval] VARIANT* pos);
        [id(0x00000003), propput, helpstring("Specifies or returns the lower left point of the underlay position.")]
        HRESULT Position([in] VARIANT pos);
        [id(0x00000004), propget, helpstring("Specifies or returns the rotation of the underlay.")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000004), propput, helpstring("Specifies or returns the rotation of the underlay.")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000005), propget, helpstring("Specifies or returns the width of the underlay.")]
        HRESULT Width([out, retval] double* Width);
        [id(0x00000005), propput, helpstring("Specifies or returns the width of the underlay.")]
        HRESULT Width([in] double Width);
        [id(0x00000006), propget, helpstring("Specifies or returns the height of the underlay.")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000006), propput, helpstring("Specifies or returns the height of the underlay.")]
        HRESULT Height([in] double Height);
        [id(0x00000007), propget, helpstring("Specifies or returns the name of the underlay file.")]
        HRESULT UnderlayName([out, retval] BSTR* Name);
        [id(0x00000007), propput, helpstring("Specifies or returns the name of the underlay file.")]
        HRESULT UnderlayName([in] BSTR Name);
        [id(0x00000008), propput, helpstring("Specifies or returns the item name of the underlay file.")]
        HRESULT ItemName([in] BSTR sheetName);
        [id(0x00000008), propget, helpstring("Specifies or returns the item name of the underlay file.")]
        HRESULT ItemName([out, retval] BSTR* sheetName);
        [id(0x0000000a), propget, helpstring("Specifies or returns whether the underlay displays in monochrome.")]
        HRESULT Monochrome([out, retval] VARIANT_BOOL* bMono);
        [id(0x0000000a), propput, helpstring("Specifies or returns whether the underlay displays in monochrome.")]
        HRESULT Monochrome([in] VARIANT_BOOL bMono);
        [id(0x0000000f), propget, helpstring("Specifies or returns whether underlay colors are adjusted according to the background color.")]
        HRESULT AdjustForBackground([out, retval] VARIANT_BOOL* Value);
        [id(0x0000000f), propput, helpstring("Specifies or returns whether underlay colors are adjusted according to the background color.")]
        HRESULT AdjustForBackground([in] VARIANT_BOOL Value);
        [id(0x0000000b), helpstring("Specifies an area for displaying and printing the underlay.")]
        HRESULT ClipBoundary([in] VARIANT boundry);
        [id(0x0000000c), propget, helpstring("Specifies or returns the scale factor of the underlay.")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* ScaleFactor);
        [id(0x0000000c), propput, helpstring("Specifies or returns the scale factor of the underlay.")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS ScaleFactor);
        [id(0x0000000d), propget, helpstring("Specifies or returns the path to the underlay file.")]
        HRESULT File([out, retval] BSTR* Name);
        [id(0x0000000d), propput, helpstring("Specifies or returns the path to the underlay file.")]
        HRESULT File([in] BSTR Name);
        [id(0x0000000e), propget, helpstring("Specifies or returns whether underlay displays in the drawing.")]
        HRESULT UnderlayVisibility([out, retval] VARIANT_BOOL* fVisible);
        [id(0x0000000e), propput, helpstring("Specifies or returns whether underlay displays in the drawing.")]
        HRESULT UnderlayVisibility([in] VARIANT_BOOL fVisible);
        [id(0x00000010), propget, helpstring("Specifies or returns whether the clipping boundary of the underlay is turned on.")]
        HRESULT ClippingEnabled([out, retval] VARIANT_BOOL* kClip);
        [id(0x00000010), propput, helpstring("Specifies or returns whether the clipping boundary of the underlay is turned on.")]
        HRESULT ClippingEnabled([in] VARIANT_BOOL kClip);
        [id(0x00000011), propget, helpstring("Specifies or returns whether the layers of a DWF underlay are applied.")]
        HRESULT UnderlayLayerOverrideApplied([out, retval] AcUnderlayLayerOverrideType* bOverride);
        [id(0x00000011), propput, helpstring("Specifies or returns whether the layers of a DWF underlay are applied.")]
        HRESULT UnderlayLayerOverrideApplied([in] AcUnderlayLayerOverrideType bOverride);
    };

    
    
        
        
    

    [
      odl,
      uuid(FFFCE8D9-CBBF-4D81-B93C-E635191A8882),
      dual,
      oleautomation
    ]
    interface IAcadDwfUnderlay : IAcadUnderlay {
        [id(0x00000012), propget, helpstring("Specifies the format of DWF file")]
        HRESULT DWFFormat([out, retval] BSTR* Name);
        [id(0x00000012), propput, helpstring("Specifies the format of DWF file")]
        HRESULT DWFFormat([in] BSTR Name);
    };

    [
      odl,
      uuid(9ADF8D5D-9577-45A8-9A57-D9E22A143745),
      helpstring("Polyface mesh extended interface"),
      dual,
      oleautomation
    ]
    interface IOdaPolyfaceMesh : IAcadPolyfaceMesh {
        [id(0x60050000)]
        HRESULT GetFaces([out] VARIANT* __MIDL__IOdaPolyfaceMesh0000);
    };

    [
      odl,
      uuid(B120E3EF-13BC-4017-BF35-CFBC454B93B6),
      helpstring("SubEntity Interface"),
      dual,
      oleautomation
    ]
    interface IAcadSubEntity : IDispatch {
        [id(0x00000400)]
        HRESULT OnModified();
        [id(0x00000401), propget, helpstring("Gets the AutoCAD class name of the object")]
        HRESULT ObjectName([out, retval] BSTR* ObjectName);
        [id(0x00000516), propget, helpstring("Returns the true color of the object.")]
        HRESULT color([out, retval] IAcadAcCmColor** pColor);
        [id(0x00000516), propput, helpstring("Returns the true color of the object.")]
        HRESULT color([in] IAcadAcCmColor* pColor);
        [id(0x00000501), propget, helpstring("Specifies the current layer of the object")]
        HRESULT Layer([out, retval] BSTR* Layer);
        [id(0x00000502), propget, helpstring("Specifies the current linetype of the object")]
        HRESULT Linetype([out, retval] BSTR* Linetype);
        [id(0x00000503), propget, helpstring("Specifies the linetype scale factor of the object")]
        HRESULT LinetypeScale([out, retval] ACAD_NOUNITS* ltScale);
        [id(0x00000513), propget, helpstring("Specifies the plotstyle name for the object")]
        HRESULT PlotStyleName([out, retval] BSTR* plotStyle);
        [id(0x00000514), propget, helpstring("Specifies the lineweight for the object")]
        HRESULT Lineweight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000515), propget, helpstring("Assigns a hyperlink to an object and displays the hyperlink name or description (if one is specified)")]
        HRESULT Hyperlinks([out, retval] IAcadHyperlinks** Hyperlinks);
    };

    [
      odl,
      uuid(7679F5B5-C0A6-4D0B-A7E5-0FF7632ECEF2),
      helpstring("AutoCAD Interface for Multi-Leader's Leader Line"),
      dual,
      oleautomation
    ]
    interface IAcadMLeaderLeader : IAcadSubEntity {
        [id(0x00000001), propget, helpstring("Specifies the leader type")]
        HRESULT LeaderType([out, retval] AcMLeaderType* Type);
        [id(0x00000001), propput, helpstring("Specifies the leader type")]
        HRESULT LeaderType([in] AcMLeaderType Type);
        [id(0x00000002), propget, helpstring("Specifies the color of the leader lines")]
        HRESULT LeaderLineColor([out, retval] IAcadAcCmColor** Type);
        [id(0x00000002), propput, helpstring("Specifies the color of the leader lines")]
        HRESULT LeaderLineColor([in] IAcadAcCmColor* Type);
        [id(0x00000003), propget, helpstring("Specifies the linetype of leader lines")]
        HRESULT LeaderLineType([out, retval] ACAD_LTYPE* Linetype);
        [id(0x00000003), propput, helpstring("Specifies the linetype of leader lines")]
        HRESULT LeaderLineType([in] ACAD_LTYPE Linetype);
        [id(0x00000004), propget, helpstring("Specifies the line weight of leader lines")]
        HRESULT LeaderLineWeight([out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000004), propput, helpstring("Specifies the line weight of leader lines")]
        HRESULT LeaderLineWeight([in] ACAD_LWEIGHT Lineweight);
        [id(0x00000005), propget, helpstring("Specifies the type of leader arrowhead")]
        HRESULT ArrowheadType([out, retval] AcDimArrowheadType* BlockName);
        [id(0x00000005), propput, helpstring("Specifies the type of leader arrowhead")]
        HRESULT ArrowheadType([in] AcDimArrowheadType BlockName);
        [id(0x00000006), propget, helpstring("Specifies the size of leader arrowhead")]
        HRESULT ArrowheadSize([out, retval] double* size);
        [id(0x00000006), propput, helpstring("Specifies the size of leader arrowhead")]
        HRESULT ArrowheadSize([in] double size);
        [id(0x00000007), propget, helpstring("Specifies the block to use as the custom arrowhead for leader lines of multileader")]
        HRESULT ArrowheadBlock([out, retval] BSTR* BlockName);
        [id(0x00000007), propput, helpstring("Specifies the block to use as the custom arrowhead for leader lines of multileader")]
        HRESULT ArrowheadBlock([in] BSTR BlockName);
    };

    [
      odl,
      uuid(5B6D4DCB-7FF5-4B2D-B878-5AD679F79FDA),
      helpstring("Interface for a face on an AcDb3dSolid"),
      dual,
      oleautomation
    ]
    interface IAcadSubEntSolidFace : IAcadSubEntity {
        [id(0x00000577), propget, helpstring("Specifies the material")]
        HRESULT Material([out, retval] BSTR* Material);
        [id(0x00000577), propput, helpstring("Specifies the material")]
        HRESULT Material([in] BSTR Material);
    };

    [
      odl,
      uuid(332874B6-F6AE-440B-904A-99200AA8BA5F),
      helpstring("Interface for a edge on an AcDb3dSolid"),
      dual,
      oleautomation
    ]
    interface IAcadSubEntSolidEdge : IAcadSubEntity {
    };

    [
      odl,
      uuid(6112E58E-CC44-4D3D-A6EC-7F8B72493250),
      helpstring("Interface for a vertex on an AcDb3dSolid"),
      dual,
      oleautomation
    ]
    interface IAcadSubEntSolidVertex : IAcadSubEntity {
    };

    [
      odl,
      uuid(D9796559-90C9-409B-8882-11C34BBDEF29),
      helpstring("Interface for an Wipeout Raster Image"),
      dual,
      oleautomation
    ]
    interface IAcadWipeout : IAcadRasterImage {
    };

    [
      odl,
      uuid(1461DD94-700C-46A7-B648-55FFD067EA51),
      helpstring("Interface for a Light entity"),
      dual,
      oleautomation
    ]
    interface IOdaLight : IAcadEntity {
        [id(0x00000001), propget]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget]
        HRESULT LightType([out, retval] BSTR* pVal);
        [id(0x00000002), propput]
        HRESULT LightType([in] BSTR pVal);
        [id(0x00000004), propget]
        HRESULT Status([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000004), propput]
        HRESULT Status([in] VARIANT_BOOL pVal);
        [id(0x00000005), propget]
        HRESULT Shadows([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000005), propput]
        HRESULT Shadows([in] VARIANT_BOOL pVal);
        [id(0x00000006), propget]
        HRESULT HotSpot([out, retval] ACAD_ANGLE* pVal);
        [id(0x00000006), propput]
        HRESULT HotSpot([in] ACAD_ANGLE pVal);
        [id(0x00000007), propget]
        HRESULT FallOff([out, retval] ACAD_ANGLE* pVal);
        [id(0x00000007), propput]
        HRESULT FallOff([in] ACAD_ANGLE pVal);
        [id(0x00000008), propget]
        HRESULT Intensity([out, retval] ACAD_NOUNITS* pVal);
        [id(0x00000008), propput]
        HRESULT Intensity([in] ACAD_NOUNITS pVal);
        [id(0x00000009), propget]
        HRESULT LightColor([out, retval] IAcadAcCmColor** ppColor);
        [id(0x00000009), propput]
        HRESULT LightColor([in] IAcadAcCmColor* ppColor);
        [id(0x0000000a), propget]
        HRESULT PlotGlyph([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000a), propput]
        HRESULT PlotGlyph([in] VARIANT_BOOL pVal);
        [id(0x0000000b), propget]
        HRESULT Position([out, retval] VARIANT* pVal);
        [id(0x0000000b), propput]
        HRESULT Position([in] VARIANT pVal);
        [id(0x0000000c), propget]
        HRESULT Target([out, retval] VARIANT* pVal);
        [id(0x0000000c), propput]
        HRESULT Target([in] VARIANT pVal);
        [id(0x0000000d), propget]
        HRESULT AttenuationType([out, retval] BSTR* pVal);
        [id(0x0000000d), propput]
        HRESULT AttenuationType([in] BSTR pVal);
        [id(0x0000000e), propget]
        HRESULT UseLimits([out, retval] VARIANT_BOOL* pVal);
        [id(0x0000000e), propput]
        HRESULT UseLimits([in] VARIANT_BOOL pVal);
        [id(0x0000000f), propget]
        HRESULT StartLimit([out, retval] double* pVal);
        [id(0x0000000f), propput]
        HRESULT StartLimit([in] double pVal);
        [id(0x00000010), propget]
        HRESULT EndLimit([out, retval] double* pVal);
        [id(0x00000010), propput]
        HRESULT EndLimit([in] double pVal);
        [id(0x00000011), propget]
        HRESULT ShadowType([out, retval] BSTR* pVal);
        [id(0x00000011), propput]
        HRESULT ShadowType([in] BSTR pVal);
        [id(0x00000012), propget]
        HRESULT MapSize([out, retval] BSTR* pVal);
        [id(0x00000012), propput]
        HRESULT MapSize([in] BSTR pVal);
        [id(0x00000013), propget]
        HRESULT Softness([out, retval] int* pVal);
        [id(0x00000013), propput]
        HRESULT Softness([in] int pVal);
        [id(0x00000014), propget]
        HRESULT FromVector([out, retval] VARIANT* pVal);
        [id(0x00000014), propput]
        HRESULT FromVector([in] VARIANT pVal);
        [id(0x00000015), propget]
        HRESULT ToVector([out, retval] VARIANT* pVal);
        [id(0x00000015), propput]
        HRESULT ToVector([in] VARIANT pVal);
        [id(0x00000016), propget]
        HRESULT SourceVectorX([out, retval] double* pVal);
        [id(0x00000016), propput]
        HRESULT SourceVectorX([in] double pVal);
        [id(0x00000017), propget]
        HRESULT SourceVectorY([out, retval] double* pVal);
        [id(0x00000017), propput]
        HRESULT SourceVectorY([in] double pVal);
        [id(0x00000018), propget]
        HRESULT SourceVectorZ([out, retval] double* pVal);
        [id(0x00000018), propput]
        HRESULT SourceVectorZ([in] double pVal);
        [id(0x00000019), propget]
        HRESULT LampIntensity([out, retval] VARIANT* pVal);
        [id(0x00000019), propput]
        HRESULT LampIntensity([in] VARIANT pVal);
        [id(0x0000001a), propget]
        HRESULT ResultIntensity([out, retval] BSTR* pVal);
        [id(0x0000001a), propput]
        HRESULT ResultIntensity([in] BSTR pVal);
        [id(0x0000001b), propget]
        HRESULT LampColor([out, retval] VARIANT* pVal);
        [id(0x0000001b), propput]
        HRESULT LampColor([in] VARIANT pVal);
        [id(0x0000001c), propget]
        HRESULT ResultColor([out, retval] IAcadAcCmColor** ppColor);
        [id(0x0000001c), propput]
        HRESULT ResultColor([in] IAcadAcCmColor* ppColor);
        [id(0x0000001d), propget]
        HRESULT WebFile([out, retval] BSTR* pVal);
        [id(0x0000001d), propput]
        HRESULT WebFile([in] BSTR pVal);
        [id(0x0000001e), propget]
        HRESULT WebPreview([out, retval] VARIANT* pVal);
        [id(0x0000001e), propput]
        HRESULT WebPreview([in] VARIANT pVal);
        [id(0x0000001f), propget]
        HRESULT WebRotateX([out, retval] ACAD_ANGLE* pVal);
        [id(0x0000001f), propput]
        HRESULT WebRotateX([in] ACAD_ANGLE pVal);
        [id(0x00000020), propget]
        HRESULT WebRotateY([out, retval] ACAD_ANGLE* pVal);
        [id(0x00000020), propput]
        HRESULT WebRotateY([in] ACAD_ANGLE pVal);
        [id(0x00000021), propget]
        HRESULT WebRotateZ([out, retval] ACAD_ANGLE* pVal);
        [id(0x00000021), propput]
        HRESULT WebRotateZ([in] ACAD_ANGLE pVal);
        [id(0x00000022), propget]
        HRESULT HasTarget([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000022), propput]
        HRESULT HasTarget([in] VARIANT_BOOL pVal);
        [id(0x00000023), propget]
        HRESULT ShadowSamples([out, retval] long* pVal);
        [id(0x00000023), propput]
        HRESULT ShadowSamples([in] long pVal);
        [id(0x00000024), propget]
        HRESULT ShadowVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000024), propput]
        HRESULT ShadowVisible([in] VARIANT_BOOL pVal);
        [id(0x00000025), propget]
        HRESULT ShadowShape([out, retval] BSTR* pVal);
        [id(0x00000025), propput]
        HRESULT ShadowShape([in] BSTR pVal);
        [id(0x00000026), propget]
        HRESULT ShadowRadius([out, retval] double* pVal);
        [id(0x00000026), propput]
        HRESULT ShadowRadius([in] double pVal);
        [id(0x00000027), propget]
        HRESULT IlluminanceDistance([out, retval] double* pVal);
        [id(0x00000027), propput]
        HRESULT IlluminanceDistance([in] double pVal);
        [id(0x00000028), propget]
        HRESULT ShadowLength([out, retval] double* pVal);
        [id(0x00000028), propput]
        HRESULT ShadowLength([in] double pVal);
        [id(0x00000029), propget]
        HRESULT ShadowWidth([out, retval] double* pVal);
        [id(0x00000029), propput]
        HRESULT ShadowWidth([in] double pVal);
        [id(0x0000002a), propget]
        HRESULT GlyphDisplay([out, retval] BSTR* pVal);
        [id(0x0000002a), propput]
        HRESULT GlyphDisplay([in] BSTR pVal);
    };

    [
      odl,
      uuid(2D375899-5080-40D2-81DF-21584EB11298),
      helpstring("Interface for a Camera entity"),
      dual,
      oleautomation
    ]
    interface IOdaCamera : IAcadEntity {
        [id(0x00000001), propget]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000001), propput]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000002), propget]
        HRESULT Location([out, retval] VARIANT* pVal);
        [id(0x00000002), propput]
        HRESULT Location([in] VARIANT pVal);
        [id(0x00000003), propget]
        HRESULT Target([out, retval] VARIANT* pVal);
        [id(0x00000003), propput]
        HRESULT Target([in] VARIANT pVal);
        [id(0x00000004), propget]
        HRESULT LensLength([out, retval] ACAD_NOUNITS* pVal);
        [id(0x00000004), propput]
        HRESULT LensLength([in] ACAD_NOUNITS pVal);
        [id(0x00000005), propget]
        HRESULT FieldOfView([out, retval] ACAD_ANGLE* pVal);
        [id(0x00000005), propput]
        HRESULT FieldOfView([in] ACAD_ANGLE pVal);
        [id(0x00000006), propget]
        HRESULT FrameHeight([out, retval] double* pVal);
        [id(0x00000006), propput]
        HRESULT FrameHeight([in] double pVal);
        [id(0x00000007), propget]
        HRESULT FrameWidth([out, retval] double* pVal);
        [id(0x00000007), propput]
        HRESULT FrameWidth([in] double pVal);
        [id(0x00000008), propget]
        HRESULT RollAngle([out, retval] ACAD_ANGLE* pVal);
        [id(0x00000008), propput]
        HRESULT RollAngle([in] ACAD_ANGLE pVal);
        [id(0x00000009), propget]
        HRESULT IsPlotable([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000009), propput]
        HRESULT IsPlotable([in] VARIANT_BOOL pVal);
        [id(0x0000000a), propget]
        HRESULT FrontPlane([out, retval] double* pVal);
        [id(0x0000000a), propput]
        HRESULT FrontPlane([in] double pVal);
        [id(0x0000000b), propget]
        HRESULT BackPlane([out, retval] double* pVal);
        [id(0x0000000b), propput]
        HRESULT BackPlane([in] double pVal);
        [id(0x0000000c), propget]
        HRESULT Clipping([out, retval] BSTR* pVal);
        [id(0x0000000c), propput]
        HRESULT Clipping([in] BSTR pVal);
    };

    [
      uuid(C6B40DB4-254A-44FE-971C-2CA547217C6E),
      helpstring("A single line segment.")
    ]
    coclass AcadLine {
        [default] interface IAcadLine;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(5D5556FB-EABE-49D0-957E-3507978DEE8F),
      helpstring("AcadObject Class")
    ]
    coclass AcadObject {
        [default] interface IAcadObject;
        interface IOPMPropertyExpander;
        interface IOPMPropertyExtension;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(66000881-FFF7-43ED-A325-BC627DAF9159)
    ]
    interface IOPMPropertyExpander : IUnknown {
        HRESULT _stdcall GetElementValue(
                        [in] long dispID, 
                        [in] unsigned long dwCookie, 
                        [out] VARIANT* pVarOut);
        HRESULT _stdcall SetElementValue(
                        [in] long dispID, 
                        [in] unsigned long dwCookie, 
                        [in] VARIANT VarIn);
        HRESULT _stdcall GetElementStrings(
                        [in] long dispID, 
                        [out] tagCALPOLESTR* pCaStringsOut, 
                        [out] tagCADWORD* pCaCookiesOut);
        HRESULT _stdcall GetElementGrouping(
                        [in] long dispID, 
                        [out] short* groupingNumber);
        HRESULT _stdcall GetGroupCount(
                        [in] long dispID, 
                        [out] long* nGroupCnt);
    };

    typedef struct tagtagCALPOLESTR {
                
unsigned long cElems;
                
LPWSTR* pElems;
    } tagCALPOLESTR;

    typedef struct tagtagCADWORD {
                
unsigned long cElems;
                
unsigned long* pElems;
    } tagCADWORD;

    [
      odl,
      uuid(75AA0ECD-1A80-4A23-BB47-31887B79BC54)
    ]
    interface IOPMPropertyExtension : IUnknown {
        HRESULT _stdcall GetDisplayName(
                        [in] long dispID, 
                        [out] BSTR* propName);
        HRESULT _stdcall Editable(
                        [in] long dispID, 
                        [out] long* bEditable);
        HRESULT _stdcall ShowProperty(
                        [in] long dispID, 
                        [out] long* pShow);
    };

    [
      uuid(CB757CB0-F820-43E1-B162-3712205FAC4F),
      helpstring("Parent object of all objects that can be drawn in a drawing.")
    ]
    coclass AcadEntity {
        [default] interface IAcadEntity;
    };

    [
      uuid(CD96D269-2287-407A-956A-8D45361904BA),
      helpstring("A dimension measuring and displaying the distance between objects.")
    ]
    coclass AcadDimension {
        [default] interface IAcadDimension;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(DC9F0095-2088-48FA-938C-EC4DEC4D0D13),
      helpstring("A dimension measuring the distance between two points and displaying the results at a specified angle from the points.")
    ]
    coclass AcadDimRotated {
        [default] interface IAcadDimRotated;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(876181C1-67EB-4E4F-A5B8-570F5CB53394),
      helpstring("Multiple lines of characters.")
    ]
    coclass AcadMText {
        [default] interface IAcadMText;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(23B03ED7-3BC3-4C01-9758-E5CD970B171C),
      helpstring("Contents of a block inserted as an external reference.")
    ]
    coclass AcadDatabase {
        [default] interface IAcadDatabase;
    };

    [
      uuid(E83BBDF9-F36B-4C1A-A5E9-4C4A120C9BC6),
      helpstring("AcadViewport Class")
    ]
    coclass AcadViewport {
        [default] interface IAcadViewport;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(E20748A7-32EC-4549-8CAA-E84EAD78204B),
      helpstring("AcadViewports Class")
    ]
    coclass AcadViewports {
        [default] interface IAcadViewports;
    };

    [
      uuid(970A99CF-465B-4D8B-9747-A7523A35D300),
      helpstring("A single line of characters.")
    ]
    coclass AcadText {
        [default] interface IAcadText;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(3566E6AE-5C92-49CD-BD2A-9111ECEBA4F0),
      helpstring("AcadTrace Class")
    ]
    coclass AcadTrace {
        [default] interface IAcadTrace;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(52879164-AB3D-4100-8631-19D9E580AA32),
      helpstring("Older version of lightweight polyline. Use AcadLWPolyline instead.")
    ]
    coclass AcadPolyline {
        [default] interface IAcadPolyline;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(42EB266C-E377-47D9-8380-66ACD608B53E),
      helpstring("Collection of all linetypes in a document.")
    ]
    coclass AcadLineTypes {
        [default] interface IAcadLineTypes;
    };

    [
      uuid(6CC41372-559E-4B27-BA3D-96EDCD43612B),
      helpstring("Definition of the appearance of a line.")
    ]
    coclass OdaLineType {
        [default] interface IOdaLineType;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(3CDC4D4D-AEB4-4CE4-9B48-99B635186D35),
      helpstring("An additional TeighaX Interface to the line characteristics"),
      dual,
      oleautomation
    ]
    interface IOdaLineType : IAcadLineType {
        [id(0x00000701), propget, helpstring("Specifies or returns the number of dashes of a linetype.")]
        HRESULT NumDashes([out, retval] long* Count);
        [id(0x00000701), propput, helpstring("Specifies or returns the number of dashes of a linetype.")]
        HRESULT NumDashes([in] long Count);
        [id(0x00000702), propget, helpstring("Specifies or returns the text to be included as part of a linetype.")]
        HRESULT TextAt(
                        [in] long Index, 
                        [out, retval] BSTR* bstrText);
        [id(0x00000702), propput, helpstring("Specifies or returns the text to be included as part of a linetype.")]
        HRESULT TextAt(
                        [in] long Index, 
                        [in] BSTR bstrText);
        [id(0x00000703), propget, helpstring("Specifies or returns the pattern length of a linetype.")]
        HRESULT PatternLength([out, retval] double* pVal);
        [id(0x00000703), propput, helpstring("Specifies or returns the pattern length of a linetype.")]
        HRESULT PatternLength([in] double pVal);
        [id(0x00000704), propget, helpstring("Specifies or returns the dash length of a linetype.")]
        HRESULT DashLengthAt(
                        long Index, 
                        [out, retval] double* pVal);
        [id(0x00000704), propput, helpstring("Specifies or returns the dash length of a linetype.")]
        HRESULT DashLengthAt(
                        long Index, 
                        [in] double pVal);
        [id(0x00000705), propget, helpstring("Specifies or returns the scale of a shape that is included as part of a linetype.")]
        HRESULT ShapeScaleAt(
                        long Index, 
                        [out, retval] double* pVal);
        [id(0x00000705), propput, helpstring("Specifies or returns the scale of a shape that is included as part of a linetype.")]
        HRESULT ShapeScaleAt(
                        long Index, 
                        [in] double pVal);
        [id(0x00000706), propget, helpstring("Specifies or returns the shape to be included as part of a linetype.")]
        HRESULT ShapeNumberAt(
                        long Index, 
                        [out, retval] short* pVal);
        [id(0x00000706), propput, helpstring("Specifies or returns the shape to be included as part of a linetype.")]
        HRESULT ShapeNumberAt(
                        long Index, 
                        [in] short pVal);
        [id(0x00000707), propget, helpstring("Specifies or returns the rotation angle of a shape or text that is included as part of a linetype.")]
        HRESULT ShapeRotationAt(
                        long Index, 
                        [out, retval] double* pVal);
        [id(0x00000707), propput, helpstring("Specifies or returns the rotation angle of a shape or text that is included as part of a linetype.")]
        HRESULT ShapeRotationAt(
                        long Index, 
                        [in] double pVal);
        [id(0x00000708), propget, helpstring("Specifies or returns the offset of a shape that is included as part of a linetype.")]
        HRESULT ShapeOffsetAt(
                        long Index, 
                        [out, retval] VARIANT* pVal);
        [id(0x00000708), propput, helpstring("Specifies or returns the offset of a shape that is included as part of a linetype.")]
        HRESULT ShapeOffsetAt(
                        long Index, 
                        [in] VARIANT pVal);
        [id(0x00000709), propget, helpstring("Specifies or returns the style of a shape or text that is included as part of a linetype.")]
        HRESULT ShapeStyleAt(
                        long Index, 
                        [out, retval] IAcadTextStyle** pStyle);
        [id(0x00000709), propput, helpstring("Specifies or returns the style of a shape or text that is included as part of a linetype.")]
        HRESULT ShapeStyleAt(
                        long Index, 
                        [in] IAcadTextStyle* pStyle);
    };

    [
      uuid(2DFE9E5B-F76F-4B39-854E-66364089A082),
      helpstring("Collection of all blocks in a document.")
    ]
    coclass AcadBlocks {
        [default] interface IAcadBlocks;
    };

    [
      uuid(F721EB1E-0E46-4615-870D-B8FC38C0ACB6),
      helpstring("OdaBlock Class")
    ]
    coclass OdaBlock {
        [default] interface IOdaBlock;
        interface IAcadBlock;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(C93D2220-49D3-4ECB-A29A-1A1062BFDA0A),
      helpstring("TeighaX Interface for an additional block functionality"),
      dual,
      oleautomation
    ]
    interface IOdaBlock : IAcadBlock {
        [id(0x00000701), helpstring("Returns all references for a block.")]
        HRESULT GetReferences([out, retval] VARIANT* pObjs);
        [id(0x00000702), propget, helpstring("Returns whether the block is an overlay.")]
        HRESULT isFromOverlayReference([out, retval] VARIANT_BOOL* bResult);
        [id(0x00000703), propget, helpstring("Returns whether the block is an external reference with a resolved path.")]
        HRESULT isResolved([out, retval] VARIANT_BOOL* bResult);
        [id(0x00000704), propget, helpstring("Returns whether the block is dependent on an external reference.")]
        HRESULT isDependent([out, retval] VARIANT_BOOL* bResult);
        [id(0x00000705), propget, helpstring("Returns whether the block is an external reference that is unloaded.")]
        HRESULT isUnloaded([out, retval] VARIANT_BOOL* bResult);
        [id(0x00000706), helpstring("Specfies whether a block is an overlay.")]
        HRESULT setOverlaid([in] VARIANT_BOOL bOverlaid);
    };

    [
      uuid(C4FBEE74-2C44-4745-A2D0-7E9E21B287AE),
      helpstring("AcadBlock dummy class")
    ]
    coclass AcadBlock {
        [default] interface IAcadBlock;
        interface IOdaBlock;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(F2E77BB0-AC27-414E-B9AB-81D574A1EE47),
      helpstring("An elliptical arc or a complete ellipse.")
    ]
    coclass AcadEllipse {
        [default] interface IAcadEllipse;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(9B6C89A8-918B-456E-9A4C-174C151DC35A),
      helpstring("A complete circle.")
    ]
    coclass AcadCircle {
        [default] interface IAcadCircle;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(3FAFE2FD-68F6-4DB3-9FFA-D2AC5B4CD927),
      helpstring("A single x, y, z coordinate location.")
    ]
    coclass AcadPoint {
        [default] interface IAcadPoint;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(3E01EA05-0A4B-4182-9155-B08199B15687),
      helpstring("A three-dimensional triangle or quadrilateral plane section.")
    ]
    coclass Acad3DFace {
        [default] interface IAcad3DFace;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(EE316821-2081-4390-93AB-35044494789B),
      helpstring("A polyline with three-dimensional characteristics.")
    ]
    coclass Acad3DPolyline {
        [default] interface IAcad3DPolyline;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(DA136D98-2827-4E29-8D77-F5FBF88E6915),
      helpstring("Not implemented. A solid object consisting of faces and edges and appearing to have volume.")
    ]
    coclass Acad3DSolid {
        [default] interface IAcad3DSolid;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(67301116-E0D3-4CFB-8421-925B862C231F),
      helpstring("A segment of a circle or ellipse.")
    ]
    coclass AcadArc {
        [default] interface IAcadArc;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(5EA06783-8C8B-4AB1-8D1F-57C73A36A100),
      helpstring("Text that describes an attribute reference.")
    ]
    coclass AcadAttribute {
        [default] interface IAcadAttribute;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(80F61DB5-FEEF-4F09-81D6-DD50B6F943E7),
      helpstring("A line leading from an entity to an annotation.")
    ]
    coclass AcadLeader {
        [default] interface IAcadLeader;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(BAD2E3C8-C47F-4155-970F-F18EFA565408),
      helpstring("Multiple lines leading from a single annotation to more than one object.")
    ]
    coclass AcadMLeader {
        [default] interface IAcadMLeader;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(7483B169-16D2-49E2-B459-B53C8B3AA39C),
      helpstring("Set of characteristics that determine the appearance of a multileader entity.")
    ]
    coclass AcadMLeaderStyle {
        [default] interface IAcadMLeaderStyle;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(A6D650D6-F792-465B-8AEA-4CF287802D01),
      helpstring("MLeaderStyle Interface"),
      dual,
      oleautomation
    ]
    interface IAcadMLeaderStyle : IAcadObject {
        [id(0x00000001), propget, helpstring("Specifies or returns the name of a multileader style.")]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x00000001), propput, helpstring("Specifies or returns the name of a multileader style.")]
        HRESULT Name([in] BSTR Name);
        [id(0x00000002), propget, helpstring("Specifies or returns the description of a multileader style.")]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000002), propput, helpstring("Specifies or returns the description of a multileader style.")]
        HRESULT Description([in] BSTR Description);
        [id(0x00000003), propget, helpstring("Specifies or returns the operation bit set of a multileader style.")]
        HRESULT BitFlags([out, retval] long* bitFlag);
        [id(0x00000003), propput, helpstring("Specifies or returns the operation bit set of a multileader style.")]
        HRESULT BitFlags([in] long bitFlag);
        [id(0x00000004), propget, helpstring("Specifies or returns the content type of a multileader style.")]
        HRESULT ContentType([out, retval] AcMLeaderContentType* Type);
        [id(0x00000004), propput, helpstring("Specifies or returns the content type of a multileader style.")]
        HRESULT ContentType([in] AcMLeaderContentType Type);
        [id(0x00000005), propget, helpstring("Specifies or returns the order of multileader creation for a multileader style.")]
        HRESULT DrawMLeaderOrderType([out, retval] AcDrawMLeaderOrderType* Type);
        [id(0x00000005), propput, helpstring("Specifies or returns the order of multileader creation for a multileader style.")]
        HRESULT DrawMLeaderOrderType([in] AcDrawMLeaderOrderType Type);
        [id(0x00000006), propget, helpstring("Specifies or returns the order of leader creation for a multileader of a multileader style.")]
        HRESULT DrawLeaderOrderType([out, retval] AcDrawLeaderOrderType* Type);
        [id(0x00000006), propput, helpstring("Specifies or returns the order of leader creation for a multileader of a multileader style.")]
        HRESULT DrawLeaderOrderType([in] AcDrawLeaderOrderType Type);
        [id(0x00000007), propget, helpstring("Specifies or returns the maximum number of segment points in multileader lines of a multileader style.")]
        HRESULT MaxLeaderSegmentsPoints([out, retval] int* number);
        [id(0x00000007), propput, helpstring("Specifies or returns the maximum number of segment points in multileader lines of a multileader style.")]
        HRESULT MaxLeaderSegmentsPoints([in] int number);
        [id(0x00000008), propget, helpstring("Specifies or returns the first segment angle constraint for a multileader of a multileader style.")]
        HRESULT FirstSegmentAngleConstraint([out, retval] AcSegmentAngleType* constraint);
        [id(0x00000008), propput, helpstring("Specifies or returns the first segment angle constraint for a multileader of a multileader style.")]
        HRESULT FirstSegmentAngleConstraint([in] AcSegmentAngleType constraint);
        [id(0x00000009), propget, helpstring("Specifies or returns the second segment angle constraint for a multileader of a multileader style.")]
        HRESULT SecondSegmentAngleConstraint([out, retval] AcSegmentAngleType* constraint);
        [id(0x00000009), propput, helpstring("Specifies or returns the second segment angle constraint for a multileader of a multileader style.")]
        HRESULT SecondSegmentAngleConstraint([in] AcSegmentAngleType constraint);
        [id(0x0000000a), propget, helpstring("Specifies or returns the leader line type of a multileader style.")]
        HRESULT LeaderLineType([out, retval] AcMLeaderType* Type);
        [id(0x0000000a), propput, helpstring("Specifies or returns the leader line type of a multileader style.")]
        HRESULT LeaderLineType([in] AcMLeaderType Type);
        [id(0x0000000b), propget, helpstring("Specifies or returns the color of leader lines for a multileader style.")]
        HRESULT LeaderLineColor([out, retval] IAcadAcCmColor** color);
        [id(0x0000000b), propput, helpstring("Specifies or returns the color of leader lines for a multileader style.")]
        HRESULT LeaderLineColor([in] IAcadAcCmColor* color);
        [id(0x0000000c), propget, helpstring("Specifies or returns the linetype of leader lines for a multileader style.")]
        HRESULT LeaderLineTypeId([out, retval] ACAD_LTYPE* Type);
        [id(0x0000000c), propput, helpstring("Specifies or returns the linetype of leader lines for a multileader style.")]
        HRESULT LeaderLineTypeId([in] ACAD_LTYPE Type);
        [id(0x0000000d), propget, helpstring("Specifies or returns the lineweight of leader lines for a multileader style.")]
        HRESULT LeaderLineWeight([out, retval] AcLineWeight* weight);
        [id(0x0000000d), propput, helpstring("Specifies or returns the lineweight of leader lines for a multileader style.")]
        HRESULT LeaderLineWeight([in] AcLineWeight weight);
        [id(0x0000000e), propget, helpstring("Specifies or returns whether the landing of leader lines is enabled for a multileader style.")]
        HRESULT EnableLanding([out, retval] VARIANT_BOOL* enabled);
        [id(0x0000000e), propput, helpstring("Specifies or returns whether the landing of leader lines is enabled for a multileader style.")]
        HRESULT EnableLanding([in] VARIANT_BOOL enabled);
        [id(0x0000000f), propget, helpstring("Specifies or returns the gap between multiline text and the tail of leader lines for a multileader style.")]
        HRESULT LandingGap([out, retval] double* LandingGap);
        [id(0x0000000f), propput, helpstring("Specifies or returns the gap between multiline text and the tail of leader lines for a multileader style.")]
        HRESULT LandingGap([in] double LandingGap);
        [id(0x00000010), propget, helpstring("Specifies or returns whether dog legs are enabled for leader lines of a multileader style.")]
        HRESULT EnableDogleg([out, retval] VARIANT_BOOL* enabled);
        [id(0x00000010), propput, helpstring("Specifies or returns whether dog legs are enabled for leader lines of a multileader style.")]
        HRESULT EnableDogleg([in] VARIANT_BOOL enabled);
        [id(0x00000011), propget, helpstring("Specifies or returns the dog leg length for leader lines of a multileader style.")]
        HRESULT DoglegLength([out, retval] double* DoglegLength);
        [id(0x00000011), propput, helpstring("Specifies or returns the dog leg length for leader lines of a multileader style.")]
        HRESULT DoglegLength([in] double DoglegLength);
        [id(0x00000012), propget, helpstring("Specifies or returns the arrow symbol of a multileader style.")]
        HRESULT ArrowSymbol([out, retval] BSTR* Name);
        [id(0x00000012), propput, helpstring("Specifies or returns the arrow symbol of a multileader style.")]
        HRESULT ArrowSymbol([in] BSTR Name);
        [id(0x00000013), propget, helpstring("Specifies or returns the arrow size of a multileader style.")]
        HRESULT ArrowSize([out, retval] double* size);
        [id(0x00000013), propput, helpstring("Specifies or returns the arrow size of a multileader style.")]
        HRESULT ArrowSize([in] double size);
        [id(0x00000014), propget, helpstring("Specifies or returns the text style of a multileader style.")]
        HRESULT TextStyle([out, retval] BSTR* Name);
        [id(0x00000014), propput, helpstring("Specifies or returns the text style of a multileader style.")]
        HRESULT TextStyle([in] BSTR Name);
        [id(0x00000015), propget, helpstring("Specifies or returns how left-aligned text is positioned for a multileader style.")]
        HRESULT TextLeftAttachmentType([out, retval] AcTextAttachmentType* Type);
        [id(0x00000015), propput, helpstring("Specifies or returns how left-aligned text is positioned for a multileader style.")]
        HRESULT TextLeftAttachmentType([in] AcTextAttachmentType Type);
        [id(0x00000028), propget, helpstring("Specifies or returns how right-aligned text is positioned for a multileader style.")]
        HRESULT TextRightAttachmentType([out, retval] AcTextAttachmentType* Type);
        [id(0x00000028), propput, helpstring("Specifies or returns how right-aligned text is positioned for a multileader style.")]
        HRESULT TextRightAttachmentType([in] AcTextAttachmentType Type);
        [id(0x00000016), propget, helpstring("Specifies or returns the multline text color of a multileader style.")]
        HRESULT TextColor([out, retval] IAcadAcCmColor** color);
        [id(0x00000016), propput, helpstring("Specifies or returns the multline text color of a multileader style.")]
        HRESULT TextColor([in] IAcadAcCmColor* color);
        [id(0x00000017), propget, helpstring("Specifies or returns the multline text height of a multileader style.")]
        HRESULT TextHeight([out, retval] double* Height);
        [id(0x00000017), propput, helpstring("Specifies or returns the multline text height of a multileader style.")]
        HRESULT TextHeight([in] double Height);
        [id(0x00000018), propget, helpstring("Specifies or returns whether a frame displays around multline text of a multileader style.")]
        HRESULT EnableFrameText([out, retval] VARIANT_BOOL* enabled);
        [id(0x00000018), propput, helpstring("Specifies or returns whether a frame displays around multline text of a multileader style.")]
        HRESULT EnableFrameText([in] VARIANT_BOOL enabled);
        [id(0x00000019), propget, helpstring("Specifies or returns the alignment space value of a multileader style.")]
        HRESULT AlignSpace([out, retval] double* AlignSpace);
        [id(0x00000019), propput, helpstring("Specifies or returns the alignment space value of a multileader style.")]
        HRESULT AlignSpace([in] double AlignSpace);
        [id(0x0000001a), propget, helpstring("Specifies or returns the block content of a multileader style.")]
        HRESULT Block([out, retval] BSTR* Name);
        [id(0x0000001a), propput, helpstring("Specifies or returns the block content of a multileader style.")]
        HRESULT Block([in] BSTR Name);
        [id(0x0000001b), propget, helpstring("Specifies or returns the color of block content for a multileader style.")]
        HRESULT BlockColor([out, retval] IAcadAcCmColor** color);
        [id(0x0000001b), propput, helpstring("Specifies or returns the color of block content for a multileader style.")]
        HRESULT BlockColor([in] IAcadAcCmColor* color);
        [id(0x0000001c), propget, helpstring("Specifies or returns whether the blocks are scaled for a multileader style.")]
        HRESULT EnableBlockScale([out, retval] VARIANT_BOOL* enabled);
        [id(0x0000001c), propput, helpstring("Specifies or returns whether the blocks are scaled for a multileader style.")]
        HRESULT EnableBlockScale([in] VARIANT_BOOL enabled);
        [id(0x0000001d), propget, helpstring("Specifies or returns the block scale value for a multileader style.")]
        HRESULT BlockScale([out, retval] double* ScaleFactor);
        [id(0x0000001d), propput, helpstring("Specifies or returns the block scale value for a multileader style.")]
        HRESULT BlockScale([in] double ScaleFactor);
        [id(0x0000001e), propget, helpstring("Specifies or returns whether blocks are rotated for a multileader style.")]
        HRESULT EnableBlockRotation([out, retval] VARIANT_BOOL* enabled);
        [id(0x0000001e), propput, helpstring("Specifies or returns whether blocks are rotated for a multileader style.")]
        HRESULT EnableBlockRotation([in] VARIANT_BOOL enabled);
        [id(0x0000001f), propget, helpstring("Specifies or returns the rotation value for a multileader style.")]
        HRESULT BlockRotation([out, retval] double* Rotation);
        [id(0x0000001f), propput, helpstring("Specifies or returns the rotation value for a multileader style.")]
        HRESULT BlockRotation([in] double Rotation);
        [id(0x00000020), propget, helpstring("Specifies or returns the block connection type of a multileader style.")]
        HRESULT BlockConnectionType([out, retval] AcBlockConnectionType* Type);
        [id(0x00000020), propput, helpstring("Specifies or returns the block connection type of a multileader style.")]
        HRESULT BlockConnectionType([in] AcBlockConnectionType Type);
        [id(0x00000021), propget, helpstring("Specifies or returns the multileader scale of a specified multileader style.")]
        HRESULT ScaleFactor([out, retval] double* scale);
        [id(0x00000021), propput, helpstring("Specifies or returns the multileader scale of a specified multileader style.")]
        HRESULT ScaleFactor([in] double scale);
        [id(0x00000022), propget, helpstring("Returns whether properties were changed for a multileader style.")]
        HRESULT OverwritePropChanged([out, retval] VARIANT_BOOL* changed);
        [id(0x00000023), propget, helpstring("Specifies or returns the annotative status of a multileader style.")]
        HRESULT Annotative([out, retval] VARIANT_BOOL* Annotative);
        [id(0x00000023), propput, helpstring("Specifies or returns the annotative status of a multileader style.")]
        HRESULT Annotative([in] VARIANT_BOOL Annotative);
        [id(0x00000024), propget, helpstring("Specifies or returns the gap size used for breaking leader lines of a multileader style.")]
        HRESULT BreakSize([out, retval] double* size);
        [id(0x00000024), propput, helpstring("Specifies or returns the gap size used for breaking leader lines of a multileader style.")]
        HRESULT BreakSize([in] double size);
        [id(0x00000025), propget, helpstring("Specifies or returns the multiline text text string of a multileader style.")]
        HRESULT TextString([out, retval] BSTR* Text);
        [id(0x00000025), propput, helpstring("Specifies or returns the multiline text text string of a multileader style.")]
        HRESULT TextString([in] BSTR Text);
        [id(0x00000026), propget, helpstring("Specifies or returns the text angle type of a multileader style.")]
        HRESULT TextAngleType([out, retval] AcTextAngleType* Type);
        [id(0x00000026), propput, helpstring("Specifies or returns the text angle type of a multileader style.")]
        HRESULT TextAngleType([in] AcTextAngleType Type);
        [id(0x00000027), propget, helpstring("Specifies or returns the text alignment type of a multileader style.")]
        HRESULT TextAlignmentType([out, retval] AcTextAlignmentType* Type);
        [id(0x00000027), propput, helpstring("Specifies or returns the text alignment type of a multileader style.")]
        HRESULT TextAlignmentType([in] AcTextAlignmentType Type);
    };

    
    
        
        
    

    
    
        
        
    

    
    
        
        
        
        
        
        
        
    

    
    
        
        
        
    

    
    
        
        
        
    

    [
      uuid(7A0FEFD2-B3B3-4A0D-A20A-54F5D2A854F1),
      helpstring("AcadTolerance Class")
    ]
    coclass AcadTolerance {
        [default] interface IAcadTolerance;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(92D54613-08F2-421D-A4B8-FEAC07F4AA63),
      helpstring("A single occurance of an inserted block.")
    ]
    coclass AcadBlockReference {
        [default] interface IAcadBlockReference;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(1D14E0EC-4958-4F62-9388-FF8F9B6E9541),
      helpstring("An angular dimension measured using three points.")
    ]
    coclass AcadDim3PointAngular {
        [default] interface IAcadDim3PointAngular;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(5935B932-DEE0-4319-BCA4-D0628F3CA01C),
      helpstring("A linear dimension measuring the distance between two points.")
    ]
    coclass AcadDimAligned {
        [default] interface IAcadDimAligned;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(1FA2E09C-96EC-481E-A4E4-13899FB99BC5),
      helpstring("Lines, arcs, and circles defined in an SHX file.")
    ]
    coclass AcadShape {
        [default] interface IAcadShape;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(08D45C32-6C48-4FCF-B516-8A0553374B04),
      helpstring("A two-dimensional solid polygon.")
    ]
    coclass AcadSolid {
        [default] interface IAcadSolid;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(564BF091-3360-4870-B83E-02065AEEDAE8),
      helpstring("A free-form curve created along at least three points.")
    ]
    coclass AcadSpline {
        [default] interface IOdaSpline;
        interface IAcadSpline;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(4F5855C3-83D4-4BE5-A0D3-B549452C6DFD),
      helpstring("ODA extended spline interface, for roundtrip purposes"),
      dual,
      oleautomation
    ]
    interface IOdaSpline : IAcadSpline {
        [id(0x0000001c), helpstring("Set all nurbs data to the spline")]
        HRESULT SetNurbsData(
                        [in] int Degree, 
                        [in] VARIANT ControlPoints, 
                        [in] VARIANT Knots, 
                        [in] VARIANT Weights, 
                        [in] double controlPtTolerance, 
                        [in] double knotTolerance, 
                        [in] VARIANT_BOOL periodic);
    };

    [
      uuid(69EE57CF-B3A1-45C0-A4CD-5F0323D8023A),
      helpstring("An angular dimension measuring the angle of an arc or the angle between two lines.")
    ]
    coclass AcadDimAngular {
        [default] interface IAcadDimAngular;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(86C06CBF-1569-4D10-9DC2-71E4D8F6CA14),
      helpstring("A dimension measuring the diameter of a circle or arc.")
    ]
    coclass AcadDimDiametric {
        [default] interface IAcadDimDiametric;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(77462BCC-2AEB-49EA-AE72-A8E490BBC8D7),
      helpstring("An ordinate dimension measuring the distance along the x- or y-axis from an origin to a selected point.")
    ]
    coclass AcadDimOrdinate {
        [default] interface IAcadDimOrdinate;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(CCEE8D45-36F4-4A98-9271-7F522F3A0952),
      helpstring("A dimension measuring the radius of a circle or arc.")
    ]
    coclass AcadDimRadial {
        [default] interface IAcadDimRadial;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(10CEAC15-5D9C-498B-93D7-567922D7A54C),
      helpstring("A jogged dimension measuring the radius of a large circle or arc.")
    ]
    coclass AcadDimRadialLarge {
        [default] interface IAcadDimRadialLarge;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(C3127D43-DBF7-4089-A7CA-DA6038F59E2E),
      helpstring("A dimension measuring the length of an arc.")
    ]
    coclass AcadDimArcLength {
        [default] interface IAcadDimArcLength;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(E293C0E5-2221-42EA-8636-09C37FC74F67),
      helpstring("AcadXRecord Class")
    ]
    coclass AcadXRecord {
        [default] interface IAcadXRecord;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(C08968B6-D5ED-40C6-86B2-51D61709712B),
      helpstring("AcadXline Class")
    ]
    coclass AcadXline {
        [default] interface IAcadXline;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(189003E9-DD3E-491A-8B9F-236764A4CE4A),
      helpstring("A line starting at a base point and contining infinitely.")
    ]
    coclass AcadRay {
        [default] interface IAcadRay;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(91FF2165-D891-460C-BF08-D3CD45EB043A),
      helpstring("Settings that determine the appearance of a dimension.")
    ]
    coclass AcadDimStyle {
        [default] interface IAcadDimStyle;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(E0997E8F-C8B6-4F87-8080-82D1A797D613),
      helpstring("Drawing file that is attached to and inserted in the current drawing.")
    ]
    coclass AcadExternalReference {
        [default] interface IAcadExternalReference;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(0F00C26F-1750-46E8-81D5-0A03BFA5911C),
      helpstring("Multiple copies of a block reference as a single object.")
    ]
    coclass AcadMInsertBlock {
        [default] interface IAcadMInsertBlock;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(D140C428-1E61-4F09-A049-21C61AB1FB14),
      helpstring("Collection of all dimension styles in a document.")
    ]
    coclass AcadDimStyles {
        [default] interface IAcadDimStyles;
    };

    [
      uuid(82968D2A-B65B-4DB0-ABAA-511EA484EA20),
      helpstring("AcadUCS Class")
    ]
    coclass AcadUCS {
        [default] interface IAcadUCS;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(6806C569-B89C-43D5-824B-5AC13E9801F8),
      helpstring("AcadUCSs Class")
    ]
    coclass AcadUCSs {
        [default] interface IAcadUCSs;
    };

    [
      uuid(02780901-355E-4AF1-BC50-D71E7F180C00),
      helpstring("AcadView Class")
    ]
    coclass AcadView {
        [default] interface IAcadView;
    };

    [
      uuid(BC62352A-2E88-4091-8F4E-D57312A70654),
      helpstring("AcadViews Class")
    ]
    coclass AcadViews {
        [default] interface IAcadViews;
    };

    [
      uuid(57450CAB-90DF-476B-89E0-B4599E1EDC70),
      helpstring("A named set of objects that can be operated on as a single unit.")
    ]
    coclass AcadGroup {
        [default] interface IAcadGroup;
    };

    [
      uuid(31CEC13D-6489-4D7D-8EBF-8CB38DCF300C),
      helpstring("Collection of all groups in a document.")
    ]
    coclass AcadGroups {
        [default] interface IAcadGroups;
    };

    [
      uuid(05165B09-53DB-406D-97EE-B81279366D95),
      helpstring("Collection of all dictionaries in a document.")
    ]
    coclass AcadDictionaries {
        [default] interface IAcadDictionaries;
    };

    [
      uuid(B651FEC6-B7B7-49FB-92AD-AA010A30AC7D),
      helpstring("A repository for storing and retrieving objects that have associated string keywords.")
    ]
    coclass AcadDictionary {
        [default] interface IAcadDictionary;
    };

    [
      uuid(EA564586-9E95-4CD4-85D8-09A09156802A),
      helpstring("Collection of all layouts in a document.")
    ]
    coclass AcadLayouts {
        [default] interface IAcadLayouts;
    };

    [
      uuid(7F10D1EB-883F-4D20-B189-38858D70C072),
      helpstring("A set of paper-related settings and print settings.")
    ]
    coclass AcadLayout {
        [default] interface IAcadLayout;
    };

    [
      uuid(DE7F243A-83EB-45D3-BC30-38C58EA18EB5),
      helpstring("AcadTextStyle Class")
    ]
    coclass AcadTextStyle {
        [default] interface IAcadTextStyle;
    };

    [
      uuid(166A93A3-9F5F-4B47-BA2D-98FCCBE053AF),
      helpstring("AcadTextStyles Class")
    ]
    coclass AcadTextStyles {
        [default] interface IAcadTextStyles;
    };

    [
      uuid(A725D554-6FD7-49D2-AA49-F5298197737F),
      helpstring("A fill made up of a pattern of lines.")
    ]
    coclass AcadHatch {
        [default] interface IAcadHatch2;
        interface IAcadHatch;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(D22FD7CC-39DD-468C-B7DE-FCCE1BD48B84),
      helpstring("TeighaX Interface of an area fill consisting of a pattern of lines"),
      dual,
      oleautomation
    ]
    interface IAcadHatch2 : IAcadHatch {
        [id(0x0000001b), propget, helpstring("Returns the hatch background color.")]
        HRESULT BackgroundColor([out, retval] IAcadAcCmColor** pColor);
        [id(0x0000001b), propput, helpstring("Returns the hatch background color.")]
        HRESULT BackgroundColor([in] IAcadAcCmColor* pColor);
    };

    [
      uuid(9C6247A1-27DD-4158-B6D0-85DADD2B1D4B),
      helpstring("Multiple lines drawn parallel together as a single line.")
    ]
    coclass AcadMLine {
        [default] interface IAcadMLine;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(B9696267-B160-41DC-9E2B-61C0D07489AA),
      helpstring("A three-dimensional mesh consisting of vertices that form a 3D matrix of quadrangular figures.")
    ]
    coclass AcadPolygonMesh {
        [default] interface IAcadPolygonMesh;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(6D5707BA-CDC8-47DD-BF19-BA7A4377B69D),
      helpstring("A three-dimensional mesh consisting of a set of vertices and faces.")
    ]
    coclass AcadPolyfaceMesh {
        [default] interface IOdaPolyfaceMesh;
        interface IAcadPolyfaceMesh;
    };

    [
      uuid(E45FF5FB-D2D1-47AE-8C75-D808FE8E7F07),
      helpstring("Set of print settings defined for a specific print device and media.")
    ]
    coclass AcadPlotConfiguration {
        [default] interface IAcadPlotConfiguration;
    };

    [
      uuid(8A19FAB0-185D-403C-8E45-F89CFB0BB26E),
      helpstring("Collection of all plot configurations in a document.")
    ]
    coclass AcadPlotConfigurations {
        [default] interface IAcadPlotConfigurations;
    };

    [
      uuid(19A4ED27-C068-455B-91DF-CB29DD6AC131),
      helpstring("OdaRasterImage Class")
    ]
    coclass OdaRasterImage {
        [default] interface IOdaRasterImage;
    };

    [
      odl,
      uuid(FEC01000-8D91-45B4-9D7D-F42A811CC1DE),
      helpstring("TeighaX Interface for an additional Raster Image funtionality"),
      dual,
      oleautomation
    ]
    interface IOdaRasterImage : IAcadRasterImage {
        [id(0x00000012), propget, helpstring("Returns true if this Raster Image is currently loaded")]
        HRESULT Loaded([out, retval] VARIANT_BOOL* bResult);
    };

    [
      uuid(87418158-8153-4F9E-9FE0-4F3F2484CF17),
      helpstring("AcadRasterImage Class")
    ]
    coclass AcadRasterImage {
        [default] interface IAcadRasterImage;
    };

    [
      uuid(C6FB49B6-94A3-4106-9C25-4070C22EEB1E),
      helpstring("A closed planar boundary of lines, circles, arcs, elliptical arcs, and splines.")
    ]
    coclass AcadRegion {
        [default] interface IAcadRegion;
    };

    [
      uuid(FF2598B3-FB2C-4A74-A9A8-388B0ED0F0B0),
      helpstring("Name of an external application that has been added to the document.")
    ]
    coclass AcadRegisteredApplication {
        [default] interface IAcadRegisteredApplication;
    };

    [
      uuid(A8591AC8-CD28-4FB3-A6BB-A10C2B3983EA),
      helpstring("Collection of all registered applications.")
    ]
    coclass AcadRegisteredApplications {
        [default] interface IAcadRegisteredApplications;
    };

    [
      uuid(E15090F5-567D-4443-BE6F-2CE8210CB7B5),
      helpstring("A window that displays all or a portion of a drawing's paperspace.")
    ]
    coclass AcadPViewport {
        [default] interface IAcadPViewport;
    };

    [
      uuid(888A126A-7ED7-4E7E-BB1A-2F5E918F4E84),
      helpstring("The settings of a document that are saved in a drawing (not the registry)."),
      noncreatable
    ]
    coclass AcadDatabasePreferences {
        [default] interface IAcadDatabasePreferences;
    };

    [
      uuid(B7018E09-79D3-4FDD-8294-AC7D65F75190),
      helpstring("A link to an external file or location."),
      noncreatable
    ]
    coclass AcadHyperlink {
        [default] interface IAcadHyperlink;
    };

    [
      uuid(5E4BEC8E-0A78-4AD9-942D-2A7D6C647D7C),
      helpstring("Collection of all hyperlinks in a document."),
      noncreatable
    ]
    coclass AcadHyperlinks {
        [default] interface IAcadHyperlinks;
    };

    [
      uuid(3181648E-5003-4184-87E7-745DD2C3FF99),
      helpstring("A sheet designed as an overlay.")
    ]
    coclass AcadLayer {
        [default] interface IAcadLayer;
    };

    [
      uuid(6414EFFB-B18C-4967-B508-CABE024AAC80),
      helpstring("Collection of all layers in a document.")
    ]
    coclass AcadLayers {
        [default] interface IAcadLayers;
    };

    [
      uuid(67D9DD2C-487E-43ED-B0F9-853AC5B16FE8),
      helpstring("One or more line or arc segments that form a single object.")
    ]
    coclass AcadLWPolyline {
        [default] interface IAcadLWPolyline;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(75620697-D2AF-403D-A10A-1367CC651926),
      helpstring("Collection of all paper space entities in a document.")
    ]
    coclass AcadPaperSpace {
        [default] interface IAcadPaperSpace;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(471EAB91-C3AA-45CB-A583-4D320C5B6144),
      helpstring("Collection of all model space entities in a document.")
    ]
    coclass AcadModelSpace {
        [default] interface IAcadModelSpace;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(91BFF691-A6E4-4A1B-AC09-2DE5F1C5B190),
      helpstring("Text that links to a block.")
    ]
    coclass AcadAttributeReference {
        [default] interface IAcadAttributeReference;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(2EB418BF-AF28-4505-A4B8-B6A2502ABC60),
      helpstring("TeighaX Interface of an object containing text that links to a block"),
      dual,
      oleautomation
    ]
    interface IAcadAttributeReference : IAcadEntity {
        [id(0x00000001), propget, helpstring("Specifies or returns the height of an attribute reference.")]
        HRESULT Height([out, retval] double* Height);
        [id(0x00000001), propput, helpstring("Specifies or returns the height of an attribute reference.")]
        HRESULT Height([in] double Height);
        [id(0x00000002), propget, hidden, helpstring("Specifies or returns the horizontal alignment of an attribute reference.")]
        HRESULT HorizontalAlignment([out, retval] AcHorizontalAlignment* horizAlign);
        [id(0x00000002), propput, hidden, helpstring("Specifies or returns the horizontal alignment of an attribute reference.")]
        HRESULT HorizontalAlignment([in] AcHorizontalAlignment horizAlign);
        [id(0x00000003), propget, helpstring("Specifies or returns the insertion point of attribute reference text.")]
        HRESULT InsertionPoint([out, retval] VARIANT* insPoint);
        [id(0x00000003), propput, helpstring("Specifies or returns the insertion point of attribute reference text.")]
        HRESULT InsertionPoint([in] VARIANT insPoint);
        [id(0x00000004), propget, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([out, retval] VARIANT* Normal);
        [id(0x00000004), propput, helpstring("Specifies or returns the x, y, and z coordinates of the normal direction vector.")]
        HRESULT Normal([in] VARIANT Normal);
        [id(0x00000005), propget, helpstring("Specifies or returns the oblique angle of an attribute reference.")]
        HRESULT ObliqueAngle([out, retval] ACAD_ANGLE* obliAngle);
        [id(0x00000005), propput, helpstring("Specifies or returns the oblique angle of an attribute reference.")]
        HRESULT ObliqueAngle([in] ACAD_ANGLE obliAngle);
        [id(0x00000006), propget, helpstring("Specifies or returns the rotation angle of an attribute reference.")]
        HRESULT Rotation([out, retval] ACAD_ANGLE* rotAngle);
        [id(0x00000006), propput, helpstring("Specifies or returns the rotation angle of an attribute reference.")]
        HRESULT Rotation([in] ACAD_ANGLE rotAngle);
        [id(0x00000007), propget, helpstring("Specifies or returns the scale factor of an attribute reference.")]
        HRESULT ScaleFactor([out, retval] ACAD_NOUNITS* scalFactor);
        [id(0x00000007), propput, helpstring("Specifies or returns the scale factor of an attribute reference.")]
        HRESULT ScaleFactor([in] ACAD_NOUNITS scalFactor);
        [id(0x00000008), propget, helpstring("Specifies or returns the style name of an attribute reference.")]
        HRESULT StyleName([out, retval] BSTR* Name);
        [id(0x00000008), propput, helpstring("Specifies or returns the style name of an attribute reference.")]
        HRESULT StyleName([in] BSTR Name);
        [id(0x00000009), propget, helpstring("Specifies or returns the tag of an attribute reference.")]
        HRESULT TagString([out, retval] BSTR* bstrTag);
        [id(0x00000009), propput, helpstring("Specifies or returns the tag of an attribute reference.")]
        HRESULT TagString([in] BSTR bstrTag);
        [id(0x0000000a), propget, helpstring("Specifies or returns the x, y, z alignment point of an attribute reference.")]
        HRESULT TextAlignmentPoint([out, retval] VARIANT* alignPoint);
        [id(0x0000000a), propput, helpstring("Specifies or returns the x, y, z alignment point of an attribute reference.")]
        HRESULT TextAlignmentPoint([in] VARIANT alignPoint);
        [id(0x0000000b), propget, helpstring("Specifies or returns the text generation flag of an attribute reference.")]
        HRESULT TextGenerationFlag([out, retval] long* textGenFlag);
        [id(0x0000000b), propput, helpstring("Specifies or returns the text generation flag of an attribute reference.")]
        HRESULT TextGenerationFlag([in] long textGenFlag);
        [id(0x0000000c), propget, helpstring("Specifies or returns the text of an attribute reference.")]
        HRESULT TextString([out, retval] BSTR* bstrText);
        [id(0x0000000c), propput, helpstring("Specifies or returns the text of an attribute reference.")]
        HRESULT TextString([in] BSTR bstrText);
        [id(0x0000000d), propget, helpstring("Specifies or returns the thickness (z-direction value) of an attribute reference.")]
        HRESULT Thickness([out, retval] double* Thickness);
        [id(0x0000000d), propput, helpstring("Specifies or returns the thickness (z-direction value) of an attribute reference.")]
        HRESULT Thickness([in] double Thickness);
        [id(0x0000000e), propget, hidden, helpstring("Specifies or returns the vertical alignment of an attribute reference.")]
        HRESULT VerticalAlignment([out, retval] AcVerticalAlignment* vertiAlign);
        [id(0x0000000e), propput, hidden, helpstring("Specifies or returns the vertical alignment of an attribute reference.")]
        HRESULT VerticalAlignment([in] AcVerticalAlignment vertiAlign);
        [id(0x0000000f), propget, helpstring("Specifies or returns the field length of an attribute reference.")]
        HRESULT FieldLength([out, retval] long* fieldLen);
        [id(0x0000000f), propput, helpstring("Specifies or returns the field length of an attribute reference.")]
        HRESULT FieldLength([in] long fieldLen);
        [id(0x00000010), propget, helpstring("Specifies or returns the horizontal and vertical alignment of an attribute reference.")]
        HRESULT Alignment([out, retval] AcAlignment* align);
        [id(0x00000010), propput, helpstring("Specifies or returns the horizontal and vertical alignment of an attribute reference.")]
        HRESULT Alignment([in] AcAlignment align);
        [id(0x00000011), propget, helpstring("Specifies or returns whether the text of an attribute reference is upside down.")]
        HRESULT UpsideDown([out, retval] VARIANT_BOOL* bUpsideDown);
        [id(0x00000011), propput, helpstring("Specifies or returns whether the text of an attribute reference is upside down.")]
        HRESULT UpsideDown([in] VARIANT_BOOL bUpsideDown);
        [id(0x00000012), propget, helpstring("Specifies or returns whether the text of an attribute reference is backward.")]
        HRESULT Backward([out, retval] VARIANT_BOOL* bBackward);
        [id(0x00000012), propput, helpstring("Specifies or returns whether the text of an attribute reference is backward.")]
        HRESULT Backward([in] VARIANT_BOOL bBackward);
        [id(0x00000013), propget, helpstring("Specifies or returns the invisible mode of an attribute reference.")]
        HRESULT Invisible([out, retval] VARIANT_BOOL* bInvisible);
        [id(0x00000013), propput, helpstring("Specifies or returns the invisible mode of an attribute reference.")]
        HRESULT Invisible([in] VARIANT_BOOL bInvisible);
        [id(0x00000014), propget, helpstring("Returns the constant mode of an attribute reference.")]
        HRESULT Constant([out, retval] VARIANT_BOOL* bConstant);
        [id(0x00000019), propget, helpstring("Specifies whether the attribute may be moved relative to the geometry in the block")]
        HRESULT LockPosition([out, retval] VARIANT_BOOL* bLockPosition);
        [id(0x0000001a), propget, helpstring("Determines whether if the attribute reference is multiline")]
        HRESULT MTextAttribute([out, retval] VARIANT_BOOL* bMTextAttribute);
        [id(0x0000001a), propput, helpstring("Determines whether if the attribute reference is multiline")]
        HRESULT MTextAttribute([in] VARIANT_BOOL bMTextAttribute);
        [id(0x0000001b), propget, helpstring("Gets the multiline attribute reference content")]
        HRESULT MTextAttributeContent([out, retval] BSTR* content);
        [id(0x0000001b), propput, helpstring("Gets the multiline attribute reference content")]
        HRESULT MTextAttributeContent([in] BSTR content);
        [id(0x0000001d), helpstring("Updates attribute reference from the multiline mtext and vice versa")]
        HRESULT UpdateMTextAttribute();
        [id(0x0000001e), propget, helpstring("Gets the width of text boundary of the Mtext")]
        HRESULT MTextBoundaryWidth([out, retval] double* boundaryWidth);
        [id(0x0000001e), propput, helpstring("Gets the width of text boundary of the Mtext")]
        HRESULT MTextBoundaryWidth(double boundaryWidth);
        [id(0x0000001f), propget, helpstring("Gets the drawing direction of the Mtext")]
        HRESULT MTextDrawingDirection([out, retval] AcDrawingDirection* drawDir);
        [id(0x0000001f), propput, helpstring("Gets the drawing direction of the Mtext")]
        HRESULT MTextDrawingDirection([in] AcDrawingDirection drawDir);
    };

    [
      uuid(93F049A2-8BD4-496A-A820-3CDD9B18098C),
      helpstring("True color.")
    ]
    coclass AcadAcCmColor {
        [default] interface IAcadAcCmColor;
    };

    [
      uuid(E353BA36-D835-4E58-8C64-BED4D1CC1DA8),
      helpstring("Container used for summary information about a drawing."),
      noncreatable
    ]
    coclass AcadSummaryInfo {
        [default] interface IAcadSummaryInfo;
    };

    [
      uuid(F475D696-7D58-416C-A32F-7AD3CCED30F7),
      helpstring("Collection of references to the files that the current drawing is dependent on."),
      noncreatable
    ]
    coclass AcadFileDependencies {
        [default] interface IAcadFileDependencies;
    };

    [
      uuid(8A4E341F-4C83-4F72-B7E3-779919A3FA43),
      helpstring("Details about a file listed in the AcadFileDependencies object."),
      noncreatable
    ]
    coclass AcadFileDependency {
        [default] interface IAcadFileDependency;
    };

    [
      uuid(9D565211-1278-4427-86C9-66D89B2134C0),
      helpstring("A chart with rows and columns.")
    ]
    coclass AcadTable {
        [default] interface IAcadTable;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(EFB29474-73C9-4E92-97B6-B324FCD7DB89),
      helpstring("OdaOle Class")
    ]
    coclass OdaOle {
        [default] interface IOdaOle;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(A5B64E33-96A3-45D1-AA50-8ACC688D69D3),
      helpstring("Settings that determine the appearance of a table.")
    ]
    coclass AcadTableStyle {
        [default] interface IAcadTableStyle;
    };

    [
      odl,
      uuid(A352E538-BD24-4047-B71F-EC2926D3D0B6),
      helpstring("TeighaX Interface for adding, modifing and deleting table styles"),
      dual,
      oleautomation
    ]
    interface IAcadTableStyle : IAcadObject {
        [id(0x00000001), propget, helpstring("Not implemented. Specifies or returns the name of a table style.")]
        HRESULT Name([out, retval] BSTR* bstrValue);
        [id(0x00000001), propput, helpstring("Not implemented. Specifies or returns the name of a table style.")]
        HRESULT Name([in] BSTR bstrValue);
        [id(0x00000002), propget, helpstring("Specifies or returns the description of a tables tyle.")]
        HRESULT Description([out, retval] BSTR* bstr);
        [id(0x00000002), propput, helpstring("Specifies or returns the description of a tables tyle.")]
        HRESULT Description([in] BSTR bstr);
        [id(0x00000003), propget, helpstring("Specifies or returns the operation bit set of a table style.")]
        HRESULT BitFlags([out, retval] long* bitFlag);
        [id(0x00000003), propput, helpstring("Specifies or returns the operation bit set of a table style.")]
        HRESULT BitFlags([in] long bitFlag);
        [id(0x00000004), propget, helpstring("Specifies or returns the flow direction of a table style.")]
        HRESULT FlowDirection([out, retval] AcTableDirection* pFlow);
        [id(0x00000004), propput, helpstring("Specifies or returns the flow direction of a table style.")]
        HRESULT FlowDirection([in] AcTableDirection pFlow);
        [id(0x00000005), propget, helpstring("Specifies or returns the horizontal cell margin of a table style.")]
        HRESULT HorzCellMargin([out, retval] double* dHorzCellMargin);
        [id(0x00000005), propput, helpstring("Specifies or returns the horizontal cell margin of a table style.")]
        HRESULT HorzCellMargin([in] double dHorzCellMargin);
        [id(0x00000006), propget, helpstring("Specifies or returns the vertical cell margin of a table style.")]
        HRESULT VertCellMargin([out, retval] double* dVertCellMargin);
        [id(0x00000006), propput, helpstring("Specifies or returns the vertical cell margin of a table style.")]
        HRESULT VertCellMargin([in] double dVertCellMargin);
        [id(0x00000007), propget, helpstring("Specifies or returns whether the table title is visible for a table style.")]
        HRESULT TitleSuppressed([out, retval] VARIANT_BOOL* bValue);
        [id(0x00000007), propput, helpstring("Specifies or returns whether the table title is visible for a table style.")]
        HRESULT TitleSuppressed([in] VARIANT_BOOL bValue);
        [id(0x00000008), propget, helpstring("Specifies or returns whether the header titles are visible for a table style.")]
        HRESULT HeaderSuppressed([out, retval] VARIANT_BOOL* bValue);
        [id(0x00000008), propput, helpstring("Specifies or returns whether the header titles are visible for a table style.")]
        HRESULT HeaderSuppressed([in] VARIANT_BOOL bValue);
        [id(0x00000009), helpstring("Returns the text style name of a row type.")]
        HRESULT GetTextStyle(
                        [in] AcRowType rowType, 
                        [out, retval] BSTR* bstrName);
        [id(0x0000000a), helpstring("Specifies the text style name of row types.")]
        HRESULT SetTextStyle(
                        [in] int rowTypes, 
                        [in] BSTR bstrName);
        [id(0x0000000b), helpstring("Returns the text height of a row type.")]
        HRESULT GetTextHeight(
                        [in] AcRowType rowType, 
                        [out, retval] double* pTextHeight);
        [id(0x0000000c), helpstring("Specifies the text height of row types.")]
        HRESULT SetTextHeight(
                        [in] int rowTypes, 
                        [in] double TextHeight);
        [id(0x0000000d), helpstring("Returns the cell alignment of a row type.")]
        HRESULT GetAlignment(
                        [in] AcRowType rowType, 
                        [out, retval] AcCellAlignment* pCellAlignment);
        [id(0x0000000e), helpstring("Specifies the cell alignment of row types.")]
        HRESULT SetAlignment(
                        [in] int rowTypes, 
                        [in] AcCellAlignment cellAlignment);
        [id(0x0000000f), helpstring("Returns the color value of a row type.")]
        HRESULT GetColor(
                        [in] AcRowType rowType, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x00000010), helpstring("Specifies the color value of row types.")]
        HRESULT SetColor(
                        [in] int rowTypes, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000011), helpstring("Returns the background color value of a row type.")]
        HRESULT GetBackgroundColor(
                        [in] AcRowType rowType, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x00000012), helpstring("Specifies the background color value of row types.")]
        HRESULT SetBackgroundColor(
                        [in] int rowTypes, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000013), helpstring("Returns whether the background color is set to None for a row type.")]
        HRESULT GetBackgroundColorNone(
                        [in] AcRowType rowType, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x00000014), helpstring("Specifies whether the background color is set to None for row types.")]
        HRESULT SetBackgroundColorNone(
                        [in] int rowTypes, 
                        [in] VARIANT_BOOL bValue);
        [id(0x00000015), helpstring("Returns the grid lineweight value for a grid linetype and row type.")]
        HRESULT GetGridLineWeight(
                        [in] AcGridLineType gridLineType, 
                        [in] AcRowType rowType, 
                        [out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000016), helpstring("Specifies the grid lineweight value for grid linetypes and row types.")]
        HRESULT SetGridLineWeight(
                        [in] int gridLineTypes, 
                        [in] int rowTypes, 
                        [in] ACAD_LWEIGHT Lineweight);
        [id(0x00000017), helpstring("Returns the grid color value for a grid linetype and row type.")]
        HRESULT GetGridColor(
                        [in] AcGridLineType gridLineType, 
                        [in] AcRowType rowType, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x00000018), helpstring("Specifies the grid color value for grid linetypes and row types.")]
        HRESULT SetGridColor(
                        [in] int gridLineTypes, 
                        [in] int rowTypes, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x00000019), helpstring("Returns whether the grid is visible for a grid linetype and row type.")]
        HRESULT GetGridVisibility(
                        [in] AcGridLineType gridLineType, 
                        [in] AcRowType rowType, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x0000001a), helpstring("Specifies whether the grid is visible for grid linetypes and row types.")]
        HRESULT SetGridVisibility(
                        [in] int gridLineTypes, 
                        [in] int rowTypes, 
                        [in] VARIANT_BOOL bValue);
        [id(0x0000001b), helpstring("Not implemented. Returns the data type and unit type of a row type.")]
        HRESULT GetDataType(
                        [in] AcRowType rowType, 
                        [out] AcValueDataType* pDataType, 
                        [out] AcValueUnitType* pUnitType);
        [id(0x0000001c), helpstring("Not implemented. Specifies the data type and unit type of a row type.")]
        HRESULT SetDataType(
                        [in] int rowTypes, 
                        [in] AcValueDataType nDataType, 
                        [in] AcValueUnitType nUnitType);
        [id(0x0000001d), helpstring("Not implemented. Returns the format of a row type.")]
        HRESULT GetFormat(
                        [in] AcRowType rowType, 
                        [out, retval] BSTR* pVal);
        [id(0x0000001e), helpstring("Not implemented. Specifies the format of a row type.")]
        HRESULT SetFormat(
                        [in] int rowTypes, 
                        [in] BSTR val);
        [id(0x0000001f)]
        HRESULT CreateCellStyle([in] BSTR bstrCellStyle);
        [id(0x00000020)]
        HRESULT CreateCellStyleFromStyle(
                        [in] BSTR bstrCellStyle, 
                        [in] BSTR bstrSourceCellStyle);
        [id(0x00000021)]
        HRESULT RenameCellStyle(
                        [in] BSTR bstrOldName, 
                        [in] BSTR bstrNewName);
        [id(0x00000022)]
        HRESULT DeleteCellStyle([in] BSTR bstrCellStyle);
        [id(0x00000023)]
        HRESULT GetUniqueCellStyleName(
                        [in] BSTR pszBaseName, 
                        [out, retval] BSTR* pbstrUniqueName);
        [id(0x00000024)]
        HRESULT GetIsCellStyleInUse(
                        [in] BSTR pszCellStyle, 
                        [out, retval] VARIANT_BOOL* pVal);
        [id(0x00000025), propget]
        HRESULT NumCellStyles([out, retval] long* NumCellStyles);
        [id(0x00000026)]
        HRESULT GetCellStyles([in] VARIANT* cellStylesArray);
        [id(0x00000027), helpstring("Returns the text style name for the specified cellStyle.")]
        HRESULT GetTextStyleId(
                        [in] BSTR bstrCellStyle, 
                        [out, retval] LONG_PTR* pVal);
        [id(0x00000028), helpstring("Sets the text style name for the specified cellStyle.")]
        HRESULT SetTextStyleId(
                        [in] BSTR bstrCellStyle, 
                        [in] LONG_PTR val);
        [id(0x00000029), helpstring("Returns the text height for the specified cellStyle.")]
        HRESULT GetTextHeight2(
                        [in] BSTR bstrCellStyle, 
                        [out, retval] double* pHeight);
        [id(0x0000002a), helpstring("Sets the text height for the specified cellStyle.")]
        HRESULT SetTextHeight2(
                        [in] BSTR bstrCellStyle, 
                        [in] double Height);
        [id(0x0000002b), helpstring("Returns the cell alignment for the specified cellStyle.")]
        HRESULT GetAlignment2(
                        [in] BSTR bstrCellStyle, 
                        [out, retval] AcCellAlignment* pCellAlignment);
        [id(0x0000002c), helpstring("Sets the cell alignment for the specified cellStyle.")]
        HRESULT SetAlignment2(
                        [in] BSTR bstrCellStyle, 
                        [in] AcCellAlignment cellAlignment);
        [id(0x0000002d), helpstring("Returns the true color value for the specified cellStyle.")]
        HRESULT GetColor2(
                        [in] BSTR bstrCellStyle, 
                        [out, retval] IAcadAcCmColor** color);
        [id(0x0000002e), helpstring("Sets the true color value for the specified cellStyle.")]
        HRESULT SetColor2(
                        [in] BSTR bstrCellStyle, 
                        [in] IAcadAcCmColor* color);
        [id(0x0000002f), helpstring("Returns the background true color value for the specified cellStyle.")]
        HRESULT GetBackgroundColor2(
                        [in] BSTR bstrCellStyle, 
                        [out, retval] IAcadAcCmColor** color);
        [id(0x00000030), helpstring("Sets the background true color value for the specified cellStyle.")]
        HRESULT SetBackgroundColor2(
                        [in] BSTR bstrCellStyle, 
                        [in] IAcadAcCmColor* color);
        [id(0x00000033), helpstring("Returns the data type and unit type for the specifed cellStyle.")]
        HRESULT GetDataType2(
                        [in] BSTR bstrCellStyle, 
                        [out] AcValueDataType* pDataType, 
                        [out] AcValueUnitType* pUnitType);
        [id(0x00000034), helpstring("Sets the data type and unit type for the specifed cellStyle.")]
        HRESULT SetDataType2(
                        [in] BSTR bstrCellStyle, 
                        [in] AcValueDataType nDataType, 
                        [in] AcValueUnitType nUnitType);
        [id(0x00000035), helpstring("Returns the format for the specifed cellStyle.")]
        HRESULT GetFormat2(
                        [in] BSTR bstrCellStyle, 
                        [out] BSTR* pbstrFormat);
        [id(0x00000036), helpstring("Sets the format for the specifed cellStyle.")]
        HRESULT SetFormat2(
                        [in] BSTR bstrCellStyle, 
                        [in] BSTR bstrFormat);
        [id(0x6003003c)]
        HRESULT GetCellClass(
                        [in] BSTR bstrCellStyle, 
                        [out, retval] int* cellClass);
        [id(0x6003003d)]
        HRESULT SetCellClass(
                        [in] BSTR bstrCellStyle, 
                        [in] int cellClass);
        [id(0x6003003e)]
        HRESULT GetRotation(
                        [in] BSTR bstrCellStyle, 
                        [out, retval] double* Rotation);
        [id(0x6003003f)]
        HRESULT SetRotation(
                        [in] BSTR bstrCellStyle, 
                        [in] double Rotation);
        [id(0x60030040)]
        HRESULT GetIsMergeAllEnabled(
                        [in] BSTR bstrCellStyle, 
                        [out, retval] VARIANT_BOOL* bEnable);
        [id(0x60030041)]
        HRESULT EnableMergeAll(
                        [in] BSTR bstrCellStyle, 
                        [in] VARIANT_BOOL bEnable);
        [id(0x00000037), helpstring("Gets the gridLineWeight value for the specified gridLineType(s) and cellStyle.")]
        HRESULT GetGridLineWeight2(
                        [in] BSTR bstrCellStyle, 
                        [in] AcGridLineType gridLineType, 
                        [out, retval] ACAD_LWEIGHT* Lineweight);
        [id(0x00000038), helpstring("Sets the gridLineWeight value for the specified gridLineType(s) and cellStyle.")]
        HRESULT SetGridLineWeight2(
                        [in] BSTR bstrCellStyle, 
                        [in] AcGridLineType gridLineTypes, 
                        [in] ACAD_LWEIGHT Lineweight);
        [id(0x00000039), helpstring("Returns the gridColor value for the specified gridLineType and cellStyle.")]
        HRESULT GetGridColor2(
                        [in] BSTR bstrCellStyle, 
                        [in] AcGridLineType gridLineType, 
                        [out, retval] IAcadAcCmColor** pColor);
        [id(0x0000003a), helpstring("Sets the gridColor value for the specified gridLineType and cellStyle.")]
        HRESULT SetGridColor2(
                        [in] BSTR bstrCellStyle, 
                        [in] AcGridLineType gridLineTypes, 
                        [in] IAcadAcCmColor* pColor);
        [id(0x0000003b), helpstring("Returns the gridVisibility value for the specified gridLineType and cellStyle.")]
        HRESULT GetGridVisibility2(
                        [in] BSTR bstrCellStyle, 
                        [in] AcGridLineType gridLineType, 
                        [out, retval] VARIANT_BOOL* bValue);
        [id(0x0000003c), helpstring("Sets the gridVisibility value for the specified gridLineType and cellStyle.")]
        HRESULT SetGridVisibility2(
                        [in] BSTR bstrCellStyle, 
                        [in] AcGridLineType gridLineTypes, 
                        [in] VARIANT_BOOL bValue);
        [id(0x0000003d), propget]
        HRESULT TemplateId([out, retval] LONG_PTR* pVal);
        [id(0x0000003d), propput]
        HRESULT TemplateId([in] LONG_PTR pVal);
        [id(0x00000041)]
        HRESULT SetTemplateId(
                        [in] LONG_PTR val, 
                        AcMergeCellStyleOption option);
    };

    
    
        
        
        
        
        
    

    [
      uuid(12A96719-0237-4C8A-9DC3-424C005FBC4F),
      helpstring("Container used to manage draw order.")
    ]
    coclass AcadSortentsTable {
        [default] interface IAcadSortentsTable;
    };

    [
      odl,
      uuid(3CE402AA-E314-4855-A0FD-C8F4D03E7BB3),
      helpstring("TeighaX Interface to contain and manipulate draw order information"),
      dual,
      oleautomation
    ]
    interface IAcadSortentsTable : IAcadObject {
        [id(0x00000001), helpstring("Moves objects to the bottom of the draw order.")]
        HRESULT MoveToBottom([in] VARIANT Objects);
        [id(0x00000002), helpstring("Moves objects to the top of the draw order.")]
        HRESULT MoveToTop([in] VARIANT Objects);
        [id(0x00000003), helpstring("Moves objects below a specified object in the draw order.")]
        HRESULT MoveBelow(
                        [in] VARIANT Objects, 
                        [in] IAcadEntity* Target);
        [id(0x00000004), helpstring("Moves objects above a specified object in the draw order.")]
        HRESULT MoveAbove(
                        [in] VARIANT Objects, 
                        [in] IAcadEntity* Target);
        [id(0x00000005), helpstring("Exchanges draw order position for two specified objects.")]
        HRESULT SwapOrder(
                        [in] IAcadEntity* Object1, 
                        [in] IAcadEntity* Object2);
        [id(0x00000006), helpstring("Returns the block referenced by a sortents table.")]
        HRESULT Block([out, retval] IAcadBlock** pBlock);
        [id(0x00000007), helpstring("Returns all objects in the referenced block, sorted by draw order with the bottom-most object first.")]
        HRESULT GetFullDrawOrder(
                        [out] VARIANT* Objects, 
                        [in] VARIANT_BOOL honorSortentsSysvar);
        [id(0x00000008), helpstring("Returns the specified objects, sorted by draw order with the bottom-most object first.")]
        HRESULT GetRelativeDrawOrder(
                        [in, out] VARIANT* Objects, 
                        [in] VARIANT_BOOL honorSortentsSysvar);
        [id(0x00000009), helpstring("Specifies the relative draw order for the specified objects.")]
        HRESULT SetRelativeDrawOrder([in] VARIANT Objects);
    };

    [
      uuid(E5C6E6E3-4EEA-4384-9B2B-ECC2D12A3384),
      helpstring("OdaMLineStyles Class")
    ]
    coclass OdaMLineStyles {
        [default] interface IOdaMLineStyles;
    };

    [
      uuid(2514F22F-5752-465A-875F-67C7F8E15F38),
      helpstring("OdaMLineStyle Class")
    ]
    coclass OdaMLineStyle {
        [default] interface IOdaMLineStyle;
    };

    [
      uuid(85E7BBD2-35B0-4362-9D5D-6440D9EB2A94),
      helpstring("Container for properties of a block that is a dynamic block."),
      noncreatable
    ]
    coclass AcadDynamicBlockReferenceProperty {
        [default] interface IAcadDynamicBlockReferenceProperty;
    };

    [
      uuid(0CC2E1D6-F7C0-4751-AAEB-1BB5B2A8A41D),
      helpstring("A cross-section of a solid or region."),
      noncreatable
    ]
    coclass AcadSection {
        [default] interface IAcadSection;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(74AC6825-E496-4129-919C-3ECC67AA2B93),
      helpstring("A three-dimensional surface."),
      noncreatable
    ]
    coclass AcadSurface {
        [default] interface IAcadSurface;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(AB6A2C18-D644-408E-8DA3-11BF46D65EF0),
      helpstring("A three-dimensional object created by lofting a two-dimensional object."),
      noncreatable
    ]
    coclass AcadLoftedSurface {
        [default] interface IAcadLoftedSurface;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(21DA4980-E60D-42BB-9CCA-ADDD75B00B81),
      helpstring("A three-dimensional object created by sweeping a two-dimensional profile along a path."),
      noncreatable
    ]
    coclass AcadSweptSurface {
        [default] interface IAcadSweptSurface;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(17237F45-8EF8-4759-912E-707D48B0AD56),
      helpstring("A three-dimensional surface generated by revolving one or more objects or faces about an axis."),
      noncreatable
    ]
    coclass AcadRevolvedSurface {
        [default] interface IAcadRevolvedSurface;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(DB79554B-320D-4B79-B28E-422D116ECE2C),
      helpstring("A three-dimensional surface generated by extruding an object or face along a direction vector."),
      noncreatable
    ]
    coclass AcadExtrudedSurface {
        [default] interface IAcadExtrudedSurface;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(D111E914-3E02-4942-AC9F-0988423D3675),
      helpstring("A planar surface."),
      noncreatable
    ]
    coclass AcadPlaneSurface {
        [default] interface IAcadPlaneSurface;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(6029CB51-033F-4606-8183-CAD07AAAC28C),
      helpstring("A spiral."),
      noncreatable
    ]
    coclass AcadHelix {
        [default] interface IAcadHelix;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(54C2020D-C805-43E0-9991-5430BE5D4511),
      helpstring("Set of geometry settings for sections."),
      noncreatable
    ]
    coclass AcadSectionSettings {
        [default] interface IAcadSectionSettings;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(E4DF2D31-D871-45C0-8729-A164DA2E2CBC),
      helpstring("Set of settings used for each type of section."),
      noncreatable
    ]
    coclass AcadSectionTypeSettings {
        [default] interface IAcadSectionTypeSettings2;
        interface IAcadSectionTypeSettings;
        [default, source] interface IAcadObjectEvents;
    };

    [
      odl,
      uuid(ED55650D-7FCC-44B9-8FE8-0195D38B6CEB),
      helpstring("IAcadSectionTypeSettings2 Interface"),
      dual,
      oleautomation
    ]
    interface IAcadSectionTypeSettings2 : IAcadSectionTypeSettings {
        [id(0x00000032), propget, helpstring("Specifies the visibility of intersection boundary")]
        HRESULT IntersectionBoundaryVisible([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000032), propput, helpstring("Specifies the visibility of intersection boundary")]
        HRESULT IntersectionBoundaryVisible([in] VARIANT_BOOL pVal);
    };

    [
      uuid(77790CD9-C981-4285-B971-B793A7985BF2),
      helpstring("An object used to manage the sections in a drawing."),
      noncreatable
    ]
    coclass AcadSectionManager {
        [default] interface IAcadSectionManager;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(140F2D7A-5AD9-4CA0-9A36-50631AEE73BA),
      helpstring("Set of options that determine how objects reflect and transmit light."),
      noncreatable
    ]
    coclass AcadMaterial {
        [default] interface IAcadMaterial;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(1698C14F-557D-40FE-A8FD-3E5A1F10BF1F),
      helpstring("Collection of all materials in a document."),
      noncreatable
    ]
    coclass AcadMaterials {
        [default] interface IAcadMaterials;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(00CC0FFC-0B43-4386-B507-CA6D2D79EA38),
      helpstring("DWF file represented as an underlay in a drawing."),
      noncreatable
    ]
    coclass AcadDwfUnderlay {
        [default] interface IAcadUnderlay;
        interface IAcadDwfUnderlay;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(9A4FB48A-BB76-4A8C-A793-FBE32048D8C3),
      helpstring("DGN file represented as an underlay in a drawing."),
      noncreatable
    ]
    coclass AcadDgnUnderlay {
        [default] interface IAcadUnderlay;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(F0A11CC7-5838-45F8-97CF-4AFF7CAB748D),
      helpstring("PDF file represented as an underlay in a drawing."),
      noncreatable
    ]
    coclass AcadPdfUnderlay {
        [default] interface IAcadUnderlay;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(3F7DA994-63D3-4820-82F7-CDCD0AECCA52),
      helpstring("Multi-Leader's Leader Line"),
      noncreatable
    ]
    coclass AcadMLeaderLeader {
        [default] interface IAcadMLeaderLeader;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(A712990A-74A2-40B3-BCBB-48830A34B1FF),
      helpstring("AcadSubEntity Class"),
      noncreatable
    ]
    coclass AcadSubEntity {
        [default] interface IAcadSubEntity;
    };

    [
      uuid(B8871276-FA27-4A41-9AF8-6E9649176832),
      helpstring("AcadSubEntSolidFace Class"),
      noncreatable
    ]
    coclass AcadSubEntSolidFace {
        [default] interface IAcadSubEntSolidFace;
    };

    [
      uuid(77F6B600-EE22-4003-8DAD-89B45E850826),
      helpstring("AcadSubEntSolidEdge Class"),
      noncreatable
    ]
    coclass AcadSubEntSolidEdge {
        [default] interface IAcadSubEntSolidEdge;
    };

    [
      uuid(795EA52C-5A54-424A-9B07-C80D7BE4D465),
      helpstring("AcadSubEntSolidVertex Class"),
      noncreatable
    ]
    coclass AcadSubEntSolidVertex {
        [default] interface IAcadSubEntSolidVertex;
    };

    [
      uuid(E798EE3A-739E-49DB-BBA3-7909D14451EF),
      helpstring("AcadWipeout Class")
    ]
    coclass AcadWipeout {
        [default] interface IAcadWipeout;
    };

    [
      uuid(B7A0EF1C-500B-4CDB-A305-8F65C516D1A6),
      helpstring("AcadIdPair Class"),
      noncreatable
    ]
    coclass AcadIdPair {
        [default] interface IAcadIdPair;
    };

    [
      odl,
      uuid(5F816CEF-C87E-4417-B364-2D16B58BE6BB),
      helpstring("TeighaX Interface of a special object for use with the CopyObjects method that contains the object IDs of both the source and destination objects"),
      dual,
      oleautomation
    ]
    interface IAcadIdPair : IDispatch {
        [id(0x00000001), propget, helpstring("Determines if the source object in a CopyObjects operation has been cloned")]
        HRESULT IsCloned([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000002), propget, helpstring("Determines if the owning object in a CopyObjects operation has been translated")]
        HRESULT IsOwnerXlated([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000003), propget, helpstring("Determines if the source object in a CopyObjects operation was part of the primary set of objects being copied, or if it was simply owned by a member in the primary set")]
        HRESULT IsPrimary([out, retval] VARIANT_BOOL* pVal);
        [id(0x00000004), propget, helpstring("The object ID of the source object in the CopyObjects operation")]
        HRESULT key([out, retval] LONG_PTR* pVal);
        [id(0x00000005), propget, helpstring("The object ID of the newly created cloned object in the CopyObjects operation")]
        HRESULT Value([out, retval] LONG_PTR* pVal);
        [id(0x00000006), propget, helpstring("Gets the Application object.")]
        HRESULT Application([out, retval] IDispatch** ApplicationObject);
    };

    [
      uuid(50600B5E-2ED0-4100-9AAE-778D26780004),
      helpstring("OdDbLight wrapper")
    ]
    coclass OdaLight {
        [default] interface IOdaLight;
        [default, source] interface IAcadObjectEvents;
    };

    [
      uuid(760DAF71-3FE9-4AC7-BE2F-D2DA6E5D8CED),
      helpstring("OdDbCamera wrapper")
    ]
    coclass OdaCamera {
        [default] interface IOdaCamera;
        [default, source] interface IAcadObjectEvents;
    };
};
